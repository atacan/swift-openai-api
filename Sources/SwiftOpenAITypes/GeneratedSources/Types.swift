// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Returns a list of assistants.
    ///
    /// - Remark: HTTP `GET /assistants`.
    /// - Remark: Generated from `#/paths//assistants/get(listAssistants)`.
    func listAssistants(_ input: Operations.listAssistants.Input) async throws -> Operations.listAssistants.Output
    /// Create an assistant with a model and instructions.
    ///
    /// - Remark: HTTP `POST /assistants`.
    /// - Remark: Generated from `#/paths//assistants/post(createAssistant)`.
    func createAssistant(_ input: Operations.createAssistant.Input) async throws -> Operations.createAssistant.Output
    /// Retrieves an assistant.
    ///
    /// - Remark: HTTP `GET /assistants/{assistant_id}`.
    /// - Remark: Generated from `#/paths//assistants/{assistant_id}/get(getAssistant)`.
    func getAssistant(_ input: Operations.getAssistant.Input) async throws -> Operations.getAssistant.Output
    /// Modifies an assistant.
    ///
    /// - Remark: HTTP `POST /assistants/{assistant_id}`.
    /// - Remark: Generated from `#/paths//assistants/{assistant_id}/post(modifyAssistant)`.
    func modifyAssistant(_ input: Operations.modifyAssistant.Input) async throws -> Operations.modifyAssistant.Output
    /// Delete an assistant.
    ///
    /// - Remark: HTTP `DELETE /assistants/{assistant_id}`.
    /// - Remark: Generated from `#/paths//assistants/{assistant_id}/delete(deleteAssistant)`.
    func deleteAssistant(_ input: Operations.deleteAssistant.Input) async throws -> Operations.deleteAssistant.Output
    /// Generates audio from the input text.
    ///
    /// - Remark: HTTP `POST /audio/speech`.
    /// - Remark: Generated from `#/paths//audio/speech/post(createSpeech)`.
    func createSpeech(_ input: Operations.createSpeech.Input) async throws -> Operations.createSpeech.Output
    /// Transcribes audio into the input language.
    ///
    /// - Remark: HTTP `POST /audio/transcriptions`.
    /// - Remark: Generated from `#/paths//audio/transcriptions/post(createTranscription)`.
    func createTranscription(_ input: Operations.createTranscription.Input) async throws -> Operations.createTranscription.Output
    /// Translates audio into English.
    ///
    /// - Remark: HTTP `POST /audio/translations`.
    /// - Remark: Generated from `#/paths//audio/translations/post(createTranslation)`.
    func createTranslation(_ input: Operations.createTranslation.Input) async throws -> Operations.createTranslation.Output
    /// List your organization's batches.
    ///
    /// - Remark: HTTP `GET /batches`.
    /// - Remark: Generated from `#/paths//batches/get(listBatches)`.
    func listBatches(_ input: Operations.listBatches.Input) async throws -> Operations.listBatches.Output
    /// Creates and executes a batch from an uploaded file of requests
    ///
    /// - Remark: HTTP `POST /batches`.
    /// - Remark: Generated from `#/paths//batches/post(createBatch)`.
    func createBatch(_ input: Operations.createBatch.Input) async throws -> Operations.createBatch.Output
    /// Retrieves a batch.
    ///
    /// - Remark: HTTP `GET /batches/{batch_id}`.
    /// - Remark: Generated from `#/paths//batches/{batch_id}/get(retrieveBatch)`.
    func retrieveBatch(_ input: Operations.retrieveBatch.Input) async throws -> Operations.retrieveBatch.Output
    /// Cancels an in-progress batch. The batch will be in status `cancelling` for up to 10 minutes, before changing to `cancelled`, where it will have partial results (if any) available in the output file.
    ///
    /// - Remark: HTTP `POST /batches/{batch_id}/cancel`.
    /// - Remark: Generated from `#/paths//batches/{batch_id}/cancel/post(cancelBatch)`.
    func cancelBatch(_ input: Operations.cancelBatch.Input) async throws -> Operations.cancelBatch.Output
    /// List stored Chat Completions. Only Chat Completions that have been stored
    /// with the `store` parameter set to `true` will be returned.
    ///
    ///
    /// - Remark: HTTP `GET /chat/completions`.
    /// - Remark: Generated from `#/paths//chat/completions/get(listChatCompletions)`.
    func listChatCompletions(_ input: Operations.listChatCompletions.Input) async throws -> Operations.listChatCompletions.Output
    /// **Starting a new project?** We recommend trying [Responses](/docs/api-reference/responses) 
    /// to take advantage of the latest OpenAI platform features. Compare
    /// [Chat Completions with Responses](/docs/guides/responses-vs-chat-completions?api-mode=responses).
    ///
    /// ---
    ///
    /// Creates a model response for the given chat conversation. Learn more in the
    /// [text generation](/docs/guides/text-generation), [vision](/docs/guides/vision),
    /// and [audio](/docs/guides/audio) guides.
    ///
    /// Parameter support can differ depending on the model used to generate the
    /// response, particularly for newer reasoning models. Parameters that are only
    /// supported for reasoning models are noted below. For the current state of 
    /// unsupported parameters in reasoning models, 
    /// [refer to the reasoning guide](/docs/guides/reasoning).
    ///
    ///
    /// - Remark: HTTP `POST /chat/completions`.
    /// - Remark: Generated from `#/paths//chat/completions/post(createChatCompletion)`.
    func createChatCompletion(_ input: Operations.createChatCompletion.Input) async throws -> Operations.createChatCompletion.Output
    /// Get a stored chat completion. Only Chat Completions that have been created
    /// with the `store` parameter set to `true` will be returned.
    ///
    ///
    /// - Remark: HTTP `GET /chat/completions/{completion_id}`.
    /// - Remark: Generated from `#/paths//chat/completions/{completion_id}/get(getChatCompletion)`.
    func getChatCompletion(_ input: Operations.getChatCompletion.Input) async throws -> Operations.getChatCompletion.Output
    /// Modify a stored chat completion. Only Chat Completions that have been
    /// created with the `store` parameter set to `true` can be modified. Currently,
    /// the only supported modification is to update the `metadata` field.
    ///
    ///
    /// - Remark: HTTP `POST /chat/completions/{completion_id}`.
    /// - Remark: Generated from `#/paths//chat/completions/{completion_id}/post(updateChatCompletion)`.
    func updateChatCompletion(_ input: Operations.updateChatCompletion.Input) async throws -> Operations.updateChatCompletion.Output
    /// Delete a stored chat completion. Only Chat Completions that have been
    /// created with the `store` parameter set to `true` can be deleted.
    ///
    ///
    /// - Remark: HTTP `DELETE /chat/completions/{completion_id}`.
    /// - Remark: Generated from `#/paths//chat/completions/{completion_id}/delete(deleteChatCompletion)`.
    func deleteChatCompletion(_ input: Operations.deleteChatCompletion.Input) async throws -> Operations.deleteChatCompletion.Output
    /// Get the messages in a stored chat completion. Only Chat Completions that
    /// have been created with the `store` parameter set to `true` will be
    /// returned.
    ///
    ///
    /// - Remark: HTTP `GET /chat/completions/{completion_id}/messages`.
    /// - Remark: Generated from `#/paths//chat/completions/{completion_id}/messages/get(getChatCompletionMessages)`.
    func getChatCompletionMessages(_ input: Operations.getChatCompletionMessages.Input) async throws -> Operations.getChatCompletionMessages.Output
    /// Creates a completion for the provided prompt and parameters.
    ///
    /// - Remark: HTTP `POST /completions`.
    /// - Remark: Generated from `#/paths//completions/post(createCompletion)`.
    func createCompletion(_ input: Operations.createCompletion.Input) async throws -> Operations.createCompletion.Output
    /// Creates an embedding vector representing the input text.
    ///
    /// - Remark: HTTP `POST /embeddings`.
    /// - Remark: Generated from `#/paths//embeddings/post(createEmbedding)`.
    func createEmbedding(_ input: Operations.createEmbedding.Input) async throws -> Operations.createEmbedding.Output
    /// List evaluations for a project.
    ///
    ///
    /// - Remark: HTTP `GET /evals`.
    /// - Remark: Generated from `#/paths//evals/get(listEvals)`.
    func listEvals(_ input: Operations.listEvals.Input) async throws -> Operations.listEvals.Output
    /// Create the structure of an evaluation that can be used to test a model's performance.
    /// An evaluation is a set of testing criteria and a datasource. After creating an evaluation, you can run it on different models and model parameters. We support several types of graders and datasources.
    /// For more information, see the [Evals guide](/docs/guides/evals).
    ///
    ///
    /// - Remark: HTTP `POST /evals`.
    /// - Remark: Generated from `#/paths//evals/post(createEval)`.
    func createEval(_ input: Operations.createEval.Input) async throws -> Operations.createEval.Output
    /// Get an evaluation by ID.
    ///
    ///
    /// - Remark: HTTP `GET /evals/{eval_id}`.
    /// - Remark: Generated from `#/paths//evals/{eval_id}/get(getEval)`.
    func getEval(_ input: Operations.getEval.Input) async throws -> Operations.getEval.Output
    /// Update certain properties of an evaluation.
    ///
    ///
    /// - Remark: HTTP `POST /evals/{eval_id}`.
    /// - Remark: Generated from `#/paths//evals/{eval_id}/post(updateEval)`.
    func updateEval(_ input: Operations.updateEval.Input) async throws -> Operations.updateEval.Output
    /// Delete an evaluation.
    ///
    ///
    /// - Remark: HTTP `DELETE /evals/{eval_id}`.
    /// - Remark: Generated from `#/paths//evals/{eval_id}/delete(deleteEval)`.
    func deleteEval(_ input: Operations.deleteEval.Input) async throws -> Operations.deleteEval.Output
    /// Get a list of runs for an evaluation.
    ///
    ///
    /// - Remark: HTTP `GET /evals/{eval_id}/runs`.
    /// - Remark: Generated from `#/paths//evals/{eval_id}/runs/get(getEvalRuns)`.
    func getEvalRuns(_ input: Operations.getEvalRuns.Input) async throws -> Operations.getEvalRuns.Output
    /// Create a new evaluation run. This is the endpoint that will kick off grading.
    ///
    ///
    /// - Remark: HTTP `POST /evals/{eval_id}/runs`.
    /// - Remark: Generated from `#/paths//evals/{eval_id}/runs/post(createEvalRun)`.
    func createEvalRun(_ input: Operations.createEvalRun.Input) async throws -> Operations.createEvalRun.Output
    /// Get an evaluation run by ID.
    ///
    ///
    /// - Remark: HTTP `GET /evals/{eval_id}/runs/{run_id}`.
    /// - Remark: Generated from `#/paths//evals/{eval_id}/runs/{run_id}/get(getEvalRun)`.
    func getEvalRun(_ input: Operations.getEvalRun.Input) async throws -> Operations.getEvalRun.Output
    /// Cancel an ongoing evaluation run.
    ///
    ///
    /// - Remark: HTTP `POST /evals/{eval_id}/runs/{run_id}`.
    /// - Remark: Generated from `#/paths//evals/{eval_id}/runs/{run_id}/post(cancelEvalRun)`.
    func cancelEvalRun(_ input: Operations.cancelEvalRun.Input) async throws -> Operations.cancelEvalRun.Output
    /// Delete an eval run.
    ///
    ///
    /// - Remark: HTTP `DELETE /evals/{eval_id}/runs/{run_id}`.
    /// - Remark: Generated from `#/paths//evals/{eval_id}/runs/{run_id}/delete(deleteEvalRun)`.
    func deleteEvalRun(_ input: Operations.deleteEvalRun.Input) async throws -> Operations.deleteEvalRun.Output
    /// Get a list of output items for an evaluation run.
    ///
    ///
    /// - Remark: HTTP `GET /evals/{eval_id}/runs/{run_id}/output_items`.
    /// - Remark: Generated from `#/paths//evals/{eval_id}/runs/{run_id}/output_items/get(getEvalRunOutputItems)`.
    func getEvalRunOutputItems(_ input: Operations.getEvalRunOutputItems.Input) async throws -> Operations.getEvalRunOutputItems.Output
    /// Get an evaluation run output item by ID.
    ///
    ///
    /// - Remark: HTTP `GET /evals/{eval_id}/runs/{run_id}/output_items/{output_item_id}`.
    /// - Remark: Generated from `#/paths//evals/{eval_id}/runs/{run_id}/output_items/{output_item_id}/get(getEvalRunOutputItem)`.
    func getEvalRunOutputItem(_ input: Operations.getEvalRunOutputItem.Input) async throws -> Operations.getEvalRunOutputItem.Output
    /// Returns a list of files.
    ///
    /// - Remark: HTTP `GET /files`.
    /// - Remark: Generated from `#/paths//files/get(listFiles)`.
    func listFiles(_ input: Operations.listFiles.Input) async throws -> Operations.listFiles.Output
    /// Upload a file that can be used across various endpoints. Individual files can be up to 512 MB, and the size of all files uploaded by one organization can be up to 100 GB.
    ///
    /// The Assistants API supports files up to 2 million tokens and of specific file types. See the [Assistants Tools guide](/docs/assistants/tools) for details.
    ///
    /// The Fine-tuning API only supports `.jsonl` files. The input also has certain required formats for fine-tuning [chat](/docs/api-reference/fine-tuning/chat-input) or [completions](/docs/api-reference/fine-tuning/completions-input) models.
    ///
    /// The Batch API only supports `.jsonl` files up to 200 MB in size. The input also has a specific required [format](/docs/api-reference/batch/request-input).
    ///
    /// Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
    ///
    ///
    /// - Remark: HTTP `POST /files`.
    /// - Remark: Generated from `#/paths//files/post(createFile)`.
    func createFile(_ input: Operations.createFile.Input) async throws -> Operations.createFile.Output
    /// Returns information about a specific file.
    ///
    /// - Remark: HTTP `GET /files/{file_id}`.
    /// - Remark: Generated from `#/paths//files/{file_id}/get(retrieveFile)`.
    func retrieveFile(_ input: Operations.retrieveFile.Input) async throws -> Operations.retrieveFile.Output
    /// Delete a file.
    ///
    /// - Remark: HTTP `DELETE /files/{file_id}`.
    /// - Remark: Generated from `#/paths//files/{file_id}/delete(deleteFile)`.
    func deleteFile(_ input: Operations.deleteFile.Input) async throws -> Operations.deleteFile.Output
    /// Returns the contents of the specified file.
    ///
    /// - Remark: HTTP `GET /files/{file_id}/content`.
    /// - Remark: Generated from `#/paths//files/{file_id}/content/get(downloadFile)`.
    func downloadFile(_ input: Operations.downloadFile.Input) async throws -> Operations.downloadFile.Output
    /// **NOTE:** This endpoint requires an [admin API key](../admin-api-keys).
    ///
    /// Organization owners can use this endpoint to view all permissions for a fine-tuned model checkpoint.
    ///
    ///
    /// - Remark: HTTP `GET /fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions`.
    /// - Remark: Generated from `#/paths//fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/get(listFineTuningCheckpointPermissions)`.
    func listFineTuningCheckpointPermissions(_ input: Operations.listFineTuningCheckpointPermissions.Input) async throws -> Operations.listFineTuningCheckpointPermissions.Output
    /// **NOTE:** Calling this endpoint requires an [admin API key](../admin-api-keys).
    ///
    /// This enables organization owners to share fine-tuned models with other projects in their organization.
    ///
    ///
    /// - Remark: HTTP `POST /fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions`.
    /// - Remark: Generated from `#/paths//fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/post(createFineTuningCheckpointPermission)`.
    func createFineTuningCheckpointPermission(_ input: Operations.createFineTuningCheckpointPermission.Input) async throws -> Operations.createFineTuningCheckpointPermission.Output
    /// **NOTE:** This endpoint requires an [admin API key](../admin-api-keys).
    ///
    /// Organization owners can use this endpoint to delete a permission for a fine-tuned model checkpoint.
    ///
    ///
    /// - Remark: HTTP `DELETE /fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/{permission_id}`.
    /// - Remark: Generated from `#/paths//fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/{permission_id}/delete(deleteFineTuningCheckpointPermission)`.
    func deleteFineTuningCheckpointPermission(_ input: Operations.deleteFineTuningCheckpointPermission.Input) async throws -> Operations.deleteFineTuningCheckpointPermission.Output
    /// List your organization's fine-tuning jobs
    ///
    ///
    /// - Remark: HTTP `GET /fine_tuning/jobs`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/get(listPaginatedFineTuningJobs)`.
    func listPaginatedFineTuningJobs(_ input: Operations.listPaginatedFineTuningJobs.Input) async throws -> Operations.listPaginatedFineTuningJobs.Output
    /// Creates a fine-tuning job which begins the process of creating a new model from a given dataset.
    ///
    /// Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
    ///
    /// [Learn more about fine-tuning](/docs/guides/fine-tuning)
    ///
    ///
    /// - Remark: HTTP `POST /fine_tuning/jobs`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/post(createFineTuningJob)`.
    func createFineTuningJob(_ input: Operations.createFineTuningJob.Input) async throws -> Operations.createFineTuningJob.Output
    /// Get info about a fine-tuning job.
    ///
    /// [Learn more about fine-tuning](/docs/guides/fine-tuning)
    ///
    ///
    /// - Remark: HTTP `GET /fine_tuning/jobs/{fine_tuning_job_id}`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/get(retrieveFineTuningJob)`.
    func retrieveFineTuningJob(_ input: Operations.retrieveFineTuningJob.Input) async throws -> Operations.retrieveFineTuningJob.Output
    /// Immediately cancel a fine-tune job.
    ///
    ///
    /// - Remark: HTTP `POST /fine_tuning/jobs/{fine_tuning_job_id}/cancel`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/cancel/post(cancelFineTuningJob)`.
    func cancelFineTuningJob(_ input: Operations.cancelFineTuningJob.Input) async throws -> Operations.cancelFineTuningJob.Output
    /// List checkpoints for a fine-tuning job.
    ///
    ///
    /// - Remark: HTTP `GET /fine_tuning/jobs/{fine_tuning_job_id}/checkpoints`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/checkpoints/get(listFineTuningJobCheckpoints)`.
    func listFineTuningJobCheckpoints(_ input: Operations.listFineTuningJobCheckpoints.Input) async throws -> Operations.listFineTuningJobCheckpoints.Output
    /// Get status updates for a fine-tuning job.
    ///
    ///
    /// - Remark: HTTP `GET /fine_tuning/jobs/{fine_tuning_job_id}/events`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/events/get(listFineTuningEvents)`.
    func listFineTuningEvents(_ input: Operations.listFineTuningEvents.Input) async throws -> Operations.listFineTuningEvents.Output
    /// Creates an edited or extended image given one or more source images and a prompt. This endpoint only supports `gpt-image-1` and `dall-e-2`.
    ///
    /// - Remark: HTTP `POST /images/edits`.
    /// - Remark: Generated from `#/paths//images/edits/post(createImageEdit)`.
    func createImageEdit(_ input: Operations.createImageEdit.Input) async throws -> Operations.createImageEdit.Output
    /// Creates an image given a prompt. [Learn more](/docs/guides/images).
    ///
    ///
    /// - Remark: HTTP `POST /images/generations`.
    /// - Remark: Generated from `#/paths//images/generations/post(createImage)`.
    func createImage(_ input: Operations.createImage.Input) async throws -> Operations.createImage.Output
    /// Creates a variation of a given image. This endpoint only supports `dall-e-2`.
    ///
    /// - Remark: HTTP `POST /images/variations`.
    /// - Remark: Generated from `#/paths//images/variations/post(createImageVariation)`.
    func createImageVariation(_ input: Operations.createImageVariation.Input) async throws -> Operations.createImageVariation.Output
    /// Lists the currently available models, and provides basic information about each one such as the owner and availability.
    ///
    /// - Remark: HTTP `GET /models`.
    /// - Remark: Generated from `#/paths//models/get(listModels)`.
    func listModels(_ input: Operations.listModels.Input) async throws -> Operations.listModels.Output
    /// Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
    ///
    /// - Remark: HTTP `GET /models/{model}`.
    /// - Remark: Generated from `#/paths//models/{model}/get(retrieveModel)`.
    func retrieveModel(_ input: Operations.retrieveModel.Input) async throws -> Operations.retrieveModel.Output
    /// Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
    ///
    /// - Remark: HTTP `DELETE /models/{model}`.
    /// - Remark: Generated from `#/paths//models/{model}/delete(deleteModel)`.
    func deleteModel(_ input: Operations.deleteModel.Input) async throws -> Operations.deleteModel.Output
    /// Classifies if text and/or image inputs are potentially harmful. Learn
    /// more in the [moderation guide](/docs/guides/moderation).
    ///
    ///
    /// - Remark: HTTP `POST /moderations`.
    /// - Remark: Generated from `#/paths//moderations/post(createModeration)`.
    func createModeration(_ input: Operations.createModeration.Input) async throws -> Operations.createModeration.Output
    /// List user actions and configuration changes within this organization.
    ///
    /// - Remark: HTTP `GET /organization/audit_logs`.
    /// - Remark: Generated from `#/paths//organization/audit_logs/get(list-audit-logs)`.
    func list_hyphen_audit_hyphen_logs(_ input: Operations.list_hyphen_audit_hyphen_logs.Input) async throws -> Operations.list_hyphen_audit_hyphen_logs.Output
    /// Create a thread.
    ///
    /// - Remark: HTTP `POST /threads`.
    /// - Remark: Generated from `#/paths//threads/post(createThread)`.
    func createThread(_ input: Operations.createThread.Input) async throws -> Operations.createThread.Output
    /// Create a thread and run it in one request.
    ///
    /// - Remark: HTTP `POST /threads/runs`.
    /// - Remark: Generated from `#/paths//threads/runs/post(createThreadAndRun)`.
    func createThreadAndRun(_ input: Operations.createThreadAndRun.Input) async throws -> Operations.createThreadAndRun.Output
    /// Retrieves a thread.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/get(getThread)`.
    func getThread(_ input: Operations.getThread.Input) async throws -> Operations.getThread.Output
    /// Modifies a thread.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/post(modifyThread)`.
    func modifyThread(_ input: Operations.modifyThread.Input) async throws -> Operations.modifyThread.Output
    /// Delete a thread.
    ///
    /// - Remark: HTTP `DELETE /threads/{thread_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/delete(deleteThread)`.
    func deleteThread(_ input: Operations.deleteThread.Input) async throws -> Operations.deleteThread.Output
    /// Returns a list of messages for a given thread.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/messages`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/get(listMessages)`.
    func listMessages(_ input: Operations.listMessages.Input) async throws -> Operations.listMessages.Output
    /// Create a message.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/messages`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/post(createMessage)`.
    func createMessage(_ input: Operations.createMessage.Input) async throws -> Operations.createMessage.Output
    /// Retrieve a message.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/messages/{message_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/{message_id}/get(getMessage)`.
    func getMessage(_ input: Operations.getMessage.Input) async throws -> Operations.getMessage.Output
    /// Modifies a message.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/messages/{message_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/{message_id}/post(modifyMessage)`.
    func modifyMessage(_ input: Operations.modifyMessage.Input) async throws -> Operations.modifyMessage.Output
    /// Deletes a message.
    ///
    /// - Remark: HTTP `DELETE /threads/{thread_id}/messages/{message_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/{message_id}/delete(deleteMessage)`.
    func deleteMessage(_ input: Operations.deleteMessage.Input) async throws -> Operations.deleteMessage.Output
    /// Returns a list of runs belonging to a thread.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/runs`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/get(listRuns)`.
    func listRuns(_ input: Operations.listRuns.Input) async throws -> Operations.listRuns.Output
    /// Create a run.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/runs`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/post(createRun)`.
    func createRun(_ input: Operations.createRun.Input) async throws -> Operations.createRun.Output
    /// Retrieves a run.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/runs/{run_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/get(getRun)`.
    func getRun(_ input: Operations.getRun.Input) async throws -> Operations.getRun.Output
    /// Modifies a run.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/runs/{run_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/post(modifyRun)`.
    func modifyRun(_ input: Operations.modifyRun.Input) async throws -> Operations.modifyRun.Output
    /// Cancels a run that is `in_progress`.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/runs/{run_id}/cancel`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/cancel/post(cancelRun)`.
    func cancelRun(_ input: Operations.cancelRun.Input) async throws -> Operations.cancelRun.Output
    /// Returns a list of run steps belonging to a run.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/runs/{run_id}/steps`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/steps/get(listRunSteps)`.
    func listRunSteps(_ input: Operations.listRunSteps.Input) async throws -> Operations.listRunSteps.Output
    /// Retrieves a run step.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/runs/{run_id}/steps/{step_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/steps/{step_id}/get(getRunStep)`.
    func getRunStep(_ input: Operations.getRunStep.Input) async throws -> Operations.getRunStep.Output
    /// When a run has the `status: "requires_action"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.
    ///
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/runs/{run_id}/submit_tool_outputs`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/submit_tool_outputs/post(submitToolOuputsToRun)`.
    func submitToolOuputsToRun(_ input: Operations.submitToolOuputsToRun.Input) async throws -> Operations.submitToolOuputsToRun.Output
    /// Creates an intermediate [Upload](/docs/api-reference/uploads/object) object
    /// that you can add [Parts](/docs/api-reference/uploads/part-object) to.
    /// Currently, an Upload can accept at most 8 GB in total and expires after an
    /// hour after you create it.
    ///
    /// Once you complete the Upload, we will create a
    /// [File](/docs/api-reference/files/object) object that contains all the parts
    /// you uploaded. This File is usable in the rest of our platform as a regular
    /// File object.
    ///
    /// For certain `purpose` values, the correct `mime_type` must be specified. 
    /// Please refer to documentation for the 
    /// [supported MIME types for your use case](/docs/assistants/tools/file-search#supported-files).
    ///
    /// For guidance on the proper filename extensions for each purpose, please
    /// follow the documentation on [creating a
    /// File](/docs/api-reference/files/create).
    ///
    ///
    /// - Remark: HTTP `POST /uploads`.
    /// - Remark: Generated from `#/paths//uploads/post(createUpload)`.
    func createUpload(_ input: Operations.createUpload.Input) async throws -> Operations.createUpload.Output
    /// Cancels the Upload. No Parts may be added after an Upload is cancelled.
    ///
    ///
    /// - Remark: HTTP `POST /uploads/{upload_id}/cancel`.
    /// - Remark: Generated from `#/paths//uploads/{upload_id}/cancel/post(cancelUpload)`.
    func cancelUpload(_ input: Operations.cancelUpload.Input) async throws -> Operations.cancelUpload.Output
    /// Completes the [Upload](/docs/api-reference/uploads/object). 
    ///
    /// Within the returned Upload object, there is a nested [File](/docs/api-reference/files/object) object that is ready to use in the rest of the platform.
    ///
    /// You can specify the order of the Parts by passing in an ordered list of the Part IDs.
    ///
    /// The number of bytes uploaded upon completion must match the number of bytes initially specified when creating the Upload object. No Parts may be added after an Upload is completed.
    ///
    ///
    /// - Remark: HTTP `POST /uploads/{upload_id}/complete`.
    /// - Remark: Generated from `#/paths//uploads/{upload_id}/complete/post(completeUpload)`.
    func completeUpload(_ input: Operations.completeUpload.Input) async throws -> Operations.completeUpload.Output
    /// Adds a [Part](/docs/api-reference/uploads/part-object) to an [Upload](/docs/api-reference/uploads/object) object. A Part represents a chunk of bytes from the file you are trying to upload. 
    ///
    /// Each Part can be at most 64 MB, and you can add Parts until you hit the Upload maximum of 8 GB.
    ///
    /// It is possible to add multiple Parts in parallel. You can decide the intended order of the Parts when you [complete the Upload](/docs/api-reference/uploads/complete).
    ///
    ///
    /// - Remark: HTTP `POST /uploads/{upload_id}/parts`.
    /// - Remark: Generated from `#/paths//uploads/{upload_id}/parts/post(addUploadPart)`.
    func addUploadPart(_ input: Operations.addUploadPart.Input) async throws -> Operations.addUploadPart.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Returns a list of assistants.
    ///
    /// - Remark: HTTP `GET /assistants`.
    /// - Remark: Generated from `#/paths//assistants/get(listAssistants)`.
    public func listAssistants(
        query: Operations.listAssistants.Input.Query = .init(),
        headers: Operations.listAssistants.Input.Headers = .init()
    ) async throws -> Operations.listAssistants.Output {
        try await listAssistants(Operations.listAssistants.Input(
            query: query,
            headers: headers
        ))
    }
    /// Create an assistant with a model and instructions.
    ///
    /// - Remark: HTTP `POST /assistants`.
    /// - Remark: Generated from `#/paths//assistants/post(createAssistant)`.
    public func createAssistant(
        headers: Operations.createAssistant.Input.Headers = .init(),
        body: Operations.createAssistant.Input.Body
    ) async throws -> Operations.createAssistant.Output {
        try await createAssistant(Operations.createAssistant.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves an assistant.
    ///
    /// - Remark: HTTP `GET /assistants/{assistant_id}`.
    /// - Remark: Generated from `#/paths//assistants/{assistant_id}/get(getAssistant)`.
    public func getAssistant(
        path: Operations.getAssistant.Input.Path,
        headers: Operations.getAssistant.Input.Headers = .init()
    ) async throws -> Operations.getAssistant.Output {
        try await getAssistant(Operations.getAssistant.Input(
            path: path,
            headers: headers
        ))
    }
    /// Modifies an assistant.
    ///
    /// - Remark: HTTP `POST /assistants/{assistant_id}`.
    /// - Remark: Generated from `#/paths//assistants/{assistant_id}/post(modifyAssistant)`.
    public func modifyAssistant(
        path: Operations.modifyAssistant.Input.Path,
        headers: Operations.modifyAssistant.Input.Headers = .init(),
        body: Operations.modifyAssistant.Input.Body
    ) async throws -> Operations.modifyAssistant.Output {
        try await modifyAssistant(Operations.modifyAssistant.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete an assistant.
    ///
    /// - Remark: HTTP `DELETE /assistants/{assistant_id}`.
    /// - Remark: Generated from `#/paths//assistants/{assistant_id}/delete(deleteAssistant)`.
    public func deleteAssistant(
        path: Operations.deleteAssistant.Input.Path,
        headers: Operations.deleteAssistant.Input.Headers = .init()
    ) async throws -> Operations.deleteAssistant.Output {
        try await deleteAssistant(Operations.deleteAssistant.Input(
            path: path,
            headers: headers
        ))
    }
    /// Generates audio from the input text.
    ///
    /// - Remark: HTTP `POST /audio/speech`.
    /// - Remark: Generated from `#/paths//audio/speech/post(createSpeech)`.
    public func createSpeech(
        headers: Operations.createSpeech.Input.Headers = .init(),
        body: Operations.createSpeech.Input.Body
    ) async throws -> Operations.createSpeech.Output {
        try await createSpeech(Operations.createSpeech.Input(
            headers: headers,
            body: body
        ))
    }
    /// Transcribes audio into the input language.
    ///
    /// - Remark: HTTP `POST /audio/transcriptions`.
    /// - Remark: Generated from `#/paths//audio/transcriptions/post(createTranscription)`.
    public func createTranscription(
        headers: Operations.createTranscription.Input.Headers = .init(),
        body: Operations.createTranscription.Input.Body
    ) async throws -> Operations.createTranscription.Output {
        try await createTranscription(Operations.createTranscription.Input(
            headers: headers,
            body: body
        ))
    }
    /// Translates audio into English.
    ///
    /// - Remark: HTTP `POST /audio/translations`.
    /// - Remark: Generated from `#/paths//audio/translations/post(createTranslation)`.
    public func createTranslation(
        headers: Operations.createTranslation.Input.Headers = .init(),
        body: Operations.createTranslation.Input.Body
    ) async throws -> Operations.createTranslation.Output {
        try await createTranslation(Operations.createTranslation.Input(
            headers: headers,
            body: body
        ))
    }
    /// List your organization's batches.
    ///
    /// - Remark: HTTP `GET /batches`.
    /// - Remark: Generated from `#/paths//batches/get(listBatches)`.
    public func listBatches(
        query: Operations.listBatches.Input.Query = .init(),
        headers: Operations.listBatches.Input.Headers = .init()
    ) async throws -> Operations.listBatches.Output {
        try await listBatches(Operations.listBatches.Input(
            query: query,
            headers: headers
        ))
    }
    /// Creates and executes a batch from an uploaded file of requests
    ///
    /// - Remark: HTTP `POST /batches`.
    /// - Remark: Generated from `#/paths//batches/post(createBatch)`.
    public func createBatch(
        headers: Operations.createBatch.Input.Headers = .init(),
        body: Operations.createBatch.Input.Body
    ) async throws -> Operations.createBatch.Output {
        try await createBatch(Operations.createBatch.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves a batch.
    ///
    /// - Remark: HTTP `GET /batches/{batch_id}`.
    /// - Remark: Generated from `#/paths//batches/{batch_id}/get(retrieveBatch)`.
    public func retrieveBatch(
        path: Operations.retrieveBatch.Input.Path,
        headers: Operations.retrieveBatch.Input.Headers = .init()
    ) async throws -> Operations.retrieveBatch.Output {
        try await retrieveBatch(Operations.retrieveBatch.Input(
            path: path,
            headers: headers
        ))
    }
    /// Cancels an in-progress batch. The batch will be in status `cancelling` for up to 10 minutes, before changing to `cancelled`, where it will have partial results (if any) available in the output file.
    ///
    /// - Remark: HTTP `POST /batches/{batch_id}/cancel`.
    /// - Remark: Generated from `#/paths//batches/{batch_id}/cancel/post(cancelBatch)`.
    public func cancelBatch(
        path: Operations.cancelBatch.Input.Path,
        headers: Operations.cancelBatch.Input.Headers = .init()
    ) async throws -> Operations.cancelBatch.Output {
        try await cancelBatch(Operations.cancelBatch.Input(
            path: path,
            headers: headers
        ))
    }
    /// List stored Chat Completions. Only Chat Completions that have been stored
    /// with the `store` parameter set to `true` will be returned.
    ///
    ///
    /// - Remark: HTTP `GET /chat/completions`.
    /// - Remark: Generated from `#/paths//chat/completions/get(listChatCompletions)`.
    public func listChatCompletions(
        query: Operations.listChatCompletions.Input.Query = .init(),
        headers: Operations.listChatCompletions.Input.Headers = .init()
    ) async throws -> Operations.listChatCompletions.Output {
        try await listChatCompletions(Operations.listChatCompletions.Input(
            query: query,
            headers: headers
        ))
    }
    /// **Starting a new project?** We recommend trying [Responses](/docs/api-reference/responses) 
    /// to take advantage of the latest OpenAI platform features. Compare
    /// [Chat Completions with Responses](/docs/guides/responses-vs-chat-completions?api-mode=responses).
    ///
    /// ---
    ///
    /// Creates a model response for the given chat conversation. Learn more in the
    /// [text generation](/docs/guides/text-generation), [vision](/docs/guides/vision),
    /// and [audio](/docs/guides/audio) guides.
    ///
    /// Parameter support can differ depending on the model used to generate the
    /// response, particularly for newer reasoning models. Parameters that are only
    /// supported for reasoning models are noted below. For the current state of 
    /// unsupported parameters in reasoning models, 
    /// [refer to the reasoning guide](/docs/guides/reasoning).
    ///
    ///
    /// - Remark: HTTP `POST /chat/completions`.
    /// - Remark: Generated from `#/paths//chat/completions/post(createChatCompletion)`.
    public func createChatCompletion(
        headers: Operations.createChatCompletion.Input.Headers = .init(),
        body: Operations.createChatCompletion.Input.Body
    ) async throws -> Operations.createChatCompletion.Output {
        try await createChatCompletion(Operations.createChatCompletion.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get a stored chat completion. Only Chat Completions that have been created
    /// with the `store` parameter set to `true` will be returned.
    ///
    ///
    /// - Remark: HTTP `GET /chat/completions/{completion_id}`.
    /// - Remark: Generated from `#/paths//chat/completions/{completion_id}/get(getChatCompletion)`.
    public func getChatCompletion(
        path: Operations.getChatCompletion.Input.Path,
        headers: Operations.getChatCompletion.Input.Headers = .init()
    ) async throws -> Operations.getChatCompletion.Output {
        try await getChatCompletion(Operations.getChatCompletion.Input(
            path: path,
            headers: headers
        ))
    }
    /// Modify a stored chat completion. Only Chat Completions that have been
    /// created with the `store` parameter set to `true` can be modified. Currently,
    /// the only supported modification is to update the `metadata` field.
    ///
    ///
    /// - Remark: HTTP `POST /chat/completions/{completion_id}`.
    /// - Remark: Generated from `#/paths//chat/completions/{completion_id}/post(updateChatCompletion)`.
    public func updateChatCompletion(
        path: Operations.updateChatCompletion.Input.Path,
        headers: Operations.updateChatCompletion.Input.Headers = .init(),
        body: Operations.updateChatCompletion.Input.Body
    ) async throws -> Operations.updateChatCompletion.Output {
        try await updateChatCompletion(Operations.updateChatCompletion.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a stored chat completion. Only Chat Completions that have been
    /// created with the `store` parameter set to `true` can be deleted.
    ///
    ///
    /// - Remark: HTTP `DELETE /chat/completions/{completion_id}`.
    /// - Remark: Generated from `#/paths//chat/completions/{completion_id}/delete(deleteChatCompletion)`.
    public func deleteChatCompletion(
        path: Operations.deleteChatCompletion.Input.Path,
        headers: Operations.deleteChatCompletion.Input.Headers = .init()
    ) async throws -> Operations.deleteChatCompletion.Output {
        try await deleteChatCompletion(Operations.deleteChatCompletion.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get the messages in a stored chat completion. Only Chat Completions that
    /// have been created with the `store` parameter set to `true` will be
    /// returned.
    ///
    ///
    /// - Remark: HTTP `GET /chat/completions/{completion_id}/messages`.
    /// - Remark: Generated from `#/paths//chat/completions/{completion_id}/messages/get(getChatCompletionMessages)`.
    public func getChatCompletionMessages(
        path: Operations.getChatCompletionMessages.Input.Path,
        query: Operations.getChatCompletionMessages.Input.Query = .init(),
        headers: Operations.getChatCompletionMessages.Input.Headers = .init()
    ) async throws -> Operations.getChatCompletionMessages.Output {
        try await getChatCompletionMessages(Operations.getChatCompletionMessages.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Creates a completion for the provided prompt and parameters.
    ///
    /// - Remark: HTTP `POST /completions`.
    /// - Remark: Generated from `#/paths//completions/post(createCompletion)`.
    public func createCompletion(
        headers: Operations.createCompletion.Input.Headers = .init(),
        body: Operations.createCompletion.Input.Body
    ) async throws -> Operations.createCompletion.Output {
        try await createCompletion(Operations.createCompletion.Input(
            headers: headers,
            body: body
        ))
    }
    /// Creates an embedding vector representing the input text.
    ///
    /// - Remark: HTTP `POST /embeddings`.
    /// - Remark: Generated from `#/paths//embeddings/post(createEmbedding)`.
    public func createEmbedding(
        headers: Operations.createEmbedding.Input.Headers = .init(),
        body: Operations.createEmbedding.Input.Body
    ) async throws -> Operations.createEmbedding.Output {
        try await createEmbedding(Operations.createEmbedding.Input(
            headers: headers,
            body: body
        ))
    }
    /// List evaluations for a project.
    ///
    ///
    /// - Remark: HTTP `GET /evals`.
    /// - Remark: Generated from `#/paths//evals/get(listEvals)`.
    public func listEvals(
        query: Operations.listEvals.Input.Query = .init(),
        headers: Operations.listEvals.Input.Headers = .init()
    ) async throws -> Operations.listEvals.Output {
        try await listEvals(Operations.listEvals.Input(
            query: query,
            headers: headers
        ))
    }
    /// Create the structure of an evaluation that can be used to test a model's performance.
    /// An evaluation is a set of testing criteria and a datasource. After creating an evaluation, you can run it on different models and model parameters. We support several types of graders and datasources.
    /// For more information, see the [Evals guide](/docs/guides/evals).
    ///
    ///
    /// - Remark: HTTP `POST /evals`.
    /// - Remark: Generated from `#/paths//evals/post(createEval)`.
    public func createEval(
        headers: Operations.createEval.Input.Headers = .init(),
        body: Operations.createEval.Input.Body
    ) async throws -> Operations.createEval.Output {
        try await createEval(Operations.createEval.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get an evaluation by ID.
    ///
    ///
    /// - Remark: HTTP `GET /evals/{eval_id}`.
    /// - Remark: Generated from `#/paths//evals/{eval_id}/get(getEval)`.
    public func getEval(
        path: Operations.getEval.Input.Path,
        headers: Operations.getEval.Input.Headers = .init()
    ) async throws -> Operations.getEval.Output {
        try await getEval(Operations.getEval.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update certain properties of an evaluation.
    ///
    ///
    /// - Remark: HTTP `POST /evals/{eval_id}`.
    /// - Remark: Generated from `#/paths//evals/{eval_id}/post(updateEval)`.
    public func updateEval(
        path: Operations.updateEval.Input.Path,
        headers: Operations.updateEval.Input.Headers = .init(),
        body: Operations.updateEval.Input.Body
    ) async throws -> Operations.updateEval.Output {
        try await updateEval(Operations.updateEval.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete an evaluation.
    ///
    ///
    /// - Remark: HTTP `DELETE /evals/{eval_id}`.
    /// - Remark: Generated from `#/paths//evals/{eval_id}/delete(deleteEval)`.
    public func deleteEval(
        path: Operations.deleteEval.Input.Path,
        headers: Operations.deleteEval.Input.Headers = .init()
    ) async throws -> Operations.deleteEval.Output {
        try await deleteEval(Operations.deleteEval.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get a list of runs for an evaluation.
    ///
    ///
    /// - Remark: HTTP `GET /evals/{eval_id}/runs`.
    /// - Remark: Generated from `#/paths//evals/{eval_id}/runs/get(getEvalRuns)`.
    public func getEvalRuns(
        path: Operations.getEvalRuns.Input.Path,
        query: Operations.getEvalRuns.Input.Query = .init(),
        headers: Operations.getEvalRuns.Input.Headers = .init()
    ) async throws -> Operations.getEvalRuns.Output {
        try await getEvalRuns(Operations.getEvalRuns.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a new evaluation run. This is the endpoint that will kick off grading.
    ///
    ///
    /// - Remark: HTTP `POST /evals/{eval_id}/runs`.
    /// - Remark: Generated from `#/paths//evals/{eval_id}/runs/post(createEvalRun)`.
    public func createEvalRun(
        path: Operations.createEvalRun.Input.Path,
        headers: Operations.createEvalRun.Input.Headers = .init(),
        body: Operations.createEvalRun.Input.Body
    ) async throws -> Operations.createEvalRun.Output {
        try await createEvalRun(Operations.createEvalRun.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get an evaluation run by ID.
    ///
    ///
    /// - Remark: HTTP `GET /evals/{eval_id}/runs/{run_id}`.
    /// - Remark: Generated from `#/paths//evals/{eval_id}/runs/{run_id}/get(getEvalRun)`.
    public func getEvalRun(
        path: Operations.getEvalRun.Input.Path,
        headers: Operations.getEvalRun.Input.Headers = .init()
    ) async throws -> Operations.getEvalRun.Output {
        try await getEvalRun(Operations.getEvalRun.Input(
            path: path,
            headers: headers
        ))
    }
    /// Cancel an ongoing evaluation run.
    ///
    ///
    /// - Remark: HTTP `POST /evals/{eval_id}/runs/{run_id}`.
    /// - Remark: Generated from `#/paths//evals/{eval_id}/runs/{run_id}/post(cancelEvalRun)`.
    public func cancelEvalRun(
        path: Operations.cancelEvalRun.Input.Path,
        headers: Operations.cancelEvalRun.Input.Headers = .init()
    ) async throws -> Operations.cancelEvalRun.Output {
        try await cancelEvalRun(Operations.cancelEvalRun.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete an eval run.
    ///
    ///
    /// - Remark: HTTP `DELETE /evals/{eval_id}/runs/{run_id}`.
    /// - Remark: Generated from `#/paths//evals/{eval_id}/runs/{run_id}/delete(deleteEvalRun)`.
    public func deleteEvalRun(
        path: Operations.deleteEvalRun.Input.Path,
        headers: Operations.deleteEvalRun.Input.Headers = .init()
    ) async throws -> Operations.deleteEvalRun.Output {
        try await deleteEvalRun(Operations.deleteEvalRun.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get a list of output items for an evaluation run.
    ///
    ///
    /// - Remark: HTTP `GET /evals/{eval_id}/runs/{run_id}/output_items`.
    /// - Remark: Generated from `#/paths//evals/{eval_id}/runs/{run_id}/output_items/get(getEvalRunOutputItems)`.
    public func getEvalRunOutputItems(
        path: Operations.getEvalRunOutputItems.Input.Path,
        query: Operations.getEvalRunOutputItems.Input.Query = .init(),
        headers: Operations.getEvalRunOutputItems.Input.Headers = .init()
    ) async throws -> Operations.getEvalRunOutputItems.Output {
        try await getEvalRunOutputItems(Operations.getEvalRunOutputItems.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get an evaluation run output item by ID.
    ///
    ///
    /// - Remark: HTTP `GET /evals/{eval_id}/runs/{run_id}/output_items/{output_item_id}`.
    /// - Remark: Generated from `#/paths//evals/{eval_id}/runs/{run_id}/output_items/{output_item_id}/get(getEvalRunOutputItem)`.
    public func getEvalRunOutputItem(
        path: Operations.getEvalRunOutputItem.Input.Path,
        headers: Operations.getEvalRunOutputItem.Input.Headers = .init()
    ) async throws -> Operations.getEvalRunOutputItem.Output {
        try await getEvalRunOutputItem(Operations.getEvalRunOutputItem.Input(
            path: path,
            headers: headers
        ))
    }
    /// Returns a list of files.
    ///
    /// - Remark: HTTP `GET /files`.
    /// - Remark: Generated from `#/paths//files/get(listFiles)`.
    public func listFiles(
        query: Operations.listFiles.Input.Query = .init(),
        headers: Operations.listFiles.Input.Headers = .init()
    ) async throws -> Operations.listFiles.Output {
        try await listFiles(Operations.listFiles.Input(
            query: query,
            headers: headers
        ))
    }
    /// Upload a file that can be used across various endpoints. Individual files can be up to 512 MB, and the size of all files uploaded by one organization can be up to 100 GB.
    ///
    /// The Assistants API supports files up to 2 million tokens and of specific file types. See the [Assistants Tools guide](/docs/assistants/tools) for details.
    ///
    /// The Fine-tuning API only supports `.jsonl` files. The input also has certain required formats for fine-tuning [chat](/docs/api-reference/fine-tuning/chat-input) or [completions](/docs/api-reference/fine-tuning/completions-input) models.
    ///
    /// The Batch API only supports `.jsonl` files up to 200 MB in size. The input also has a specific required [format](/docs/api-reference/batch/request-input).
    ///
    /// Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
    ///
    ///
    /// - Remark: HTTP `POST /files`.
    /// - Remark: Generated from `#/paths//files/post(createFile)`.
    public func createFile(
        headers: Operations.createFile.Input.Headers = .init(),
        body: Operations.createFile.Input.Body
    ) async throws -> Operations.createFile.Output {
        try await createFile(Operations.createFile.Input(
            headers: headers,
            body: body
        ))
    }
    /// Returns information about a specific file.
    ///
    /// - Remark: HTTP `GET /files/{file_id}`.
    /// - Remark: Generated from `#/paths//files/{file_id}/get(retrieveFile)`.
    public func retrieveFile(
        path: Operations.retrieveFile.Input.Path,
        headers: Operations.retrieveFile.Input.Headers = .init()
    ) async throws -> Operations.retrieveFile.Output {
        try await retrieveFile(Operations.retrieveFile.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete a file.
    ///
    /// - Remark: HTTP `DELETE /files/{file_id}`.
    /// - Remark: Generated from `#/paths//files/{file_id}/delete(deleteFile)`.
    public func deleteFile(
        path: Operations.deleteFile.Input.Path,
        headers: Operations.deleteFile.Input.Headers = .init()
    ) async throws -> Operations.deleteFile.Output {
        try await deleteFile(Operations.deleteFile.Input(
            path: path,
            headers: headers
        ))
    }
    /// Returns the contents of the specified file.
    ///
    /// - Remark: HTTP `GET /files/{file_id}/content`.
    /// - Remark: Generated from `#/paths//files/{file_id}/content/get(downloadFile)`.
    public func downloadFile(
        path: Operations.downloadFile.Input.Path,
        headers: Operations.downloadFile.Input.Headers = .init()
    ) async throws -> Operations.downloadFile.Output {
        try await downloadFile(Operations.downloadFile.Input(
            path: path,
            headers: headers
        ))
    }
    /// **NOTE:** This endpoint requires an [admin API key](../admin-api-keys).
    ///
    /// Organization owners can use this endpoint to view all permissions for a fine-tuned model checkpoint.
    ///
    ///
    /// - Remark: HTTP `GET /fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions`.
    /// - Remark: Generated from `#/paths//fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/get(listFineTuningCheckpointPermissions)`.
    public func listFineTuningCheckpointPermissions(
        path: Operations.listFineTuningCheckpointPermissions.Input.Path,
        query: Operations.listFineTuningCheckpointPermissions.Input.Query = .init(),
        headers: Operations.listFineTuningCheckpointPermissions.Input.Headers = .init()
    ) async throws -> Operations.listFineTuningCheckpointPermissions.Output {
        try await listFineTuningCheckpointPermissions(Operations.listFineTuningCheckpointPermissions.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// **NOTE:** Calling this endpoint requires an [admin API key](../admin-api-keys).
    ///
    /// This enables organization owners to share fine-tuned models with other projects in their organization.
    ///
    ///
    /// - Remark: HTTP `POST /fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions`.
    /// - Remark: Generated from `#/paths//fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/post(createFineTuningCheckpointPermission)`.
    public func createFineTuningCheckpointPermission(
        path: Operations.createFineTuningCheckpointPermission.Input.Path,
        headers: Operations.createFineTuningCheckpointPermission.Input.Headers = .init(),
        body: Operations.createFineTuningCheckpointPermission.Input.Body
    ) async throws -> Operations.createFineTuningCheckpointPermission.Output {
        try await createFineTuningCheckpointPermission(Operations.createFineTuningCheckpointPermission.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// **NOTE:** This endpoint requires an [admin API key](../admin-api-keys).
    ///
    /// Organization owners can use this endpoint to delete a permission for a fine-tuned model checkpoint.
    ///
    ///
    /// - Remark: HTTP `DELETE /fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/{permission_id}`.
    /// - Remark: Generated from `#/paths//fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/{permission_id}/delete(deleteFineTuningCheckpointPermission)`.
    public func deleteFineTuningCheckpointPermission(
        path: Operations.deleteFineTuningCheckpointPermission.Input.Path,
        headers: Operations.deleteFineTuningCheckpointPermission.Input.Headers = .init()
    ) async throws -> Operations.deleteFineTuningCheckpointPermission.Output {
        try await deleteFineTuningCheckpointPermission(Operations.deleteFineTuningCheckpointPermission.Input(
            path: path,
            headers: headers
        ))
    }
    /// List your organization's fine-tuning jobs
    ///
    ///
    /// - Remark: HTTP `GET /fine_tuning/jobs`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/get(listPaginatedFineTuningJobs)`.
    public func listPaginatedFineTuningJobs(
        query: Operations.listPaginatedFineTuningJobs.Input.Query = .init(),
        headers: Operations.listPaginatedFineTuningJobs.Input.Headers = .init()
    ) async throws -> Operations.listPaginatedFineTuningJobs.Output {
        try await listPaginatedFineTuningJobs(Operations.listPaginatedFineTuningJobs.Input(
            query: query,
            headers: headers
        ))
    }
    /// Creates a fine-tuning job which begins the process of creating a new model from a given dataset.
    ///
    /// Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
    ///
    /// [Learn more about fine-tuning](/docs/guides/fine-tuning)
    ///
    ///
    /// - Remark: HTTP `POST /fine_tuning/jobs`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/post(createFineTuningJob)`.
    public func createFineTuningJob(
        headers: Operations.createFineTuningJob.Input.Headers = .init(),
        body: Operations.createFineTuningJob.Input.Body
    ) async throws -> Operations.createFineTuningJob.Output {
        try await createFineTuningJob(Operations.createFineTuningJob.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get info about a fine-tuning job.
    ///
    /// [Learn more about fine-tuning](/docs/guides/fine-tuning)
    ///
    ///
    /// - Remark: HTTP `GET /fine_tuning/jobs/{fine_tuning_job_id}`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/get(retrieveFineTuningJob)`.
    public func retrieveFineTuningJob(
        path: Operations.retrieveFineTuningJob.Input.Path,
        headers: Operations.retrieveFineTuningJob.Input.Headers = .init()
    ) async throws -> Operations.retrieveFineTuningJob.Output {
        try await retrieveFineTuningJob(Operations.retrieveFineTuningJob.Input(
            path: path,
            headers: headers
        ))
    }
    /// Immediately cancel a fine-tune job.
    ///
    ///
    /// - Remark: HTTP `POST /fine_tuning/jobs/{fine_tuning_job_id}/cancel`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/cancel/post(cancelFineTuningJob)`.
    public func cancelFineTuningJob(
        path: Operations.cancelFineTuningJob.Input.Path,
        headers: Operations.cancelFineTuningJob.Input.Headers = .init()
    ) async throws -> Operations.cancelFineTuningJob.Output {
        try await cancelFineTuningJob(Operations.cancelFineTuningJob.Input(
            path: path,
            headers: headers
        ))
    }
    /// List checkpoints for a fine-tuning job.
    ///
    ///
    /// - Remark: HTTP `GET /fine_tuning/jobs/{fine_tuning_job_id}/checkpoints`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/checkpoints/get(listFineTuningJobCheckpoints)`.
    public func listFineTuningJobCheckpoints(
        path: Operations.listFineTuningJobCheckpoints.Input.Path,
        query: Operations.listFineTuningJobCheckpoints.Input.Query = .init(),
        headers: Operations.listFineTuningJobCheckpoints.Input.Headers = .init()
    ) async throws -> Operations.listFineTuningJobCheckpoints.Output {
        try await listFineTuningJobCheckpoints(Operations.listFineTuningJobCheckpoints.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get status updates for a fine-tuning job.
    ///
    ///
    /// - Remark: HTTP `GET /fine_tuning/jobs/{fine_tuning_job_id}/events`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/events/get(listFineTuningEvents)`.
    public func listFineTuningEvents(
        path: Operations.listFineTuningEvents.Input.Path,
        query: Operations.listFineTuningEvents.Input.Query = .init(),
        headers: Operations.listFineTuningEvents.Input.Headers = .init()
    ) async throws -> Operations.listFineTuningEvents.Output {
        try await listFineTuningEvents(Operations.listFineTuningEvents.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Creates an edited or extended image given one or more source images and a prompt. This endpoint only supports `gpt-image-1` and `dall-e-2`.
    ///
    /// - Remark: HTTP `POST /images/edits`.
    /// - Remark: Generated from `#/paths//images/edits/post(createImageEdit)`.
    public func createImageEdit(
        headers: Operations.createImageEdit.Input.Headers = .init(),
        body: Operations.createImageEdit.Input.Body
    ) async throws -> Operations.createImageEdit.Output {
        try await createImageEdit(Operations.createImageEdit.Input(
            headers: headers,
            body: body
        ))
    }
    /// Creates an image given a prompt. [Learn more](/docs/guides/images).
    ///
    ///
    /// - Remark: HTTP `POST /images/generations`.
    /// - Remark: Generated from `#/paths//images/generations/post(createImage)`.
    public func createImage(
        headers: Operations.createImage.Input.Headers = .init(),
        body: Operations.createImage.Input.Body
    ) async throws -> Operations.createImage.Output {
        try await createImage(Operations.createImage.Input(
            headers: headers,
            body: body
        ))
    }
    /// Creates a variation of a given image. This endpoint only supports `dall-e-2`.
    ///
    /// - Remark: HTTP `POST /images/variations`.
    /// - Remark: Generated from `#/paths//images/variations/post(createImageVariation)`.
    public func createImageVariation(
        headers: Operations.createImageVariation.Input.Headers = .init(),
        body: Operations.createImageVariation.Input.Body
    ) async throws -> Operations.createImageVariation.Output {
        try await createImageVariation(Operations.createImageVariation.Input(
            headers: headers,
            body: body
        ))
    }
    /// Lists the currently available models, and provides basic information about each one such as the owner and availability.
    ///
    /// - Remark: HTTP `GET /models`.
    /// - Remark: Generated from `#/paths//models/get(listModels)`.
    public func listModels(headers: Operations.listModels.Input.Headers = .init()) async throws -> Operations.listModels.Output {
        try await listModels(Operations.listModels.Input(headers: headers))
    }
    /// Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
    ///
    /// - Remark: HTTP `GET /models/{model}`.
    /// - Remark: Generated from `#/paths//models/{model}/get(retrieveModel)`.
    public func retrieveModel(
        path: Operations.retrieveModel.Input.Path,
        headers: Operations.retrieveModel.Input.Headers = .init()
    ) async throws -> Operations.retrieveModel.Output {
        try await retrieveModel(Operations.retrieveModel.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
    ///
    /// - Remark: HTTP `DELETE /models/{model}`.
    /// - Remark: Generated from `#/paths//models/{model}/delete(deleteModel)`.
    public func deleteModel(
        path: Operations.deleteModel.Input.Path,
        headers: Operations.deleteModel.Input.Headers = .init()
    ) async throws -> Operations.deleteModel.Output {
        try await deleteModel(Operations.deleteModel.Input(
            path: path,
            headers: headers
        ))
    }
    /// Classifies if text and/or image inputs are potentially harmful. Learn
    /// more in the [moderation guide](/docs/guides/moderation).
    ///
    ///
    /// - Remark: HTTP `POST /moderations`.
    /// - Remark: Generated from `#/paths//moderations/post(createModeration)`.
    public func createModeration(
        headers: Operations.createModeration.Input.Headers = .init(),
        body: Operations.createModeration.Input.Body
    ) async throws -> Operations.createModeration.Output {
        try await createModeration(Operations.createModeration.Input(
            headers: headers,
            body: body
        ))
    }
    /// List user actions and configuration changes within this organization.
    ///
    /// - Remark: HTTP `GET /organization/audit_logs`.
    /// - Remark: Generated from `#/paths//organization/audit_logs/get(list-audit-logs)`.
    public func list_hyphen_audit_hyphen_logs(
        query: Operations.list_hyphen_audit_hyphen_logs.Input.Query = .init(),
        headers: Operations.list_hyphen_audit_hyphen_logs.Input.Headers = .init()
    ) async throws -> Operations.list_hyphen_audit_hyphen_logs.Output {
        try await list_hyphen_audit_hyphen_logs(Operations.list_hyphen_audit_hyphen_logs.Input(
            query: query,
            headers: headers
        ))
    }
    /// Create a thread.
    ///
    /// - Remark: HTTP `POST /threads`.
    /// - Remark: Generated from `#/paths//threads/post(createThread)`.
    public func createThread(
        headers: Operations.createThread.Input.Headers = .init(),
        body: Operations.createThread.Input.Body? = nil
    ) async throws -> Operations.createThread.Output {
        try await createThread(Operations.createThread.Input(
            headers: headers,
            body: body
        ))
    }
    /// Create a thread and run it in one request.
    ///
    /// - Remark: HTTP `POST /threads/runs`.
    /// - Remark: Generated from `#/paths//threads/runs/post(createThreadAndRun)`.
    public func createThreadAndRun(
        headers: Operations.createThreadAndRun.Input.Headers = .init(),
        body: Operations.createThreadAndRun.Input.Body
    ) async throws -> Operations.createThreadAndRun.Output {
        try await createThreadAndRun(Operations.createThreadAndRun.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves a thread.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/get(getThread)`.
    public func getThread(
        path: Operations.getThread.Input.Path,
        headers: Operations.getThread.Input.Headers = .init()
    ) async throws -> Operations.getThread.Output {
        try await getThread(Operations.getThread.Input(
            path: path,
            headers: headers
        ))
    }
    /// Modifies a thread.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/post(modifyThread)`.
    public func modifyThread(
        path: Operations.modifyThread.Input.Path,
        headers: Operations.modifyThread.Input.Headers = .init(),
        body: Operations.modifyThread.Input.Body
    ) async throws -> Operations.modifyThread.Output {
        try await modifyThread(Operations.modifyThread.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a thread.
    ///
    /// - Remark: HTTP `DELETE /threads/{thread_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/delete(deleteThread)`.
    public func deleteThread(
        path: Operations.deleteThread.Input.Path,
        headers: Operations.deleteThread.Input.Headers = .init()
    ) async throws -> Operations.deleteThread.Output {
        try await deleteThread(Operations.deleteThread.Input(
            path: path,
            headers: headers
        ))
    }
    /// Returns a list of messages for a given thread.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/messages`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/get(listMessages)`.
    public func listMessages(
        path: Operations.listMessages.Input.Path,
        query: Operations.listMessages.Input.Query = .init(),
        headers: Operations.listMessages.Input.Headers = .init()
    ) async throws -> Operations.listMessages.Output {
        try await listMessages(Operations.listMessages.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a message.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/messages`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/post(createMessage)`.
    public func createMessage(
        path: Operations.createMessage.Input.Path,
        headers: Operations.createMessage.Input.Headers = .init(),
        body: Operations.createMessage.Input.Body
    ) async throws -> Operations.createMessage.Output {
        try await createMessage(Operations.createMessage.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Retrieve a message.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/messages/{message_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/{message_id}/get(getMessage)`.
    public func getMessage(
        path: Operations.getMessage.Input.Path,
        headers: Operations.getMessage.Input.Headers = .init()
    ) async throws -> Operations.getMessage.Output {
        try await getMessage(Operations.getMessage.Input(
            path: path,
            headers: headers
        ))
    }
    /// Modifies a message.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/messages/{message_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/{message_id}/post(modifyMessage)`.
    public func modifyMessage(
        path: Operations.modifyMessage.Input.Path,
        headers: Operations.modifyMessage.Input.Headers = .init(),
        body: Operations.modifyMessage.Input.Body
    ) async throws -> Operations.modifyMessage.Output {
        try await modifyMessage(Operations.modifyMessage.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Deletes a message.
    ///
    /// - Remark: HTTP `DELETE /threads/{thread_id}/messages/{message_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/{message_id}/delete(deleteMessage)`.
    public func deleteMessage(
        path: Operations.deleteMessage.Input.Path,
        headers: Operations.deleteMessage.Input.Headers = .init()
    ) async throws -> Operations.deleteMessage.Output {
        try await deleteMessage(Operations.deleteMessage.Input(
            path: path,
            headers: headers
        ))
    }
    /// Returns a list of runs belonging to a thread.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/runs`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/get(listRuns)`.
    public func listRuns(
        path: Operations.listRuns.Input.Path,
        query: Operations.listRuns.Input.Query = .init(),
        headers: Operations.listRuns.Input.Headers = .init()
    ) async throws -> Operations.listRuns.Output {
        try await listRuns(Operations.listRuns.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a run.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/runs`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/post(createRun)`.
    public func createRun(
        path: Operations.createRun.Input.Path,
        query: Operations.createRun.Input.Query = .init(),
        headers: Operations.createRun.Input.Headers = .init(),
        body: Operations.createRun.Input.Body
    ) async throws -> Operations.createRun.Output {
        try await createRun(Operations.createRun.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Retrieves a run.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/runs/{run_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/get(getRun)`.
    public func getRun(
        path: Operations.getRun.Input.Path,
        headers: Operations.getRun.Input.Headers = .init()
    ) async throws -> Operations.getRun.Output {
        try await getRun(Operations.getRun.Input(
            path: path,
            headers: headers
        ))
    }
    /// Modifies a run.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/runs/{run_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/post(modifyRun)`.
    public func modifyRun(
        path: Operations.modifyRun.Input.Path,
        headers: Operations.modifyRun.Input.Headers = .init(),
        body: Operations.modifyRun.Input.Body
    ) async throws -> Operations.modifyRun.Output {
        try await modifyRun(Operations.modifyRun.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Cancels a run that is `in_progress`.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/runs/{run_id}/cancel`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/cancel/post(cancelRun)`.
    public func cancelRun(
        path: Operations.cancelRun.Input.Path,
        headers: Operations.cancelRun.Input.Headers = .init()
    ) async throws -> Operations.cancelRun.Output {
        try await cancelRun(Operations.cancelRun.Input(
            path: path,
            headers: headers
        ))
    }
    /// Returns a list of run steps belonging to a run.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/runs/{run_id}/steps`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/steps/get(listRunSteps)`.
    public func listRunSteps(
        path: Operations.listRunSteps.Input.Path,
        query: Operations.listRunSteps.Input.Query = .init(),
        headers: Operations.listRunSteps.Input.Headers = .init()
    ) async throws -> Operations.listRunSteps.Output {
        try await listRunSteps(Operations.listRunSteps.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Retrieves a run step.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/runs/{run_id}/steps/{step_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/steps/{step_id}/get(getRunStep)`.
    public func getRunStep(
        path: Operations.getRunStep.Input.Path,
        query: Operations.getRunStep.Input.Query = .init(),
        headers: Operations.getRunStep.Input.Headers = .init()
    ) async throws -> Operations.getRunStep.Output {
        try await getRunStep(Operations.getRunStep.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// When a run has the `status: "requires_action"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.
    ///
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/runs/{run_id}/submit_tool_outputs`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/submit_tool_outputs/post(submitToolOuputsToRun)`.
    public func submitToolOuputsToRun(
        path: Operations.submitToolOuputsToRun.Input.Path,
        headers: Operations.submitToolOuputsToRun.Input.Headers = .init(),
        body: Operations.submitToolOuputsToRun.Input.Body
    ) async throws -> Operations.submitToolOuputsToRun.Output {
        try await submitToolOuputsToRun(Operations.submitToolOuputsToRun.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Creates an intermediate [Upload](/docs/api-reference/uploads/object) object
    /// that you can add [Parts](/docs/api-reference/uploads/part-object) to.
    /// Currently, an Upload can accept at most 8 GB in total and expires after an
    /// hour after you create it.
    ///
    /// Once you complete the Upload, we will create a
    /// [File](/docs/api-reference/files/object) object that contains all the parts
    /// you uploaded. This File is usable in the rest of our platform as a regular
    /// File object.
    ///
    /// For certain `purpose` values, the correct `mime_type` must be specified. 
    /// Please refer to documentation for the 
    /// [supported MIME types for your use case](/docs/assistants/tools/file-search#supported-files).
    ///
    /// For guidance on the proper filename extensions for each purpose, please
    /// follow the documentation on [creating a
    /// File](/docs/api-reference/files/create).
    ///
    ///
    /// - Remark: HTTP `POST /uploads`.
    /// - Remark: Generated from `#/paths//uploads/post(createUpload)`.
    public func createUpload(
        headers: Operations.createUpload.Input.Headers = .init(),
        body: Operations.createUpload.Input.Body
    ) async throws -> Operations.createUpload.Output {
        try await createUpload(Operations.createUpload.Input(
            headers: headers,
            body: body
        ))
    }
    /// Cancels the Upload. No Parts may be added after an Upload is cancelled.
    ///
    ///
    /// - Remark: HTTP `POST /uploads/{upload_id}/cancel`.
    /// - Remark: Generated from `#/paths//uploads/{upload_id}/cancel/post(cancelUpload)`.
    public func cancelUpload(
        path: Operations.cancelUpload.Input.Path,
        headers: Operations.cancelUpload.Input.Headers = .init()
    ) async throws -> Operations.cancelUpload.Output {
        try await cancelUpload(Operations.cancelUpload.Input(
            path: path,
            headers: headers
        ))
    }
    /// Completes the [Upload](/docs/api-reference/uploads/object). 
    ///
    /// Within the returned Upload object, there is a nested [File](/docs/api-reference/files/object) object that is ready to use in the rest of the platform.
    ///
    /// You can specify the order of the Parts by passing in an ordered list of the Part IDs.
    ///
    /// The number of bytes uploaded upon completion must match the number of bytes initially specified when creating the Upload object. No Parts may be added after an Upload is completed.
    ///
    ///
    /// - Remark: HTTP `POST /uploads/{upload_id}/complete`.
    /// - Remark: Generated from `#/paths//uploads/{upload_id}/complete/post(completeUpload)`.
    public func completeUpload(
        path: Operations.completeUpload.Input.Path,
        headers: Operations.completeUpload.Input.Headers = .init(),
        body: Operations.completeUpload.Input.Body
    ) async throws -> Operations.completeUpload.Output {
        try await completeUpload(Operations.completeUpload.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Adds a [Part](/docs/api-reference/uploads/part-object) to an [Upload](/docs/api-reference/uploads/object) object. A Part represents a chunk of bytes from the file you are trying to upload. 
    ///
    /// Each Part can be at most 64 MB, and you can add Parts until you hit the Upload maximum of 8 GB.
    ///
    /// It is possible to add multiple Parts in parallel. You can decide the intended order of the Parts when you [complete the Upload](/docs/api-reference/uploads/complete).
    ///
    ///
    /// - Remark: HTTP `POST /uploads/{upload_id}/parts`.
    /// - Remark: Generated from `#/paths//uploads/{upload_id}/parts/post(addUploadPart)`.
    public func addUploadPart(
        path: Operations.addUploadPart.Input.Path,
        headers: Operations.addUploadPart.Input.Headers = .init(),
        body: Operations.addUploadPart.Input.Body
    ) async throws -> Operations.addUploadPart.Output {
        try await addUploadPart(Operations.addUploadPart.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.openai.com/v1",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/AddUploadPartRequest`.
        @frozen public enum AddUploadPartRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/schemas/AddUploadPartRequest/data`.
            public struct dataPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case data(OpenAPIRuntime.MultipartPart<Components.Schemas.AddUploadPartRequest.dataPayload>)
        }
        /// Represents an `assistant` that can call the model and use tools.
        ///
        /// - Remark: Generated from `#/components/schemas/AssistantObject`.
        public struct AssistantObject: Codable, Hashable, Sendable {
            /// The identifier, which can be referenced in API endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantObject/id`.
            public var id: Swift.String
            /// The object type, which is always `assistant`.
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantObject/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case assistant = "assistant"
            }
            /// The object type, which is always `assistant`.
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantObject/object`.
            public var object: Components.Schemas.AssistantObject.objectPayload
            /// The Unix timestamp (in seconds) for when the assistant was created.
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantObject/created_at`.
            public var created_at: Swift.Int
            /// The name of the assistant. The maximum length is 256 characters.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantObject/name`.
            public var name: Swift.String?
            /// The description of the assistant. The maximum length is 512 characters.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantObject/description`.
            public var description: Swift.String?
            /// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantObject/model`.
            public var model: Swift.String
            /// The system instructions that the assistant uses. The maximum length is 256,000 characters.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantObject/instructions`.
            public var instructions: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssistantObject/toolsPayload`.
            @frozen public enum toolsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AssistantObject/toolsPayload/case1`.
                case AssistantToolsCode(Components.Schemas.AssistantToolsCode)
                /// - Remark: Generated from `#/components/schemas/AssistantObject/toolsPayload/case2`.
                case AssistantToolsFileSearch(Components.Schemas.AssistantToolsFileSearch)
                /// - Remark: Generated from `#/components/schemas/AssistantObject/toolsPayload/case3`.
                case AssistantToolsFunction(Components.Schemas.AssistantToolsFunction)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .AssistantToolsCode(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .AssistantToolsFileSearch(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .AssistantToolsFunction(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .AssistantToolsCode(value):
                        try value.encode(to: encoder)
                    case let .AssistantToolsFileSearch(value):
                        try value.encode(to: encoder)
                    case let .AssistantToolsFunction(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantObject/tools`.
            public typealias toolsPayload = [Components.Schemas.AssistantObject.toolsPayloadPayload]
            /// A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantObject/tools`.
            public var tools: Components.Schemas.AssistantObject.toolsPayload
            /// A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantObject/tool_resources`.
            public struct tool_resourcesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AssistantObject/tool_resources/code_interpreter`.
                public struct code_interpreterPayload: Codable, Hashable, Sendable {
                    /// A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter`` tool. There can be a maximum of 20 files associated with the tool.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/AssistantObject/tool_resources/code_interpreter/file_ids`.
                    public var file_ids: [Swift.String]?
                    /// Creates a new `code_interpreterPayload`.
                    ///
                    /// - Parameters:
                    ///   - file_ids: A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter`` tool. There can be a maximum of 20 files associated with the tool.
                    public init(file_ids: [Swift.String]? = nil) {
                        self.file_ids = file_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case file_ids
                    }
                }
                /// - Remark: Generated from `#/components/schemas/AssistantObject/tool_resources/code_interpreter`.
                public var code_interpreter: Components.Schemas.AssistantObject.tool_resourcesPayload.code_interpreterPayload?
                /// - Remark: Generated from `#/components/schemas/AssistantObject/tool_resources/file_search`.
                public struct file_searchPayload: Codable, Hashable, Sendable {
                    /// The ID of the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/AssistantObject/tool_resources/file_search/vector_store_ids`.
                    public var vector_store_ids: [Swift.String]?
                    /// Creates a new `file_searchPayload`.
                    ///
                    /// - Parameters:
                    ///   - vector_store_ids: The ID of the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
                    public init(vector_store_ids: [Swift.String]? = nil) {
                        self.vector_store_ids = vector_store_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case vector_store_ids
                    }
                }
                /// - Remark: Generated from `#/components/schemas/AssistantObject/tool_resources/file_search`.
                public var file_search: Components.Schemas.AssistantObject.tool_resourcesPayload.file_searchPayload?
                /// Creates a new `tool_resourcesPayload`.
                ///
                /// - Parameters:
                ///   - code_interpreter:
                ///   - file_search:
                public init(
                    code_interpreter: Components.Schemas.AssistantObject.tool_resourcesPayload.code_interpreterPayload? = nil,
                    file_search: Components.Schemas.AssistantObject.tool_resourcesPayload.file_searchPayload? = nil
                ) {
                    self.code_interpreter = code_interpreter
                    self.file_search = file_search
                }
                public enum CodingKeys: String, CodingKey {
                    case code_interpreter
                    case file_search
                }
            }
            /// A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantObject/tool_resources`.
            public var tool_resources: Components.Schemas.AssistantObject.tool_resourcesPayload?
            /// - Remark: Generated from `#/components/schemas/AssistantObject/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantObject/temperature`.
            public var temperature: Swift.Double?
            /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            ///
            /// We generally recommend altering this or temperature but not both.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantObject/top_p`.
            public var top_p: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/AssistantObject/response_format`.
            public var response_format: Components.Schemas.AssistantsApiResponseFormatOption?
            /// Creates a new `AssistantObject`.
            ///
            /// - Parameters:
            ///   - id: The identifier, which can be referenced in API endpoints.
            ///   - object: The object type, which is always `assistant`.
            ///   - created_at: The Unix timestamp (in seconds) for when the assistant was created.
            ///   - name: The name of the assistant. The maximum length is 256 characters.
            ///   - description: The description of the assistant. The maximum length is 512 characters.
            ///   - model: ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
            ///   - instructions: The system instructions that the assistant uses. The maximum length is 256,000 characters.
            ///   - tools: A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
            ///   - tool_resources: A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///   - metadata:
            ///   - temperature: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            ///   - top_p: An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            ///   - response_format:
            public init(
                id: Swift.String,
                object: Components.Schemas.AssistantObject.objectPayload,
                created_at: Swift.Int,
                name: Swift.String? = nil,
                description: Swift.String? = nil,
                model: Swift.String,
                instructions: Swift.String? = nil,
                tools: Components.Schemas.AssistantObject.toolsPayload,
                tool_resources: Components.Schemas.AssistantObject.tool_resourcesPayload? = nil,
                metadata: Components.Schemas.Metadata? = nil,
                temperature: Swift.Double? = nil,
                top_p: Swift.Double? = nil,
                response_format: Components.Schemas.AssistantsApiResponseFormatOption? = nil
            ) {
                self.id = id
                self.object = object
                self.created_at = created_at
                self.name = name
                self.description = description
                self.model = model
                self.instructions = instructions
                self.tools = tools
                self.tool_resources = tool_resources
                self.metadata = metadata
                self.temperature = temperature
                self.top_p = top_p
                self.response_format = response_format
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case object
                case created_at
                case name
                case description
                case model
                case instructions
                case tools
                case tool_resources
                case metadata
                case temperature
                case top_p
                case response_format
            }
        }
        /// - Remark: Generated from `#/components/schemas/AssistantSupportedModels`.
        @frozen public enum AssistantSupportedModels: String, Codable, Hashable, Sendable {
            case gpt_hyphen_4_period_1 = "gpt-4.1"
            case gpt_hyphen_4_period_1_hyphen_mini = "gpt-4.1-mini"
            case gpt_hyphen_4_period_1_hyphen_nano = "gpt-4.1-nano"
            case gpt_hyphen_4_period_1_hyphen_2025_hyphen_04_hyphen_14 = "gpt-4.1-2025-04-14"
            case gpt_hyphen_4_period_1_hyphen_mini_hyphen_2025_hyphen_04_hyphen_14 = "gpt-4.1-mini-2025-04-14"
            case gpt_hyphen_4_period_1_hyphen_nano_hyphen_2025_hyphen_04_hyphen_14 = "gpt-4.1-nano-2025-04-14"
            case o3_hyphen_mini = "o3-mini"
            case o3_hyphen_mini_hyphen_2025_hyphen_01_hyphen_31 = "o3-mini-2025-01-31"
            case o1 = "o1"
            case o1_hyphen_2024_hyphen_12_hyphen_17 = "o1-2024-12-17"
            case gpt_hyphen_4o = "gpt-4o"
            case gpt_hyphen_4o_hyphen_2024_hyphen_11_hyphen_20 = "gpt-4o-2024-11-20"
            case gpt_hyphen_4o_hyphen_2024_hyphen_08_hyphen_06 = "gpt-4o-2024-08-06"
            case gpt_hyphen_4o_hyphen_2024_hyphen_05_hyphen_13 = "gpt-4o-2024-05-13"
            case gpt_hyphen_4o_hyphen_mini = "gpt-4o-mini"
            case gpt_hyphen_4o_hyphen_mini_hyphen_2024_hyphen_07_hyphen_18 = "gpt-4o-mini-2024-07-18"
            case gpt_hyphen_4_period_5_hyphen_preview = "gpt-4.5-preview"
            case gpt_hyphen_4_period_5_hyphen_preview_hyphen_2025_hyphen_02_hyphen_27 = "gpt-4.5-preview-2025-02-27"
            case gpt_hyphen_4_hyphen_turbo = "gpt-4-turbo"
            case gpt_hyphen_4_hyphen_turbo_hyphen_2024_hyphen_04_hyphen_09 = "gpt-4-turbo-2024-04-09"
            case gpt_hyphen_4_hyphen_0125_hyphen_preview = "gpt-4-0125-preview"
            case gpt_hyphen_4_hyphen_turbo_hyphen_preview = "gpt-4-turbo-preview"
            case gpt_hyphen_4_hyphen_1106_hyphen_preview = "gpt-4-1106-preview"
            case gpt_hyphen_4_hyphen_vision_hyphen_preview = "gpt-4-vision-preview"
            case gpt_hyphen_4 = "gpt-4"
            case gpt_hyphen_4_hyphen_0314 = "gpt-4-0314"
            case gpt_hyphen_4_hyphen_0613 = "gpt-4-0613"
            case gpt_hyphen_4_hyphen_32k = "gpt-4-32k"
            case gpt_hyphen_4_hyphen_32k_hyphen_0314 = "gpt-4-32k-0314"
            case gpt_hyphen_4_hyphen_32k_hyphen_0613 = "gpt-4-32k-0613"
            case gpt_hyphen_3_period_5_hyphen_turbo = "gpt-3.5-turbo"
            case gpt_hyphen_3_period_5_hyphen_turbo_hyphen_16k = "gpt-3.5-turbo-16k"
            case gpt_hyphen_3_period_5_hyphen_turbo_hyphen_0613 = "gpt-3.5-turbo-0613"
            case gpt_hyphen_3_period_5_hyphen_turbo_hyphen_1106 = "gpt-3.5-turbo-1106"
            case gpt_hyphen_3_period_5_hyphen_turbo_hyphen_0125 = "gpt-3.5-turbo-0125"
            case gpt_hyphen_3_period_5_hyphen_turbo_hyphen_16k_hyphen_0613 = "gpt-3.5-turbo-16k-0613"
        }
        /// - Remark: Generated from `#/components/schemas/AssistantToolsCode`.
        public struct AssistantToolsCode: Codable, Hashable, Sendable {
            /// The type of tool being defined: `code_interpreter`
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantToolsCode/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case code_interpreter = "code_interpreter"
            }
            /// The type of tool being defined: `code_interpreter`
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantToolsCode/type`.
            public var _type: Components.Schemas.AssistantToolsCode._typePayload
            /// Creates a new `AssistantToolsCode`.
            ///
            /// - Parameters:
            ///   - _type: The type of tool being defined: `code_interpreter`
            public init(_type: Components.Schemas.AssistantToolsCode._typePayload) {
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/AssistantToolsFileSearch`.
        public struct AssistantToolsFileSearch: Codable, Hashable, Sendable {
            /// The type of tool being defined: `file_search`
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantToolsFileSearch/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case file_search = "file_search"
            }
            /// The type of tool being defined: `file_search`
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantToolsFileSearch/type`.
            public var _type: Components.Schemas.AssistantToolsFileSearch._typePayload
            /// Overrides for the file search tool.
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantToolsFileSearch/file_search`.
            public struct file_searchPayload: Codable, Hashable, Sendable {
                /// The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.
                ///
                /// Note that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/AssistantToolsFileSearch/file_search/max_num_results`.
                public var max_num_results: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/AssistantToolsFileSearch/file_search/ranking_options`.
                public var ranking_options: Components.Schemas.FileSearchRankingOptions?
                /// Creates a new `file_searchPayload`.
                ///
                /// - Parameters:
                ///   - max_num_results: The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.
                ///   - ranking_options:
                public init(
                    max_num_results: Swift.Int? = nil,
                    ranking_options: Components.Schemas.FileSearchRankingOptions? = nil
                ) {
                    self.max_num_results = max_num_results
                    self.ranking_options = ranking_options
                }
                public enum CodingKeys: String, CodingKey {
                    case max_num_results
                    case ranking_options
                }
            }
            /// Overrides for the file search tool.
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantToolsFileSearch/file_search`.
            public var file_search: Components.Schemas.AssistantToolsFileSearch.file_searchPayload?
            /// Creates a new `AssistantToolsFileSearch`.
            ///
            /// - Parameters:
            ///   - _type: The type of tool being defined: `file_search`
            ///   - file_search: Overrides for the file search tool.
            public init(
                _type: Components.Schemas.AssistantToolsFileSearch._typePayload,
                file_search: Components.Schemas.AssistantToolsFileSearch.file_searchPayload? = nil
            ) {
                self._type = _type
                self.file_search = file_search
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case file_search
            }
        }
        /// - Remark: Generated from `#/components/schemas/AssistantToolsFileSearchTypeOnly`.
        public struct AssistantToolsFileSearchTypeOnly: Codable, Hashable, Sendable {
            /// The type of tool being defined: `file_search`
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantToolsFileSearchTypeOnly/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case file_search = "file_search"
            }
            /// The type of tool being defined: `file_search`
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantToolsFileSearchTypeOnly/type`.
            public var _type: Components.Schemas.AssistantToolsFileSearchTypeOnly._typePayload
            /// Creates a new `AssistantToolsFileSearchTypeOnly`.
            ///
            /// - Parameters:
            ///   - _type: The type of tool being defined: `file_search`
            public init(_type: Components.Schemas.AssistantToolsFileSearchTypeOnly._typePayload) {
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/AssistantToolsFunction`.
        public struct AssistantToolsFunction: Codable, Hashable, Sendable {
            /// The type of tool being defined: `function`
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantToolsFunction/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case function = "function"
            }
            /// The type of tool being defined: `function`
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantToolsFunction/type`.
            public var _type: Components.Schemas.AssistantToolsFunction._typePayload
            /// - Remark: Generated from `#/components/schemas/AssistantToolsFunction/function`.
            public var function: Components.Schemas.FunctionObject
            /// Creates a new `AssistantToolsFunction`.
            ///
            /// - Parameters:
            ///   - _type: The type of tool being defined: `function`
            ///   - function:
            public init(
                _type: Components.Schemas.AssistantToolsFunction._typePayload,
                function: Components.Schemas.FunctionObject
            ) {
                self._type = _type
                self.function = function
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case function
            }
        }
        /// Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.
        ///
        /// Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).
        ///
        /// Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
        ///
        /// **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/AssistantsApiResponseFormatOption`.
        @frozen public enum AssistantsApiResponseFormatOption: Codable, Hashable, Sendable {
            /// `auto` is the default value
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantsApiResponseFormatOption/case1`.
            @frozen public enum Case1Payload: String, Codable, Hashable, Sendable {
                case auto = "auto"
            }
            /// `auto` is the default value
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantsApiResponseFormatOption/case1`.
            case case1(Components.Schemas.AssistantsApiResponseFormatOption.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/AssistantsApiResponseFormatOption/case2`.
            case ResponseFormatText(Components.Schemas.ResponseFormatText)
            /// - Remark: Generated from `#/components/schemas/AssistantsApiResponseFormatOption/case3`.
            case ResponseFormatJsonObject(Components.Schemas.ResponseFormatJsonObject)
            /// - Remark: Generated from `#/components/schemas/AssistantsApiResponseFormatOption/case4`.
            case ResponseFormatJsonSchema(Components.Schemas.ResponseFormatJsonSchema)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ResponseFormatText(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ResponseFormatJsonObject(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ResponseFormatJsonSchema(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .ResponseFormatText(value):
                    try value.encode(to: encoder)
                case let .ResponseFormatJsonObject(value):
                    try value.encode(to: encoder)
                case let .ResponseFormatJsonSchema(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Controls which (if any) tool is called by the model.
        /// `none` means the model will not call any tools and instead generates a message.
        /// `auto` is the default value and means the model can pick between generating a message or calling one or more tools.
        /// `required` means the model must call one or more tools before responding to the user.
        /// Specifying a particular tool like `{"type": "file_search"}` or `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/AssistantsApiToolChoiceOption`.
        @frozen public enum AssistantsApiToolChoiceOption: Codable, Hashable, Sendable {
            /// `none` means the model will not call any tools and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools before responding to the user.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantsApiToolChoiceOption/case1`.
            @frozen public enum Case1Payload: String, Codable, Hashable, Sendable {
                case none = "none"
                case auto = "auto"
                case required = "required"
            }
            /// `none` means the model will not call any tools and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools before responding to the user.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantsApiToolChoiceOption/case1`.
            case case1(Components.Schemas.AssistantsApiToolChoiceOption.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/AssistantsApiToolChoiceOption/case2`.
            case AssistantsNamedToolChoice(Components.Schemas.AssistantsNamedToolChoice)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .AssistantsNamedToolChoice(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .AssistantsNamedToolChoice(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Specifies a tool the model should use. Use to force the model to call a specific tool.
        ///
        /// - Remark: Generated from `#/components/schemas/AssistantsNamedToolChoice`.
        public struct AssistantsNamedToolChoice: Codable, Hashable, Sendable {
            /// The type of the tool. If type is `function`, the function name must be set
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantsNamedToolChoice/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case function = "function"
                case code_interpreter = "code_interpreter"
                case file_search = "file_search"
            }
            /// The type of the tool. If type is `function`, the function name must be set
            ///
            /// - Remark: Generated from `#/components/schemas/AssistantsNamedToolChoice/type`.
            public var _type: Components.Schemas.AssistantsNamedToolChoice._typePayload
            /// - Remark: Generated from `#/components/schemas/AssistantsNamedToolChoice/function`.
            public struct functionPayload: Codable, Hashable, Sendable {
                /// The name of the function to call.
                ///
                /// - Remark: Generated from `#/components/schemas/AssistantsNamedToolChoice/function/name`.
                public var name: Swift.String
                /// Creates a new `functionPayload`.
                ///
                /// - Parameters:
                ///   - name: The name of the function to call.
                public init(name: Swift.String) {
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                }
            }
            /// - Remark: Generated from `#/components/schemas/AssistantsNamedToolChoice/function`.
            public var function: Components.Schemas.AssistantsNamedToolChoice.functionPayload?
            /// Creates a new `AssistantsNamedToolChoice`.
            ///
            /// - Parameters:
            ///   - _type: The type of the tool. If type is `function`, the function name must be set
            ///   - function:
            public init(
                _type: Components.Schemas.AssistantsNamedToolChoice._typePayload,
                function: Components.Schemas.AssistantsNamedToolChoice.functionPayload? = nil
            ) {
                self._type = _type
                self.function = function
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case function
            }
        }
        /// The format of the output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`. For `gpt-4o-transcribe` and `gpt-4o-mini-transcribe`, the only supported format is `json`.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/AudioResponseFormat`.
        @frozen public enum AudioResponseFormat: String, Codable, Hashable, Sendable {
            case json = "json"
            case text = "text"
            case srt = "srt"
            case verbose_json = "verbose_json"
            case vtt = "vtt"
        }
        /// A log of a user action or configuration change within this organization.
        ///
        /// - Remark: Generated from `#/components/schemas/AuditLog`.
        public struct AuditLog: Codable, Hashable, Sendable {
            /// The ID of this log.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/AuditLog/type`.
            public var _type: Components.Schemas.AuditLogEventType
            /// The Unix timestamp (in seconds) of the event.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/effective_at`.
            public var effective_at: Swift.Int
            /// The project that the action was scoped to. Absent for actions not scoped to projects.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/project`.
            public struct projectPayload: Codable, Hashable, Sendable {
                /// The project ID.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/project/id`.
                public var id: Swift.String?
                /// The project title.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/project/name`.
                public var name: Swift.String?
                /// Creates a new `projectPayload`.
                ///
                /// - Parameters:
                ///   - id: The project ID.
                ///   - name: The project title.
                public init(
                    id: Swift.String? = nil,
                    name: Swift.String? = nil
                ) {
                    self.id = id
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case name
                }
            }
            /// The project that the action was scoped to. Absent for actions not scoped to projects.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/project`.
            public var project: Components.Schemas.AuditLog.projectPayload?
            /// - Remark: Generated from `#/components/schemas/AuditLog/actor`.
            public var actor: Components.Schemas.AuditLogActor
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/api_key.created`.
            public struct api_key_period_createdPayload: Codable, Hashable, Sendable {
                /// The tracking ID of the API key.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/api_key.created/id`.
                public var id: Swift.String?
                /// The payload used to create the API key.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/api_key.created/data`.
                public struct dataPayload: Codable, Hashable, Sendable {
                    /// A list of scopes allowed for the API key, e.g. `["api.model.request"]`
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/api_key.created/data/scopes`.
                    public var scopes: [Swift.String]?
                    /// Creates a new `dataPayload`.
                    ///
                    /// - Parameters:
                    ///   - scopes: A list of scopes allowed for the API key, e.g. `["api.model.request"]`
                    public init(scopes: [Swift.String]? = nil) {
                        self.scopes = scopes
                    }
                    public enum CodingKeys: String, CodingKey {
                        case scopes
                    }
                }
                /// The payload used to create the API key.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/api_key.created/data`.
                public var data: Components.Schemas.AuditLog.api_key_period_createdPayload.dataPayload?
                /// Creates a new `api_key_period_createdPayload`.
                ///
                /// - Parameters:
                ///   - id: The tracking ID of the API key.
                ///   - data: The payload used to create the API key.
                public init(
                    id: Swift.String? = nil,
                    data: Components.Schemas.AuditLog.api_key_period_createdPayload.dataPayload? = nil
                ) {
                    self.id = id
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case data
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/api_key.created`.
            public var api_key_period_created: Components.Schemas.AuditLog.api_key_period_createdPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/api_key.updated`.
            public struct api_key_period_updatedPayload: Codable, Hashable, Sendable {
                /// The tracking ID of the API key.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/api_key.updated/id`.
                public var id: Swift.String?
                /// The payload used to update the API key.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/api_key.updated/changes_requested`.
                public struct changes_requestedPayload: Codable, Hashable, Sendable {
                    /// A list of scopes allowed for the API key, e.g. `["api.model.request"]`
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/api_key.updated/changes_requested/scopes`.
                    public var scopes: [Swift.String]?
                    /// Creates a new `changes_requestedPayload`.
                    ///
                    /// - Parameters:
                    ///   - scopes: A list of scopes allowed for the API key, e.g. `["api.model.request"]`
                    public init(scopes: [Swift.String]? = nil) {
                        self.scopes = scopes
                    }
                    public enum CodingKeys: String, CodingKey {
                        case scopes
                    }
                }
                /// The payload used to update the API key.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/api_key.updated/changes_requested`.
                public var changes_requested: Components.Schemas.AuditLog.api_key_period_updatedPayload.changes_requestedPayload?
                /// Creates a new `api_key_period_updatedPayload`.
                ///
                /// - Parameters:
                ///   - id: The tracking ID of the API key.
                ///   - changes_requested: The payload used to update the API key.
                public init(
                    id: Swift.String? = nil,
                    changes_requested: Components.Schemas.AuditLog.api_key_period_updatedPayload.changes_requestedPayload? = nil
                ) {
                    self.id = id
                    self.changes_requested = changes_requested
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case changes_requested
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/api_key.updated`.
            public var api_key_period_updated: Components.Schemas.AuditLog.api_key_period_updatedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/api_key.deleted`.
            public struct api_key_period_deletedPayload: Codable, Hashable, Sendable {
                /// The tracking ID of the API key.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/api_key.deleted/id`.
                public var id: Swift.String?
                /// Creates a new `api_key_period_deletedPayload`.
                ///
                /// - Parameters:
                ///   - id: The tracking ID of the API key.
                public init(id: Swift.String? = nil) {
                    self.id = id
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/api_key.deleted`.
            public var api_key_period_deleted: Components.Schemas.AuditLog.api_key_period_deletedPayload?
            /// The project and fine-tuned model checkpoint that the checkpoint permission was created for.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/checkpoint_permission.created`.
            public struct checkpoint_permission_period_createdPayload: Codable, Hashable, Sendable {
                /// The ID of the checkpoint permission.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/checkpoint_permission.created/id`.
                public var id: Swift.String?
                /// The payload used to create the checkpoint permission.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/checkpoint_permission.created/data`.
                public struct dataPayload: Codable, Hashable, Sendable {
                    /// The ID of the project that the checkpoint permission was created for.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/checkpoint_permission.created/data/project_id`.
                    public var project_id: Swift.String?
                    /// The ID of the fine-tuned model checkpoint.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/checkpoint_permission.created/data/fine_tuned_model_checkpoint`.
                    public var fine_tuned_model_checkpoint: Swift.String?
                    /// Creates a new `dataPayload`.
                    ///
                    /// - Parameters:
                    ///   - project_id: The ID of the project that the checkpoint permission was created for.
                    ///   - fine_tuned_model_checkpoint: The ID of the fine-tuned model checkpoint.
                    public init(
                        project_id: Swift.String? = nil,
                        fine_tuned_model_checkpoint: Swift.String? = nil
                    ) {
                        self.project_id = project_id
                        self.fine_tuned_model_checkpoint = fine_tuned_model_checkpoint
                    }
                    public enum CodingKeys: String, CodingKey {
                        case project_id
                        case fine_tuned_model_checkpoint
                    }
                }
                /// The payload used to create the checkpoint permission.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/checkpoint_permission.created/data`.
                public var data: Components.Schemas.AuditLog.checkpoint_permission_period_createdPayload.dataPayload?
                /// Creates a new `checkpoint_permission_period_createdPayload`.
                ///
                /// - Parameters:
                ///   - id: The ID of the checkpoint permission.
                ///   - data: The payload used to create the checkpoint permission.
                public init(
                    id: Swift.String? = nil,
                    data: Components.Schemas.AuditLog.checkpoint_permission_period_createdPayload.dataPayload? = nil
                ) {
                    self.id = id
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case data
                }
            }
            /// The project and fine-tuned model checkpoint that the checkpoint permission was created for.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/checkpoint_permission.created`.
            public var checkpoint_permission_period_created: Components.Schemas.AuditLog.checkpoint_permission_period_createdPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/checkpoint_permission.deleted`.
            public struct checkpoint_permission_period_deletedPayload: Codable, Hashable, Sendable {
                /// The ID of the checkpoint permission.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/checkpoint_permission.deleted/id`.
                public var id: Swift.String?
                /// Creates a new `checkpoint_permission_period_deletedPayload`.
                ///
                /// - Parameters:
                ///   - id: The ID of the checkpoint permission.
                public init(id: Swift.String? = nil) {
                    self.id = id
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/checkpoint_permission.deleted`.
            public var checkpoint_permission_period_deleted: Components.Schemas.AuditLog.checkpoint_permission_period_deletedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/invite.sent`.
            public struct invite_period_sentPayload: Codable, Hashable, Sendable {
                /// The ID of the invite.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/invite.sent/id`.
                public var id: Swift.String?
                /// The payload used to create the invite.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/invite.sent/data`.
                public struct dataPayload: Codable, Hashable, Sendable {
                    /// The email invited to the organization.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/invite.sent/data/email`.
                    public var email: Swift.String?
                    /// The role the email was invited to be. Is either `owner` or `member`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/invite.sent/data/role`.
                    public var role: Swift.String?
                    /// Creates a new `dataPayload`.
                    ///
                    /// - Parameters:
                    ///   - email: The email invited to the organization.
                    ///   - role: The role the email was invited to be. Is either `owner` or `member`.
                    public init(
                        email: Swift.String? = nil,
                        role: Swift.String? = nil
                    ) {
                        self.email = email
                        self.role = role
                    }
                    public enum CodingKeys: String, CodingKey {
                        case email
                        case role
                    }
                }
                /// The payload used to create the invite.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/invite.sent/data`.
                public var data: Components.Schemas.AuditLog.invite_period_sentPayload.dataPayload?
                /// Creates a new `invite_period_sentPayload`.
                ///
                /// - Parameters:
                ///   - id: The ID of the invite.
                ///   - data: The payload used to create the invite.
                public init(
                    id: Swift.String? = nil,
                    data: Components.Schemas.AuditLog.invite_period_sentPayload.dataPayload? = nil
                ) {
                    self.id = id
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case data
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/invite.sent`.
            public var invite_period_sent: Components.Schemas.AuditLog.invite_period_sentPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/invite.accepted`.
            public struct invite_period_acceptedPayload: Codable, Hashable, Sendable {
                /// The ID of the invite.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/invite.accepted/id`.
                public var id: Swift.String?
                /// Creates a new `invite_period_acceptedPayload`.
                ///
                /// - Parameters:
                ///   - id: The ID of the invite.
                public init(id: Swift.String? = nil) {
                    self.id = id
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/invite.accepted`.
            public var invite_period_accepted: Components.Schemas.AuditLog.invite_period_acceptedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/invite.deleted`.
            public struct invite_period_deletedPayload: Codable, Hashable, Sendable {
                /// The ID of the invite.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/invite.deleted/id`.
                public var id: Swift.String?
                /// Creates a new `invite_period_deletedPayload`.
                ///
                /// - Parameters:
                ///   - id: The ID of the invite.
                public init(id: Swift.String? = nil) {
                    self.id = id
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/invite.deleted`.
            public var invite_period_deleted: Components.Schemas.AuditLog.invite_period_deletedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/login.failed`.
            public struct login_period_failedPayload: Codable, Hashable, Sendable {
                /// The error code of the failure.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/login.failed/error_code`.
                public var error_code: Swift.String?
                /// The error message of the failure.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/login.failed/error_message`.
                public var error_message: Swift.String?
                /// Creates a new `login_period_failedPayload`.
                ///
                /// - Parameters:
                ///   - error_code: The error code of the failure.
                ///   - error_message: The error message of the failure.
                public init(
                    error_code: Swift.String? = nil,
                    error_message: Swift.String? = nil
                ) {
                    self.error_code = error_code
                    self.error_message = error_message
                }
                public enum CodingKeys: String, CodingKey {
                    case error_code
                    case error_message
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/login.failed`.
            public var login_period_failed: Components.Schemas.AuditLog.login_period_failedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/logout.failed`.
            public struct logout_period_failedPayload: Codable, Hashable, Sendable {
                /// The error code of the failure.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/logout.failed/error_code`.
                public var error_code: Swift.String?
                /// The error message of the failure.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/logout.failed/error_message`.
                public var error_message: Swift.String?
                /// Creates a new `logout_period_failedPayload`.
                ///
                /// - Parameters:
                ///   - error_code: The error code of the failure.
                ///   - error_message: The error message of the failure.
                public init(
                    error_code: Swift.String? = nil,
                    error_message: Swift.String? = nil
                ) {
                    self.error_code = error_code
                    self.error_message = error_message
                }
                public enum CodingKeys: String, CodingKey {
                    case error_code
                    case error_message
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/logout.failed`.
            public var logout_period_failed: Components.Schemas.AuditLog.logout_period_failedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/organization.updated`.
            public struct organization_period_updatedPayload: Codable, Hashable, Sendable {
                /// The organization ID.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/organization.updated/id`.
                public var id: Swift.String?
                /// The payload used to update the organization settings.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/organization.updated/changes_requested`.
                public struct changes_requestedPayload: Codable, Hashable, Sendable {
                    /// The organization title.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/organization.updated/changes_requested/title`.
                    public var title: Swift.String?
                    /// The organization description.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/organization.updated/changes_requested/description`.
                    public var description: Swift.String?
                    /// The organization name.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/organization.updated/changes_requested/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/AuditLog/organization.updated/changes_requested/settings`.
                    public struct settingsPayload: Codable, Hashable, Sendable {
                        /// Visibility of the threads page which shows messages created with the Assistants API and Playground. One of `ANY_ROLE`, `OWNERS`, or `NONE`.
                        ///
                        /// - Remark: Generated from `#/components/schemas/AuditLog/organization.updated/changes_requested/settings/threads_ui_visibility`.
                        public var threads_ui_visibility: Swift.String?
                        /// Visibility of the usage dashboard which shows activity and costs for your organization. One of `ANY_ROLE` or `OWNERS`.
                        ///
                        /// - Remark: Generated from `#/components/schemas/AuditLog/organization.updated/changes_requested/settings/usage_dashboard_visibility`.
                        public var usage_dashboard_visibility: Swift.String?
                        /// Creates a new `settingsPayload`.
                        ///
                        /// - Parameters:
                        ///   - threads_ui_visibility: Visibility of the threads page which shows messages created with the Assistants API and Playground. One of `ANY_ROLE`, `OWNERS`, or `NONE`.
                        ///   - usage_dashboard_visibility: Visibility of the usage dashboard which shows activity and costs for your organization. One of `ANY_ROLE` or `OWNERS`.
                        public init(
                            threads_ui_visibility: Swift.String? = nil,
                            usage_dashboard_visibility: Swift.String? = nil
                        ) {
                            self.threads_ui_visibility = threads_ui_visibility
                            self.usage_dashboard_visibility = usage_dashboard_visibility
                        }
                        public enum CodingKeys: String, CodingKey {
                            case threads_ui_visibility
                            case usage_dashboard_visibility
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/AuditLog/organization.updated/changes_requested/settings`.
                    public var settings: Components.Schemas.AuditLog.organization_period_updatedPayload.changes_requestedPayload.settingsPayload?
                    /// Creates a new `changes_requestedPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: The organization title.
                    ///   - description: The organization description.
                    ///   - name: The organization name.
                    ///   - settings:
                    public init(
                        title: Swift.String? = nil,
                        description: Swift.String? = nil,
                        name: Swift.String? = nil,
                        settings: Components.Schemas.AuditLog.organization_period_updatedPayload.changes_requestedPayload.settingsPayload? = nil
                    ) {
                        self.title = title
                        self.description = description
                        self.name = name
                        self.settings = settings
                    }
                    public enum CodingKeys: String, CodingKey {
                        case title
                        case description
                        case name
                        case settings
                    }
                }
                /// The payload used to update the organization settings.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/organization.updated/changes_requested`.
                public var changes_requested: Components.Schemas.AuditLog.organization_period_updatedPayload.changes_requestedPayload?
                /// Creates a new `organization_period_updatedPayload`.
                ///
                /// - Parameters:
                ///   - id: The organization ID.
                ///   - changes_requested: The payload used to update the organization settings.
                public init(
                    id: Swift.String? = nil,
                    changes_requested: Components.Schemas.AuditLog.organization_period_updatedPayload.changes_requestedPayload? = nil
                ) {
                    self.id = id
                    self.changes_requested = changes_requested
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case changes_requested
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/organization.updated`.
            public var organization_period_updated: Components.Schemas.AuditLog.organization_period_updatedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/project.created`.
            public struct project_period_createdPayload: Codable, Hashable, Sendable {
                /// The project ID.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/project.created/id`.
                public var id: Swift.String?
                /// The payload used to create the project.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/project.created/data`.
                public struct dataPayload: Codable, Hashable, Sendable {
                    /// The project name.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/project.created/data/name`.
                    public var name: Swift.String?
                    /// The title of the project as seen on the dashboard.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/project.created/data/title`.
                    public var title: Swift.String?
                    /// Creates a new `dataPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The project name.
                    ///   - title: The title of the project as seen on the dashboard.
                    public init(
                        name: Swift.String? = nil,
                        title: Swift.String? = nil
                    ) {
                        self.name = name
                        self.title = title
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case title
                    }
                }
                /// The payload used to create the project.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/project.created/data`.
                public var data: Components.Schemas.AuditLog.project_period_createdPayload.dataPayload?
                /// Creates a new `project_period_createdPayload`.
                ///
                /// - Parameters:
                ///   - id: The project ID.
                ///   - data: The payload used to create the project.
                public init(
                    id: Swift.String? = nil,
                    data: Components.Schemas.AuditLog.project_period_createdPayload.dataPayload? = nil
                ) {
                    self.id = id
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case data
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/project.created`.
            public var project_period_created: Components.Schemas.AuditLog.project_period_createdPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/project.updated`.
            public struct project_period_updatedPayload: Codable, Hashable, Sendable {
                /// The project ID.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/project.updated/id`.
                public var id: Swift.String?
                /// The payload used to update the project.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/project.updated/changes_requested`.
                public struct changes_requestedPayload: Codable, Hashable, Sendable {
                    /// The title of the project as seen on the dashboard.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/project.updated/changes_requested/title`.
                    public var title: Swift.String?
                    /// Creates a new `changes_requestedPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: The title of the project as seen on the dashboard.
                    public init(title: Swift.String? = nil) {
                        self.title = title
                    }
                    public enum CodingKeys: String, CodingKey {
                        case title
                    }
                }
                /// The payload used to update the project.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/project.updated/changes_requested`.
                public var changes_requested: Components.Schemas.AuditLog.project_period_updatedPayload.changes_requestedPayload?
                /// Creates a new `project_period_updatedPayload`.
                ///
                /// - Parameters:
                ///   - id: The project ID.
                ///   - changes_requested: The payload used to update the project.
                public init(
                    id: Swift.String? = nil,
                    changes_requested: Components.Schemas.AuditLog.project_period_updatedPayload.changes_requestedPayload? = nil
                ) {
                    self.id = id
                    self.changes_requested = changes_requested
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case changes_requested
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/project.updated`.
            public var project_period_updated: Components.Schemas.AuditLog.project_period_updatedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/project.archived`.
            public struct project_period_archivedPayload: Codable, Hashable, Sendable {
                /// The project ID.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/project.archived/id`.
                public var id: Swift.String?
                /// Creates a new `project_period_archivedPayload`.
                ///
                /// - Parameters:
                ///   - id: The project ID.
                public init(id: Swift.String? = nil) {
                    self.id = id
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/project.archived`.
            public var project_period_archived: Components.Schemas.AuditLog.project_period_archivedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/rate_limit.updated`.
            public struct rate_limit_period_updatedPayload: Codable, Hashable, Sendable {
                /// The rate limit ID
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/rate_limit.updated/id`.
                public var id: Swift.String?
                /// The payload used to update the rate limits.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/rate_limit.updated/changes_requested`.
                public struct changes_requestedPayload: Codable, Hashable, Sendable {
                    /// The maximum requests per minute.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/rate_limit.updated/changes_requested/max_requests_per_1_minute`.
                    public var max_requests_per_1_minute: Swift.Int?
                    /// The maximum tokens per minute.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/rate_limit.updated/changes_requested/max_tokens_per_1_minute`.
                    public var max_tokens_per_1_minute: Swift.Int?
                    /// The maximum images per minute. Only relevant for certain models.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/rate_limit.updated/changes_requested/max_images_per_1_minute`.
                    public var max_images_per_1_minute: Swift.Int?
                    /// The maximum audio megabytes per minute. Only relevant for certain models.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/rate_limit.updated/changes_requested/max_audio_megabytes_per_1_minute`.
                    public var max_audio_megabytes_per_1_minute: Swift.Int?
                    /// The maximum requests per day. Only relevant for certain models.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/rate_limit.updated/changes_requested/max_requests_per_1_day`.
                    public var max_requests_per_1_day: Swift.Int?
                    /// The maximum batch input tokens per day. Only relevant for certain models.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/rate_limit.updated/changes_requested/batch_1_day_max_input_tokens`.
                    public var batch_1_day_max_input_tokens: Swift.Int?
                    /// Creates a new `changes_requestedPayload`.
                    ///
                    /// - Parameters:
                    ///   - max_requests_per_1_minute: The maximum requests per minute.
                    ///   - max_tokens_per_1_minute: The maximum tokens per minute.
                    ///   - max_images_per_1_minute: The maximum images per minute. Only relevant for certain models.
                    ///   - max_audio_megabytes_per_1_minute: The maximum audio megabytes per minute. Only relevant for certain models.
                    ///   - max_requests_per_1_day: The maximum requests per day. Only relevant for certain models.
                    ///   - batch_1_day_max_input_tokens: The maximum batch input tokens per day. Only relevant for certain models.
                    public init(
                        max_requests_per_1_minute: Swift.Int? = nil,
                        max_tokens_per_1_minute: Swift.Int? = nil,
                        max_images_per_1_minute: Swift.Int? = nil,
                        max_audio_megabytes_per_1_minute: Swift.Int? = nil,
                        max_requests_per_1_day: Swift.Int? = nil,
                        batch_1_day_max_input_tokens: Swift.Int? = nil
                    ) {
                        self.max_requests_per_1_minute = max_requests_per_1_minute
                        self.max_tokens_per_1_minute = max_tokens_per_1_minute
                        self.max_images_per_1_minute = max_images_per_1_minute
                        self.max_audio_megabytes_per_1_minute = max_audio_megabytes_per_1_minute
                        self.max_requests_per_1_day = max_requests_per_1_day
                        self.batch_1_day_max_input_tokens = batch_1_day_max_input_tokens
                    }
                    public enum CodingKeys: String, CodingKey {
                        case max_requests_per_1_minute
                        case max_tokens_per_1_minute
                        case max_images_per_1_minute
                        case max_audio_megabytes_per_1_minute
                        case max_requests_per_1_day
                        case batch_1_day_max_input_tokens
                    }
                }
                /// The payload used to update the rate limits.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/rate_limit.updated/changes_requested`.
                public var changes_requested: Components.Schemas.AuditLog.rate_limit_period_updatedPayload.changes_requestedPayload?
                /// Creates a new `rate_limit_period_updatedPayload`.
                ///
                /// - Parameters:
                ///   - id: The rate limit ID
                ///   - changes_requested: The payload used to update the rate limits.
                public init(
                    id: Swift.String? = nil,
                    changes_requested: Components.Schemas.AuditLog.rate_limit_period_updatedPayload.changes_requestedPayload? = nil
                ) {
                    self.id = id
                    self.changes_requested = changes_requested
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case changes_requested
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/rate_limit.updated`.
            public var rate_limit_period_updated: Components.Schemas.AuditLog.rate_limit_period_updatedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/rate_limit.deleted`.
            public struct rate_limit_period_deletedPayload: Codable, Hashable, Sendable {
                /// The rate limit ID
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/rate_limit.deleted/id`.
                public var id: Swift.String?
                /// Creates a new `rate_limit_period_deletedPayload`.
                ///
                /// - Parameters:
                ///   - id: The rate limit ID
                public init(id: Swift.String? = nil) {
                    self.id = id
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/rate_limit.deleted`.
            public var rate_limit_period_deleted: Components.Schemas.AuditLog.rate_limit_period_deletedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/service_account.created`.
            public struct service_account_period_createdPayload: Codable, Hashable, Sendable {
                /// The service account ID.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/service_account.created/id`.
                public var id: Swift.String?
                /// The payload used to create the service account.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/service_account.created/data`.
                public struct dataPayload: Codable, Hashable, Sendable {
                    /// The role of the service account. Is either `owner` or `member`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/service_account.created/data/role`.
                    public var role: Swift.String?
                    /// Creates a new `dataPayload`.
                    ///
                    /// - Parameters:
                    ///   - role: The role of the service account. Is either `owner` or `member`.
                    public init(role: Swift.String? = nil) {
                        self.role = role
                    }
                    public enum CodingKeys: String, CodingKey {
                        case role
                    }
                }
                /// The payload used to create the service account.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/service_account.created/data`.
                public var data: Components.Schemas.AuditLog.service_account_period_createdPayload.dataPayload?
                /// Creates a new `service_account_period_createdPayload`.
                ///
                /// - Parameters:
                ///   - id: The service account ID.
                ///   - data: The payload used to create the service account.
                public init(
                    id: Swift.String? = nil,
                    data: Components.Schemas.AuditLog.service_account_period_createdPayload.dataPayload? = nil
                ) {
                    self.id = id
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case data
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/service_account.created`.
            public var service_account_period_created: Components.Schemas.AuditLog.service_account_period_createdPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/service_account.updated`.
            public struct service_account_period_updatedPayload: Codable, Hashable, Sendable {
                /// The service account ID.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/service_account.updated/id`.
                public var id: Swift.String?
                /// The payload used to updated the service account.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/service_account.updated/changes_requested`.
                public struct changes_requestedPayload: Codable, Hashable, Sendable {
                    /// The role of the service account. Is either `owner` or `member`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/service_account.updated/changes_requested/role`.
                    public var role: Swift.String?
                    /// Creates a new `changes_requestedPayload`.
                    ///
                    /// - Parameters:
                    ///   - role: The role of the service account. Is either `owner` or `member`.
                    public init(role: Swift.String? = nil) {
                        self.role = role
                    }
                    public enum CodingKeys: String, CodingKey {
                        case role
                    }
                }
                /// The payload used to updated the service account.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/service_account.updated/changes_requested`.
                public var changes_requested: Components.Schemas.AuditLog.service_account_period_updatedPayload.changes_requestedPayload?
                /// Creates a new `service_account_period_updatedPayload`.
                ///
                /// - Parameters:
                ///   - id: The service account ID.
                ///   - changes_requested: The payload used to updated the service account.
                public init(
                    id: Swift.String? = nil,
                    changes_requested: Components.Schemas.AuditLog.service_account_period_updatedPayload.changes_requestedPayload? = nil
                ) {
                    self.id = id
                    self.changes_requested = changes_requested
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case changes_requested
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/service_account.updated`.
            public var service_account_period_updated: Components.Schemas.AuditLog.service_account_period_updatedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/service_account.deleted`.
            public struct service_account_period_deletedPayload: Codable, Hashable, Sendable {
                /// The service account ID.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/service_account.deleted/id`.
                public var id: Swift.String?
                /// Creates a new `service_account_period_deletedPayload`.
                ///
                /// - Parameters:
                ///   - id: The service account ID.
                public init(id: Swift.String? = nil) {
                    self.id = id
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/service_account.deleted`.
            public var service_account_period_deleted: Components.Schemas.AuditLog.service_account_period_deletedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/user.added`.
            public struct user_period_addedPayload: Codable, Hashable, Sendable {
                /// The user ID.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/user.added/id`.
                public var id: Swift.String?
                /// The payload used to add the user to the project.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/user.added/data`.
                public struct dataPayload: Codable, Hashable, Sendable {
                    /// The role of the user. Is either `owner` or `member`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/user.added/data/role`.
                    public var role: Swift.String?
                    /// Creates a new `dataPayload`.
                    ///
                    /// - Parameters:
                    ///   - role: The role of the user. Is either `owner` or `member`.
                    public init(role: Swift.String? = nil) {
                        self.role = role
                    }
                    public enum CodingKeys: String, CodingKey {
                        case role
                    }
                }
                /// The payload used to add the user to the project.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/user.added/data`.
                public var data: Components.Schemas.AuditLog.user_period_addedPayload.dataPayload?
                /// Creates a new `user_period_addedPayload`.
                ///
                /// - Parameters:
                ///   - id: The user ID.
                ///   - data: The payload used to add the user to the project.
                public init(
                    id: Swift.String? = nil,
                    data: Components.Schemas.AuditLog.user_period_addedPayload.dataPayload? = nil
                ) {
                    self.id = id
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case data
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/user.added`.
            public var user_period_added: Components.Schemas.AuditLog.user_period_addedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/user.updated`.
            public struct user_period_updatedPayload: Codable, Hashable, Sendable {
                /// The project ID.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/user.updated/id`.
                public var id: Swift.String?
                /// The payload used to update the user.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/user.updated/changes_requested`.
                public struct changes_requestedPayload: Codable, Hashable, Sendable {
                    /// The role of the user. Is either `owner` or `member`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/user.updated/changes_requested/role`.
                    public var role: Swift.String?
                    /// Creates a new `changes_requestedPayload`.
                    ///
                    /// - Parameters:
                    ///   - role: The role of the user. Is either `owner` or `member`.
                    public init(role: Swift.String? = nil) {
                        self.role = role
                    }
                    public enum CodingKeys: String, CodingKey {
                        case role
                    }
                }
                /// The payload used to update the user.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/user.updated/changes_requested`.
                public var changes_requested: Components.Schemas.AuditLog.user_period_updatedPayload.changes_requestedPayload?
                /// Creates a new `user_period_updatedPayload`.
                ///
                /// - Parameters:
                ///   - id: The project ID.
                ///   - changes_requested: The payload used to update the user.
                public init(
                    id: Swift.String? = nil,
                    changes_requested: Components.Schemas.AuditLog.user_period_updatedPayload.changes_requestedPayload? = nil
                ) {
                    self.id = id
                    self.changes_requested = changes_requested
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case changes_requested
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/user.updated`.
            public var user_period_updated: Components.Schemas.AuditLog.user_period_updatedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/user.deleted`.
            public struct user_period_deletedPayload: Codable, Hashable, Sendable {
                /// The user ID.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/user.deleted/id`.
                public var id: Swift.String?
                /// Creates a new `user_period_deletedPayload`.
                ///
                /// - Parameters:
                ///   - id: The user ID.
                public init(id: Swift.String? = nil) {
                    self.id = id
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/user.deleted`.
            public var user_period_deleted: Components.Schemas.AuditLog.user_period_deletedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/certificate.created`.
            public struct certificate_period_createdPayload: Codable, Hashable, Sendable {
                /// The certificate ID.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/certificate.created/id`.
                public var id: Swift.String?
                /// The name of the certificate.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/certificate.created/name`.
                public var name: Swift.String?
                /// Creates a new `certificate_period_createdPayload`.
                ///
                /// - Parameters:
                ///   - id: The certificate ID.
                ///   - name: The name of the certificate.
                public init(
                    id: Swift.String? = nil,
                    name: Swift.String? = nil
                ) {
                    self.id = id
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case name
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/certificate.created`.
            public var certificate_period_created: Components.Schemas.AuditLog.certificate_period_createdPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/certificate.updated`.
            public struct certificate_period_updatedPayload: Codable, Hashable, Sendable {
                /// The certificate ID.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/certificate.updated/id`.
                public var id: Swift.String?
                /// The name of the certificate.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/certificate.updated/name`.
                public var name: Swift.String?
                /// Creates a new `certificate_period_updatedPayload`.
                ///
                /// - Parameters:
                ///   - id: The certificate ID.
                ///   - name: The name of the certificate.
                public init(
                    id: Swift.String? = nil,
                    name: Swift.String? = nil
                ) {
                    self.id = id
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case name
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/certificate.updated`.
            public var certificate_period_updated: Components.Schemas.AuditLog.certificate_period_updatedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/certificate.deleted`.
            public struct certificate_period_deletedPayload: Codable, Hashable, Sendable {
                /// The certificate ID.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/certificate.deleted/id`.
                public var id: Swift.String?
                /// The name of the certificate.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/certificate.deleted/name`.
                public var name: Swift.String?
                /// The certificate content in PEM format.
                ///
                /// - Remark: Generated from `#/components/schemas/AuditLog/certificate.deleted/certificate`.
                public var certificate: Swift.String?
                /// Creates a new `certificate_period_deletedPayload`.
                ///
                /// - Parameters:
                ///   - id: The certificate ID.
                ///   - name: The name of the certificate.
                ///   - certificate: The certificate content in PEM format.
                public init(
                    id: Swift.String? = nil,
                    name: Swift.String? = nil,
                    certificate: Swift.String? = nil
                ) {
                    self.id = id
                    self.name = name
                    self.certificate = certificate
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case name
                    case certificate
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/certificate.deleted`.
            public var certificate_period_deleted: Components.Schemas.AuditLog.certificate_period_deletedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/certificates.activated`.
            public struct certificates_period_activatedPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AuditLog/certificates.activated/certificatesPayload`.
                public struct certificatesPayloadPayload: Codable, Hashable, Sendable {
                    /// The certificate ID.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/certificates.activated/certificatesPayload/id`.
                    public var id: Swift.String?
                    /// The name of the certificate.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/certificates.activated/certificatesPayload/name`.
                    public var name: Swift.String?
                    /// Creates a new `certificatesPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - id: The certificate ID.
                    ///   - name: The name of the certificate.
                    public init(
                        id: Swift.String? = nil,
                        name: Swift.String? = nil
                    ) {
                        self.id = id
                        self.name = name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case id
                        case name
                    }
                }
                /// - Remark: Generated from `#/components/schemas/AuditLog/certificates.activated/certificates`.
                public typealias certificatesPayload = [Components.Schemas.AuditLog.certificates_period_activatedPayload.certificatesPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/AuditLog/certificates.activated/certificates`.
                public var certificates: Components.Schemas.AuditLog.certificates_period_activatedPayload.certificatesPayload?
                /// Creates a new `certificates_period_activatedPayload`.
                ///
                /// - Parameters:
                ///   - certificates:
                public init(certificates: Components.Schemas.AuditLog.certificates_period_activatedPayload.certificatesPayload? = nil) {
                    self.certificates = certificates
                }
                public enum CodingKeys: String, CodingKey {
                    case certificates
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/certificates.activated`.
            public var certificates_period_activated: Components.Schemas.AuditLog.certificates_period_activatedPayload?
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/certificates.deactivated`.
            public struct certificates_period_deactivatedPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AuditLog/certificates.deactivated/certificatesPayload`.
                public struct certificatesPayloadPayload: Codable, Hashable, Sendable {
                    /// The certificate ID.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/certificates.deactivated/certificatesPayload/id`.
                    public var id: Swift.String?
                    /// The name of the certificate.
                    ///
                    /// - Remark: Generated from `#/components/schemas/AuditLog/certificates.deactivated/certificatesPayload/name`.
                    public var name: Swift.String?
                    /// Creates a new `certificatesPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - id: The certificate ID.
                    ///   - name: The name of the certificate.
                    public init(
                        id: Swift.String? = nil,
                        name: Swift.String? = nil
                    ) {
                        self.id = id
                        self.name = name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case id
                        case name
                    }
                }
                /// - Remark: Generated from `#/components/schemas/AuditLog/certificates.deactivated/certificates`.
                public typealias certificatesPayload = [Components.Schemas.AuditLog.certificates_period_deactivatedPayload.certificatesPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/AuditLog/certificates.deactivated/certificates`.
                public var certificates: Components.Schemas.AuditLog.certificates_period_deactivatedPayload.certificatesPayload?
                /// Creates a new `certificates_period_deactivatedPayload`.
                ///
                /// - Parameters:
                ///   - certificates:
                public init(certificates: Components.Schemas.AuditLog.certificates_period_deactivatedPayload.certificatesPayload? = nil) {
                    self.certificates = certificates
                }
                public enum CodingKeys: String, CodingKey {
                    case certificates
                }
            }
            /// The details for events with this `type`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLog/certificates.deactivated`.
            public var certificates_period_deactivated: Components.Schemas.AuditLog.certificates_period_deactivatedPayload?
            /// Creates a new `AuditLog`.
            ///
            /// - Parameters:
            ///   - id: The ID of this log.
            ///   - _type:
            ///   - effective_at: The Unix timestamp (in seconds) of the event.
            ///   - project: The project that the action was scoped to. Absent for actions not scoped to projects.
            ///   - actor:
            ///   - api_key_period_created: The details for events with this `type`.
            ///   - api_key_period_updated: The details for events with this `type`.
            ///   - api_key_period_deleted: The details for events with this `type`.
            ///   - checkpoint_permission_period_created: The project and fine-tuned model checkpoint that the checkpoint permission was created for.
            ///   - checkpoint_permission_period_deleted: The details for events with this `type`.
            ///   - invite_period_sent: The details for events with this `type`.
            ///   - invite_period_accepted: The details for events with this `type`.
            ///   - invite_period_deleted: The details for events with this `type`.
            ///   - login_period_failed: The details for events with this `type`.
            ///   - logout_period_failed: The details for events with this `type`.
            ///   - organization_period_updated: The details for events with this `type`.
            ///   - project_period_created: The details for events with this `type`.
            ///   - project_period_updated: The details for events with this `type`.
            ///   - project_period_archived: The details for events with this `type`.
            ///   - rate_limit_period_updated: The details for events with this `type`.
            ///   - rate_limit_period_deleted: The details for events with this `type`.
            ///   - service_account_period_created: The details for events with this `type`.
            ///   - service_account_period_updated: The details for events with this `type`.
            ///   - service_account_period_deleted: The details for events with this `type`.
            ///   - user_period_added: The details for events with this `type`.
            ///   - user_period_updated: The details for events with this `type`.
            ///   - user_period_deleted: The details for events with this `type`.
            ///   - certificate_period_created: The details for events with this `type`.
            ///   - certificate_period_updated: The details for events with this `type`.
            ///   - certificate_period_deleted: The details for events with this `type`.
            ///   - certificates_period_activated: The details for events with this `type`.
            ///   - certificates_period_deactivated: The details for events with this `type`.
            public init(
                id: Swift.String,
                _type: Components.Schemas.AuditLogEventType,
                effective_at: Swift.Int,
                project: Components.Schemas.AuditLog.projectPayload? = nil,
                actor: Components.Schemas.AuditLogActor,
                api_key_period_created: Components.Schemas.AuditLog.api_key_period_createdPayload? = nil,
                api_key_period_updated: Components.Schemas.AuditLog.api_key_period_updatedPayload? = nil,
                api_key_period_deleted: Components.Schemas.AuditLog.api_key_period_deletedPayload? = nil,
                checkpoint_permission_period_created: Components.Schemas.AuditLog.checkpoint_permission_period_createdPayload? = nil,
                checkpoint_permission_period_deleted: Components.Schemas.AuditLog.checkpoint_permission_period_deletedPayload? = nil,
                invite_period_sent: Components.Schemas.AuditLog.invite_period_sentPayload? = nil,
                invite_period_accepted: Components.Schemas.AuditLog.invite_period_acceptedPayload? = nil,
                invite_period_deleted: Components.Schemas.AuditLog.invite_period_deletedPayload? = nil,
                login_period_failed: Components.Schemas.AuditLog.login_period_failedPayload? = nil,
                logout_period_failed: Components.Schemas.AuditLog.logout_period_failedPayload? = nil,
                organization_period_updated: Components.Schemas.AuditLog.organization_period_updatedPayload? = nil,
                project_period_created: Components.Schemas.AuditLog.project_period_createdPayload? = nil,
                project_period_updated: Components.Schemas.AuditLog.project_period_updatedPayload? = nil,
                project_period_archived: Components.Schemas.AuditLog.project_period_archivedPayload? = nil,
                rate_limit_period_updated: Components.Schemas.AuditLog.rate_limit_period_updatedPayload? = nil,
                rate_limit_period_deleted: Components.Schemas.AuditLog.rate_limit_period_deletedPayload? = nil,
                service_account_period_created: Components.Schemas.AuditLog.service_account_period_createdPayload? = nil,
                service_account_period_updated: Components.Schemas.AuditLog.service_account_period_updatedPayload? = nil,
                service_account_period_deleted: Components.Schemas.AuditLog.service_account_period_deletedPayload? = nil,
                user_period_added: Components.Schemas.AuditLog.user_period_addedPayload? = nil,
                user_period_updated: Components.Schemas.AuditLog.user_period_updatedPayload? = nil,
                user_period_deleted: Components.Schemas.AuditLog.user_period_deletedPayload? = nil,
                certificate_period_created: Components.Schemas.AuditLog.certificate_period_createdPayload? = nil,
                certificate_period_updated: Components.Schemas.AuditLog.certificate_period_updatedPayload? = nil,
                certificate_period_deleted: Components.Schemas.AuditLog.certificate_period_deletedPayload? = nil,
                certificates_period_activated: Components.Schemas.AuditLog.certificates_period_activatedPayload? = nil,
                certificates_period_deactivated: Components.Schemas.AuditLog.certificates_period_deactivatedPayload? = nil
            ) {
                self.id = id
                self._type = _type
                self.effective_at = effective_at
                self.project = project
                self.actor = actor
                self.api_key_period_created = api_key_period_created
                self.api_key_period_updated = api_key_period_updated
                self.api_key_period_deleted = api_key_period_deleted
                self.checkpoint_permission_period_created = checkpoint_permission_period_created
                self.checkpoint_permission_period_deleted = checkpoint_permission_period_deleted
                self.invite_period_sent = invite_period_sent
                self.invite_period_accepted = invite_period_accepted
                self.invite_period_deleted = invite_period_deleted
                self.login_period_failed = login_period_failed
                self.logout_period_failed = logout_period_failed
                self.organization_period_updated = organization_period_updated
                self.project_period_created = project_period_created
                self.project_period_updated = project_period_updated
                self.project_period_archived = project_period_archived
                self.rate_limit_period_updated = rate_limit_period_updated
                self.rate_limit_period_deleted = rate_limit_period_deleted
                self.service_account_period_created = service_account_period_created
                self.service_account_period_updated = service_account_period_updated
                self.service_account_period_deleted = service_account_period_deleted
                self.user_period_added = user_period_added
                self.user_period_updated = user_period_updated
                self.user_period_deleted = user_period_deleted
                self.certificate_period_created = certificate_period_created
                self.certificate_period_updated = certificate_period_updated
                self.certificate_period_deleted = certificate_period_deleted
                self.certificates_period_activated = certificates_period_activated
                self.certificates_period_deactivated = certificates_period_deactivated
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case _type = "type"
                case effective_at
                case project
                case actor
                case api_key_period_created = "api_key.created"
                case api_key_period_updated = "api_key.updated"
                case api_key_period_deleted = "api_key.deleted"
                case checkpoint_permission_period_created = "checkpoint_permission.created"
                case checkpoint_permission_period_deleted = "checkpoint_permission.deleted"
                case invite_period_sent = "invite.sent"
                case invite_period_accepted = "invite.accepted"
                case invite_period_deleted = "invite.deleted"
                case login_period_failed = "login.failed"
                case logout_period_failed = "logout.failed"
                case organization_period_updated = "organization.updated"
                case project_period_created = "project.created"
                case project_period_updated = "project.updated"
                case project_period_archived = "project.archived"
                case rate_limit_period_updated = "rate_limit.updated"
                case rate_limit_period_deleted = "rate_limit.deleted"
                case service_account_period_created = "service_account.created"
                case service_account_period_updated = "service_account.updated"
                case service_account_period_deleted = "service_account.deleted"
                case user_period_added = "user.added"
                case user_period_updated = "user.updated"
                case user_period_deleted = "user.deleted"
                case certificate_period_created = "certificate.created"
                case certificate_period_updated = "certificate.updated"
                case certificate_period_deleted = "certificate.deleted"
                case certificates_period_activated = "certificates.activated"
                case certificates_period_deactivated = "certificates.deactivated"
            }
        }
        /// The actor who performed the audit logged action.
        ///
        /// - Remark: Generated from `#/components/schemas/AuditLogActor`.
        public struct AuditLogActor: Codable, Hashable, Sendable {
            /// The type of actor. Is either `session` or `api_key`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLogActor/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case session = "session"
                case api_key = "api_key"
            }
            /// The type of actor. Is either `session` or `api_key`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLogActor/type`.
            public var _type: Components.Schemas.AuditLogActor._typePayload?
            /// - Remark: Generated from `#/components/schemas/AuditLogActor/session`.
            public var session: Components.Schemas.AuditLogActorSession?
            /// - Remark: Generated from `#/components/schemas/AuditLogActor/api_key`.
            public var api_key: Components.Schemas.AuditLogActorApiKey?
            /// Creates a new `AuditLogActor`.
            ///
            /// - Parameters:
            ///   - _type: The type of actor. Is either `session` or `api_key`.
            ///   - session:
            ///   - api_key:
            public init(
                _type: Components.Schemas.AuditLogActor._typePayload? = nil,
                session: Components.Schemas.AuditLogActorSession? = nil,
                api_key: Components.Schemas.AuditLogActorApiKey? = nil
            ) {
                self._type = _type
                self.session = session
                self.api_key = api_key
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case session
                case api_key
            }
        }
        /// The API Key used to perform the audit logged action.
        ///
        /// - Remark: Generated from `#/components/schemas/AuditLogActorApiKey`.
        public struct AuditLogActorApiKey: Codable, Hashable, Sendable {
            /// The tracking id of the API key.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLogActorApiKey/id`.
            public var id: Swift.String?
            /// The type of API key. Can be either `user` or `service_account`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLogActorApiKey/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case user = "user"
                case service_account = "service_account"
            }
            /// The type of API key. Can be either `user` or `service_account`.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLogActorApiKey/type`.
            public var _type: Components.Schemas.AuditLogActorApiKey._typePayload?
            /// - Remark: Generated from `#/components/schemas/AuditLogActorApiKey/user`.
            public var user: Components.Schemas.AuditLogActorUser?
            /// - Remark: Generated from `#/components/schemas/AuditLogActorApiKey/service_account`.
            public var service_account: Components.Schemas.AuditLogActorServiceAccount?
            /// Creates a new `AuditLogActorApiKey`.
            ///
            /// - Parameters:
            ///   - id: The tracking id of the API key.
            ///   - _type: The type of API key. Can be either `user` or `service_account`.
            ///   - user:
            ///   - service_account:
            public init(
                id: Swift.String? = nil,
                _type: Components.Schemas.AuditLogActorApiKey._typePayload? = nil,
                user: Components.Schemas.AuditLogActorUser? = nil,
                service_account: Components.Schemas.AuditLogActorServiceAccount? = nil
            ) {
                self.id = id
                self._type = _type
                self.user = user
                self.service_account = service_account
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case _type = "type"
                case user
                case service_account
            }
        }
        /// The service account that performed the audit logged action.
        ///
        /// - Remark: Generated from `#/components/schemas/AuditLogActorServiceAccount`.
        public struct AuditLogActorServiceAccount: Codable, Hashable, Sendable {
            /// The service account id.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLogActorServiceAccount/id`.
            public var id: Swift.String?
            /// Creates a new `AuditLogActorServiceAccount`.
            ///
            /// - Parameters:
            ///   - id: The service account id.
            public init(id: Swift.String? = nil) {
                self.id = id
            }
            public enum CodingKeys: String, CodingKey {
                case id
            }
        }
        /// The session in which the audit logged action was performed.
        ///
        /// - Remark: Generated from `#/components/schemas/AuditLogActorSession`.
        public struct AuditLogActorSession: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AuditLogActorSession/user`.
            public var user: Components.Schemas.AuditLogActorUser?
            /// The IP address from which the action was performed.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLogActorSession/ip_address`.
            public var ip_address: Swift.String?
            /// Creates a new `AuditLogActorSession`.
            ///
            /// - Parameters:
            ///   - user:
            ///   - ip_address: The IP address from which the action was performed.
            public init(
                user: Components.Schemas.AuditLogActorUser? = nil,
                ip_address: Swift.String? = nil
            ) {
                self.user = user
                self.ip_address = ip_address
            }
            public enum CodingKeys: String, CodingKey {
                case user
                case ip_address
            }
        }
        /// The user who performed the audit logged action.
        ///
        /// - Remark: Generated from `#/components/schemas/AuditLogActorUser`.
        public struct AuditLogActorUser: Codable, Hashable, Sendable {
            /// The user id.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLogActorUser/id`.
            public var id: Swift.String?
            /// The user email.
            ///
            /// - Remark: Generated from `#/components/schemas/AuditLogActorUser/email`.
            public var email: Swift.String?
            /// Creates a new `AuditLogActorUser`.
            ///
            /// - Parameters:
            ///   - id: The user id.
            ///   - email: The user email.
            public init(
                id: Swift.String? = nil,
                email: Swift.String? = nil
            ) {
                self.id = id
                self.email = email
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case email
            }
        }
        /// The event type.
        ///
        /// - Remark: Generated from `#/components/schemas/AuditLogEventType`.
        @frozen public enum AuditLogEventType: String, Codable, Hashable, Sendable {
            case api_key_period_created = "api_key.created"
            case api_key_period_updated = "api_key.updated"
            case api_key_period_deleted = "api_key.deleted"
            case checkpoint_permission_period_created = "checkpoint_permission.created"
            case checkpoint_permission_period_deleted = "checkpoint_permission.deleted"
            case invite_period_sent = "invite.sent"
            case invite_period_accepted = "invite.accepted"
            case invite_period_deleted = "invite.deleted"
            case login_period_succeeded = "login.succeeded"
            case login_period_failed = "login.failed"
            case logout_period_succeeded = "logout.succeeded"
            case logout_period_failed = "logout.failed"
            case organization_period_updated = "organization.updated"
            case project_period_created = "project.created"
            case project_period_updated = "project.updated"
            case project_period_archived = "project.archived"
            case service_account_period_created = "service_account.created"
            case service_account_period_updated = "service_account.updated"
            case service_account_period_deleted = "service_account.deleted"
            case rate_limit_period_updated = "rate_limit.updated"
            case rate_limit_period_deleted = "rate_limit.deleted"
            case user_period_added = "user.added"
            case user_period_updated = "user.updated"
            case user_period_deleted = "user.deleted"
        }
        /// - Remark: Generated from `#/components/schemas/Batch`.
        public struct Batch: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Batch/id`.
            public var id: Swift.String
            /// The object type, which is always `batch`.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case batch = "batch"
            }
            /// The object type, which is always `batch`.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/object`.
            public var object: Components.Schemas.Batch.objectPayload
            /// The OpenAI API endpoint used by the batch.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/endpoint`.
            public var endpoint: Swift.String
            /// - Remark: Generated from `#/components/schemas/Batch/errors`.
            public struct errorsPayload: Codable, Hashable, Sendable {
                /// The object type, which is always `list`.
                ///
                /// - Remark: Generated from `#/components/schemas/Batch/errors/object`.
                public var object: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Batch/errors/dataPayload`.
                public struct dataPayloadPayload: Codable, Hashable, Sendable {
                    /// An error code identifying the error type.
                    ///
                    /// - Remark: Generated from `#/components/schemas/Batch/errors/dataPayload/code`.
                    public var code: Swift.String?
                    /// A human-readable message providing more details about the error.
                    ///
                    /// - Remark: Generated from `#/components/schemas/Batch/errors/dataPayload/message`.
                    public var message: Swift.String?
                    /// The name of the parameter that caused the error, if applicable.
                    ///
                    /// - Remark: Generated from `#/components/schemas/Batch/errors/dataPayload/param`.
                    public var param: Swift.String?
                    /// The line number of the input file where the error occurred, if applicable.
                    ///
                    /// - Remark: Generated from `#/components/schemas/Batch/errors/dataPayload/line`.
                    public var line: Swift.Int?
                    /// Creates a new `dataPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - code: An error code identifying the error type.
                    ///   - message: A human-readable message providing more details about the error.
                    ///   - param: The name of the parameter that caused the error, if applicable.
                    ///   - line: The line number of the input file where the error occurred, if applicable.
                    public init(
                        code: Swift.String? = nil,
                        message: Swift.String? = nil,
                        param: Swift.String? = nil,
                        line: Swift.Int? = nil
                    ) {
                        self.code = code
                        self.message = message
                        self.param = param
                        self.line = line
                    }
                    public enum CodingKeys: String, CodingKey {
                        case code
                        case message
                        case param
                        case line
                    }
                }
                /// - Remark: Generated from `#/components/schemas/Batch/errors/data`.
                public typealias dataPayload = [Components.Schemas.Batch.errorsPayload.dataPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/Batch/errors/data`.
                public var data: Components.Schemas.Batch.errorsPayload.dataPayload?
                /// Creates a new `errorsPayload`.
                ///
                /// - Parameters:
                ///   - object: The object type, which is always `list`.
                ///   - data:
                public init(
                    object: Swift.String? = nil,
                    data: Components.Schemas.Batch.errorsPayload.dataPayload? = nil
                ) {
                    self.object = object
                    self.data = data
                }
                public enum CodingKeys: String, CodingKey {
                    case object
                    case data
                }
            }
            /// - Remark: Generated from `#/components/schemas/Batch/errors`.
            public var errors: Components.Schemas.Batch.errorsPayload?
            /// The ID of the input file for the batch.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/input_file_id`.
            public var input_file_id: Swift.String
            /// The time frame within which the batch should be processed.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/completion_window`.
            public var completion_window: Swift.String
            /// The current status of the batch.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                case validating = "validating"
                case failed = "failed"
                case in_progress = "in_progress"
                case finalizing = "finalizing"
                case completed = "completed"
                case expired = "expired"
                case cancelling = "cancelling"
                case cancelled = "cancelled"
            }
            /// The current status of the batch.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/status`.
            public var status: Components.Schemas.Batch.statusPayload
            /// The ID of the file containing the outputs of successfully executed requests.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/output_file_id`.
            public var output_file_id: Swift.String?
            /// The ID of the file containing the outputs of requests with errors.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/error_file_id`.
            public var error_file_id: Swift.String?
            /// The Unix timestamp (in seconds) for when the batch was created.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/created_at`.
            public var created_at: Swift.Int
            /// The Unix timestamp (in seconds) for when the batch started processing.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/in_progress_at`.
            public var in_progress_at: Swift.Int?
            /// The Unix timestamp (in seconds) for when the batch will expire.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/expires_at`.
            public var expires_at: Swift.Int?
            /// The Unix timestamp (in seconds) for when the batch started finalizing.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/finalizing_at`.
            public var finalizing_at: Swift.Int?
            /// The Unix timestamp (in seconds) for when the batch was completed.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/completed_at`.
            public var completed_at: Swift.Int?
            /// The Unix timestamp (in seconds) for when the batch failed.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/failed_at`.
            public var failed_at: Swift.Int?
            /// The Unix timestamp (in seconds) for when the batch expired.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/expired_at`.
            public var expired_at: Swift.Int?
            /// The Unix timestamp (in seconds) for when the batch started cancelling.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/cancelling_at`.
            public var cancelling_at: Swift.Int?
            /// The Unix timestamp (in seconds) for when the batch was cancelled.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/cancelled_at`.
            public var cancelled_at: Swift.Int?
            /// The request counts for different statuses within the batch.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/request_counts`.
            public struct request_countsPayload: Codable, Hashable, Sendable {
                /// Total number of requests in the batch.
                ///
                /// - Remark: Generated from `#/components/schemas/Batch/request_counts/total`.
                public var total: Swift.Int
                /// Number of requests that have been completed successfully.
                ///
                /// - Remark: Generated from `#/components/schemas/Batch/request_counts/completed`.
                public var completed: Swift.Int
                /// Number of requests that have failed.
                ///
                /// - Remark: Generated from `#/components/schemas/Batch/request_counts/failed`.
                public var failed: Swift.Int
                /// Creates a new `request_countsPayload`.
                ///
                /// - Parameters:
                ///   - total: Total number of requests in the batch.
                ///   - completed: Number of requests that have been completed successfully.
                ///   - failed: Number of requests that have failed.
                public init(
                    total: Swift.Int,
                    completed: Swift.Int,
                    failed: Swift.Int
                ) {
                    self.total = total
                    self.completed = completed
                    self.failed = failed
                }
                public enum CodingKeys: String, CodingKey {
                    case total
                    case completed
                    case failed
                }
            }
            /// The request counts for different statuses within the batch.
            ///
            /// - Remark: Generated from `#/components/schemas/Batch/request_counts`.
            public var request_counts: Components.Schemas.Batch.request_countsPayload?
            /// - Remark: Generated from `#/components/schemas/Batch/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// Creates a new `Batch`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - object: The object type, which is always `batch`.
            ///   - endpoint: The OpenAI API endpoint used by the batch.
            ///   - errors:
            ///   - input_file_id: The ID of the input file for the batch.
            ///   - completion_window: The time frame within which the batch should be processed.
            ///   - status: The current status of the batch.
            ///   - output_file_id: The ID of the file containing the outputs of successfully executed requests.
            ///   - error_file_id: The ID of the file containing the outputs of requests with errors.
            ///   - created_at: The Unix timestamp (in seconds) for when the batch was created.
            ///   - in_progress_at: The Unix timestamp (in seconds) for when the batch started processing.
            ///   - expires_at: The Unix timestamp (in seconds) for when the batch will expire.
            ///   - finalizing_at: The Unix timestamp (in seconds) for when the batch started finalizing.
            ///   - completed_at: The Unix timestamp (in seconds) for when the batch was completed.
            ///   - failed_at: The Unix timestamp (in seconds) for when the batch failed.
            ///   - expired_at: The Unix timestamp (in seconds) for when the batch expired.
            ///   - cancelling_at: The Unix timestamp (in seconds) for when the batch started cancelling.
            ///   - cancelled_at: The Unix timestamp (in seconds) for when the batch was cancelled.
            ///   - request_counts: The request counts for different statuses within the batch.
            ///   - metadata:
            public init(
                id: Swift.String,
                object: Components.Schemas.Batch.objectPayload,
                endpoint: Swift.String,
                errors: Components.Schemas.Batch.errorsPayload? = nil,
                input_file_id: Swift.String,
                completion_window: Swift.String,
                status: Components.Schemas.Batch.statusPayload,
                output_file_id: Swift.String? = nil,
                error_file_id: Swift.String? = nil,
                created_at: Swift.Int,
                in_progress_at: Swift.Int? = nil,
                expires_at: Swift.Int? = nil,
                finalizing_at: Swift.Int? = nil,
                completed_at: Swift.Int? = nil,
                failed_at: Swift.Int? = nil,
                expired_at: Swift.Int? = nil,
                cancelling_at: Swift.Int? = nil,
                cancelled_at: Swift.Int? = nil,
                request_counts: Components.Schemas.Batch.request_countsPayload? = nil,
                metadata: Components.Schemas.Metadata? = nil
            ) {
                self.id = id
                self.object = object
                self.endpoint = endpoint
                self.errors = errors
                self.input_file_id = input_file_id
                self.completion_window = completion_window
                self.status = status
                self.output_file_id = output_file_id
                self.error_file_id = error_file_id
                self.created_at = created_at
                self.in_progress_at = in_progress_at
                self.expires_at = expires_at
                self.finalizing_at = finalizing_at
                self.completed_at = completed_at
                self.failed_at = failed_at
                self.expired_at = expired_at
                self.cancelling_at = cancelling_at
                self.cancelled_at = cancelled_at
                self.request_counts = request_counts
                self.metadata = metadata
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case object
                case endpoint
                case errors
                case input_file_id
                case completion_window
                case status
                case output_file_id
                case error_file_id
                case created_at
                case in_progress_at
                case expires_at
                case finalizing_at
                case completed_at
                case failed_at
                case expired_at
                case cancelling_at
                case cancelled_at
                case request_counts
                case metadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionDeleted`.
        public struct ChatCompletionDeleted: Codable, Hashable, Sendable {
            /// The type of object being deleted.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionDeleted/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case chat_period_completion_period_deleted = "chat.completion.deleted"
            }
            /// The type of object being deleted.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionDeleted/object`.
            public var object: Components.Schemas.ChatCompletionDeleted.objectPayload
            /// The ID of the chat completion that was deleted.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionDeleted/id`.
            public var id: Swift.String
            /// Whether the chat completion was deleted.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionDeleted/deleted`.
            public var deleted: Swift.Bool
            /// Creates a new `ChatCompletionDeleted`.
            ///
            /// - Parameters:
            ///   - object: The type of object being deleted.
            ///   - id: The ID of the chat completion that was deleted.
            ///   - deleted: Whether the chat completion was deleted.
            public init(
                object: Components.Schemas.ChatCompletionDeleted.objectPayload,
                id: Swift.String,
                deleted: Swift.Bool
            ) {
                self.object = object
                self.id = id
                self.deleted = deleted
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case id
                case deleted
            }
        }
        /// Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionFunctionCallOption`.
        public struct ChatCompletionFunctionCallOption: Codable, Hashable, Sendable {
            /// The name of the function to call.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionFunctionCallOption/name`.
            public var name: Swift.String
            /// Creates a new `ChatCompletionFunctionCallOption`.
            ///
            /// - Parameters:
            ///   - name: The name of the function to call.
            public init(name: Swift.String) {
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case name
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionFunctions`.
        @available(*, deprecated)
        public struct ChatCompletionFunctions: Codable, Hashable, Sendable {
            /// A description of what the function does, used by the model to choose when and how to call the function.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionFunctions/description`.
            public var description: Swift.String?
            /// The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionFunctions/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/ChatCompletionFunctions/parameters`.
            public var parameters: Components.Schemas.FunctionParameters?
            /// Creates a new `ChatCompletionFunctions`.
            ///
            /// - Parameters:
            ///   - description: A description of what the function does, used by the model to choose when and how to call the function.
            ///   - name: The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
            ///   - parameters:
            public init(
                description: Swift.String? = nil,
                name: Swift.String,
                parameters: Components.Schemas.FunctionParameters? = nil
            ) {
                self.description = description
                self.name = name
                self.parameters = parameters
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case name
                case parameters
            }
        }
        /// An object representing a list of Chat Completions.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionList`.
        public struct ChatCompletionList: Codable, Hashable, Sendable {
            /// The type of this object. It is always set to "list".
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionList/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case list = "list"
            }
            /// The type of this object. It is always set to "list".
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionList/object`.
            public var object: Components.Schemas.ChatCompletionList.objectPayload
            /// An array of chat completion objects.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionList/data`.
            public var data: [Components.Schemas.CreateChatCompletionResponse]
            /// The identifier of the first chat completion in the data array.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionList/first_id`.
            public var first_id: Swift.String
            /// The identifier of the last chat completion in the data array.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionList/last_id`.
            public var last_id: Swift.String
            /// Indicates whether there are more Chat Completions available.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionList/has_more`.
            public var has_more: Swift.Bool
            /// Creates a new `ChatCompletionList`.
            ///
            /// - Parameters:
            ///   - object: The type of this object. It is always set to "list".
            ///   - data: An array of chat completion objects.
            ///   - first_id: The identifier of the first chat completion in the data array.
            ///   - last_id: The identifier of the last chat completion in the data array.
            ///   - has_more: Indicates whether there are more Chat Completions available.
            public init(
                object: Components.Schemas.ChatCompletionList.objectPayload,
                data: [Components.Schemas.CreateChatCompletionResponse],
                first_id: Swift.String,
                last_id: Swift.String,
                has_more: Swift.Bool
            ) {
                self.object = object
                self.data = data
                self.first_id = first_id
                self.last_id = last_id
                self.has_more = has_more
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
                case first_id
                case last_id
                case has_more
            }
        }
        /// An object representing a list of chat completion messages.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageList`.
        public struct ChatCompletionMessageList: Codable, Hashable, Sendable {
            /// The type of this object. It is always set to "list".
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageList/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case list = "list"
            }
            /// The type of this object. It is always set to "list".
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageList/object`.
            public var object: Components.Schemas.ChatCompletionMessageList.objectPayload
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageList/dataPayload`.
            public struct dataPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageList/dataPayload/value1`.
                public var value1: Components.Schemas.ChatCompletionResponseMessage
                /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageList/dataPayload/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// The identifier of the chat message.
                    ///
                    /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageList/dataPayload/value2/id`.
                    public var id: Swift.String
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - id: The identifier of the chat message.
                    public init(id: Swift.String) {
                        self.id = id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageList/dataPayload/value2`.
                public var value2: Components.Schemas.ChatCompletionMessageList.dataPayloadPayload.Value2Payload
                /// Creates a new `dataPayloadPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.ChatCompletionResponseMessage,
                    value2: Components.Schemas.ChatCompletionMessageList.dataPayloadPayload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// An array of chat completion message objects.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageList/data`.
            public typealias dataPayload = [Components.Schemas.ChatCompletionMessageList.dataPayloadPayload]
            /// An array of chat completion message objects.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageList/data`.
            public var data: Components.Schemas.ChatCompletionMessageList.dataPayload
            /// The identifier of the first chat message in the data array.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageList/first_id`.
            public var first_id: Swift.String
            /// The identifier of the last chat message in the data array.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageList/last_id`.
            public var last_id: Swift.String
            /// Indicates whether there are more chat messages available.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageList/has_more`.
            public var has_more: Swift.Bool
            /// Creates a new `ChatCompletionMessageList`.
            ///
            /// - Parameters:
            ///   - object: The type of this object. It is always set to "list".
            ///   - data: An array of chat completion message objects.
            ///   - first_id: The identifier of the first chat message in the data array.
            ///   - last_id: The identifier of the last chat message in the data array.
            ///   - has_more: Indicates whether there are more chat messages available.
            public init(
                object: Components.Schemas.ChatCompletionMessageList.objectPayload,
                data: Components.Schemas.ChatCompletionMessageList.dataPayload,
                first_id: Swift.String,
                last_id: Swift.String,
                has_more: Swift.Bool
            ) {
                self.object = object
                self.data = data
                self.first_id = first_id
                self.last_id = last_id
                self.has_more = has_more
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
                case first_id
                case last_id
                case has_more
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCall`.
        public struct ChatCompletionMessageToolCall: Codable, Hashable, Sendable {
            /// The ID of the tool call.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCall/id`.
            public var id: Swift.String
            /// The type of the tool. Currently, only `function` is supported.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCall/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case function = "function"
            }
            /// The type of the tool. Currently, only `function` is supported.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCall/type`.
            public var _type: Components.Schemas.ChatCompletionMessageToolCall._typePayload
            /// The function that the model called.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCall/function`.
            public struct functionPayload: Codable, Hashable, Sendable {
                /// The name of the function to call.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCall/function/name`.
                public var name: Swift.String
                /// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCall/function/arguments`.
                public var arguments: Swift.String
                /// Creates a new `functionPayload`.
                ///
                /// - Parameters:
                ///   - name: The name of the function to call.
                ///   - arguments: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                public init(
                    name: Swift.String,
                    arguments: Swift.String
                ) {
                    self.name = name
                    self.arguments = arguments
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case arguments
                }
            }
            /// The function that the model called.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCall/function`.
            public var function: Components.Schemas.ChatCompletionMessageToolCall.functionPayload
            /// Creates a new `ChatCompletionMessageToolCall`.
            ///
            /// - Parameters:
            ///   - id: The ID of the tool call.
            ///   - _type: The type of the tool. Currently, only `function` is supported.
            ///   - function: The function that the model called.
            public init(
                id: Swift.String,
                _type: Components.Schemas.ChatCompletionMessageToolCall._typePayload,
                function: Components.Schemas.ChatCompletionMessageToolCall.functionPayload
            ) {
                self.id = id
                self._type = _type
                self.function = function
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case _type = "type"
                case function
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCallChunk`.
        public struct ChatCompletionMessageToolCallChunk: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCallChunk/index`.
            public var index: Swift.Int
            /// The ID of the tool call.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCallChunk/id`.
            public var id: Swift.String?
            /// The type of the tool. Currently, only `function` is supported.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCallChunk/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case function = "function"
            }
            /// The type of the tool. Currently, only `function` is supported.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCallChunk/type`.
            public var _type: Components.Schemas.ChatCompletionMessageToolCallChunk._typePayload?
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCallChunk/function`.
            public struct functionPayload: Codable, Hashable, Sendable {
                /// The name of the function to call.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCallChunk/function/name`.
                public var name: Swift.String?
                /// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCallChunk/function/arguments`.
                public var arguments: Swift.String?
                /// Creates a new `functionPayload`.
                ///
                /// - Parameters:
                ///   - name: The name of the function to call.
                ///   - arguments: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                public init(
                    name: Swift.String? = nil,
                    arguments: Swift.String? = nil
                ) {
                    self.name = name
                    self.arguments = arguments
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case arguments
                }
            }
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCallChunk/function`.
            public var function: Components.Schemas.ChatCompletionMessageToolCallChunk.functionPayload?
            /// Creates a new `ChatCompletionMessageToolCallChunk`.
            ///
            /// - Parameters:
            ///   - index:
            ///   - id: The ID of the tool call.
            ///   - _type: The type of the tool. Currently, only `function` is supported.
            ///   - function:
            public init(
                index: Swift.Int,
                id: Swift.String? = nil,
                _type: Components.Schemas.ChatCompletionMessageToolCallChunk._typePayload? = nil,
                function: Components.Schemas.ChatCompletionMessageToolCallChunk.functionPayload? = nil
            ) {
                self.index = index
                self.id = id
                self._type = _type
                self.function = function
            }
            public enum CodingKeys: String, CodingKey {
                case index
                case id
                case _type = "type"
                case function
            }
        }
        /// The tool calls generated by the model, such as function calls.
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCalls`.
        public typealias ChatCompletionMessageToolCalls = [Components.Schemas.ChatCompletionMessageToolCall]
        /// Specifies a tool the model should use. Use to force the model to call a specific function.
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionNamedToolChoice`.
        public struct ChatCompletionNamedToolChoice: Codable, Hashable, Sendable {
            /// The type of the tool. Currently, only `function` is supported.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionNamedToolChoice/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case function = "function"
            }
            /// The type of the tool. Currently, only `function` is supported.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionNamedToolChoice/type`.
            public var _type: Components.Schemas.ChatCompletionNamedToolChoice._typePayload
            /// - Remark: Generated from `#/components/schemas/ChatCompletionNamedToolChoice/function`.
            public struct functionPayload: Codable, Hashable, Sendable {
                /// The name of the function to call.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionNamedToolChoice/function/name`.
                public var name: Swift.String
                /// Creates a new `functionPayload`.
                ///
                /// - Parameters:
                ///   - name: The name of the function to call.
                public init(name: Swift.String) {
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                }
            }
            /// - Remark: Generated from `#/components/schemas/ChatCompletionNamedToolChoice/function`.
            public var function: Components.Schemas.ChatCompletionNamedToolChoice.functionPayload
            /// Creates a new `ChatCompletionNamedToolChoice`.
            ///
            /// - Parameters:
            ///   - _type: The type of the tool. Currently, only `function` is supported.
            ///   - function:
            public init(
                _type: Components.Schemas.ChatCompletionNamedToolChoice._typePayload,
                function: Components.Schemas.ChatCompletionNamedToolChoice.functionPayload
            ) {
                self._type = _type
                self.function = function
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case function
            }
        }
        /// Messages sent by the model in response to user messages.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage`.
        public struct ChatCompletionRequestAssistantMessage: Codable, Hashable, Sendable {
            /// The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/content`.
            @frozen public enum contentPayload: Codable, Hashable, Sendable {
                /// The contents of the assistant message.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/content/case1`.
                case case1(Swift.String)
                /// An array of content parts with a defined type. Can be one or more of type `text`, or exactly one of type `refusal`.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/content/case2`.
                case case2([Components.Schemas.ChatCompletionRequestAssistantMessageContentPart])
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/content`.
            public var content: Components.Schemas.ChatCompletionRequestAssistantMessage.contentPayload?
            /// The refusal message by the assistant.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/refusal`.
            public var refusal: Swift.String?
            /// The role of the messages author, in this case `assistant`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/role`.
            @frozen public enum rolePayload: String, Codable, Hashable, Sendable {
                case assistant = "assistant"
            }
            /// The role of the messages author, in this case `assistant`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/role`.
            public var role: Components.Schemas.ChatCompletionRequestAssistantMessage.rolePayload
            /// An optional name for the participant. Provides the model information to differentiate between participants of the same role.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/name`.
            public var name: Swift.String?
            /// Data about a previous audio response from the model. 
            /// [Learn more](/docs/guides/audio).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/audio`.
            public struct audioPayload: Codable, Hashable, Sendable {
                /// Unique identifier for a previous audio response from the model.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/audio/id`.
                public var id: Swift.String
                /// Creates a new `audioPayload`.
                ///
                /// - Parameters:
                ///   - id: Unique identifier for a previous audio response from the model.
                public init(id: Swift.String) {
                    self.id = id
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                }
            }
            /// Data about a previous audio response from the model. 
            /// [Learn more](/docs/guides/audio).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/audio`.
            public var audio: Components.Schemas.ChatCompletionRequestAssistantMessage.audioPayload?
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/tool_calls`.
            public var tool_calls: Components.Schemas.ChatCompletionMessageToolCalls?
            /// Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/function_call`.
            @available(*, deprecated)
            public struct function_callPayload: Codable, Hashable, Sendable {
                /// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/function_call/arguments`.
                public var arguments: Swift.String
                /// The name of the function to call.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/function_call/name`.
                public var name: Swift.String
                /// Creates a new `function_callPayload`.
                ///
                /// - Parameters:
                ///   - arguments: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                ///   - name: The name of the function to call.
                public init(
                    arguments: Swift.String,
                    name: Swift.String
                ) {
                    self.arguments = arguments
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case arguments
                    case name
                }
            }
            /// Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/function_call`.
            @available(*, deprecated)
            public var function_call: Components.Schemas.ChatCompletionRequestAssistantMessage.function_callPayload?
            /// Creates a new `ChatCompletionRequestAssistantMessage`.
            ///
            /// - Parameters:
            ///   - content: The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
            ///   - refusal: The refusal message by the assistant.
            ///   - role: The role of the messages author, in this case `assistant`.
            ///   - name: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
            ///   - audio: Data about a previous audio response from the model. 
            ///   - tool_calls:
            ///   - function_call: Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
            public init(
                content: Components.Schemas.ChatCompletionRequestAssistantMessage.contentPayload? = nil,
                refusal: Swift.String? = nil,
                role: Components.Schemas.ChatCompletionRequestAssistantMessage.rolePayload,
                name: Swift.String? = nil,
                audio: Components.Schemas.ChatCompletionRequestAssistantMessage.audioPayload? = nil,
                tool_calls: Components.Schemas.ChatCompletionMessageToolCalls? = nil,
                function_call: Components.Schemas.ChatCompletionRequestAssistantMessage.function_callPayload? = nil
            ) {
                self.content = content
                self.refusal = refusal
                self.role = role
                self.name = name
                self.audio = audio
                self.tool_calls = tool_calls
                self.function_call = function_call
            }
            public enum CodingKeys: String, CodingKey {
                case content
                case refusal
                case role
                case name
                case audio
                case tool_calls
                case function_call
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessageContentPart`.
        @frozen public enum ChatCompletionRequestAssistantMessageContentPart: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessageContentPart/case1`.
            case ChatCompletionRequestMessageContentPartText(Components.Schemas.ChatCompletionRequestMessageContentPartText)
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessageContentPart/case2`.
            case ChatCompletionRequestMessageContentPartRefusal(Components.Schemas.ChatCompletionRequestMessageContentPartRefusal)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .ChatCompletionRequestMessageContentPartText(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ChatCompletionRequestMessageContentPartRefusal(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .ChatCompletionRequestMessageContentPartText(value):
                    try value.encode(to: encoder)
                case let .ChatCompletionRequestMessageContentPartRefusal(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Developer-provided instructions that the model should follow, regardless of
        /// messages sent by the user. With o1 models and newer, `developer` messages
        /// replace the previous `system` messages.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestDeveloperMessage`.
        public struct ChatCompletionRequestDeveloperMessage: Codable, Hashable, Sendable {
            /// The contents of the developer message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestDeveloperMessage/content`.
            @frozen public enum contentPayload: Codable, Hashable, Sendable {
                /// The contents of the developer message.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestDeveloperMessage/content/case1`.
                case case1(Swift.String)
                /// An array of content parts with a defined type. For developer messages, only type `text` is supported.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestDeveloperMessage/content/case2`.
                case case2([Components.Schemas.ChatCompletionRequestMessageContentPartText])
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// The contents of the developer message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestDeveloperMessage/content`.
            public var content: Components.Schemas.ChatCompletionRequestDeveloperMessage.contentPayload
            /// The role of the messages author, in this case `developer`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestDeveloperMessage/role`.
            @frozen public enum rolePayload: String, Codable, Hashable, Sendable {
                case developer = "developer"
            }
            /// The role of the messages author, in this case `developer`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestDeveloperMessage/role`.
            public var role: Components.Schemas.ChatCompletionRequestDeveloperMessage.rolePayload
            /// An optional name for the participant. Provides the model information to differentiate between participants of the same role.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestDeveloperMessage/name`.
            public var name: Swift.String?
            /// Creates a new `ChatCompletionRequestDeveloperMessage`.
            ///
            /// - Parameters:
            ///   - content: The contents of the developer message.
            ///   - role: The role of the messages author, in this case `developer`.
            ///   - name: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
            public init(
                content: Components.Schemas.ChatCompletionRequestDeveloperMessage.contentPayload,
                role: Components.Schemas.ChatCompletionRequestDeveloperMessage.rolePayload,
                name: Swift.String? = nil
            ) {
                self.content = content
                self.role = role
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case content
                case role
                case name
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestFunctionMessage`.
        @available(*, deprecated)
        public struct ChatCompletionRequestFunctionMessage: Codable, Hashable, Sendable {
            /// The role of the messages author, in this case `function`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestFunctionMessage/role`.
            @frozen public enum rolePayload: String, Codable, Hashable, Sendable {
                case function = "function"
            }
            /// The role of the messages author, in this case `function`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestFunctionMessage/role`.
            public var role: Components.Schemas.ChatCompletionRequestFunctionMessage.rolePayload
            /// The contents of the function message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestFunctionMessage/content`.
            public var content: Swift.String?
            /// The name of the function to call.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestFunctionMessage/name`.
            public var name: Swift.String
            /// Creates a new `ChatCompletionRequestFunctionMessage`.
            ///
            /// - Parameters:
            ///   - role: The role of the messages author, in this case `function`.
            ///   - content: The contents of the function message.
            ///   - name: The name of the function to call.
            public init(
                role: Components.Schemas.ChatCompletionRequestFunctionMessage.rolePayload,
                content: Swift.String? = nil,
                name: Swift.String
            ) {
                self.role = role
                self.content = content
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case role
                case content
                case name
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessage`.
        @frozen public enum ChatCompletionRequestMessage: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessage/case1`.
            case ChatCompletionRequestDeveloperMessage(Components.Schemas.ChatCompletionRequestDeveloperMessage)
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessage/case2`.
            case ChatCompletionRequestSystemMessage(Components.Schemas.ChatCompletionRequestSystemMessage)
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessage/case3`.
            case ChatCompletionRequestUserMessage(Components.Schemas.ChatCompletionRequestUserMessage)
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessage/case4`.
            case ChatCompletionRequestAssistantMessage(Components.Schemas.ChatCompletionRequestAssistantMessage)
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessage/case5`.
            case ChatCompletionRequestToolMessage(Components.Schemas.ChatCompletionRequestToolMessage)
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessage/case6`.
            case ChatCompletionRequestFunctionMessage(Components.Schemas.ChatCompletionRequestFunctionMessage)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .ChatCompletionRequestDeveloperMessage(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ChatCompletionRequestSystemMessage(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ChatCompletionRequestUserMessage(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ChatCompletionRequestAssistantMessage(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ChatCompletionRequestToolMessage(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ChatCompletionRequestFunctionMessage(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .ChatCompletionRequestDeveloperMessage(value):
                    try value.encode(to: encoder)
                case let .ChatCompletionRequestSystemMessage(value):
                    try value.encode(to: encoder)
                case let .ChatCompletionRequestUserMessage(value):
                    try value.encode(to: encoder)
                case let .ChatCompletionRequestAssistantMessage(value):
                    try value.encode(to: encoder)
                case let .ChatCompletionRequestToolMessage(value):
                    try value.encode(to: encoder)
                case let .ChatCompletionRequestFunctionMessage(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Learn about [audio inputs](/docs/guides/audio).
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartAudio`.
        public struct ChatCompletionRequestMessageContentPartAudio: Codable, Hashable, Sendable {
            /// The type of the content part. Always `input_audio`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartAudio/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case input_audio = "input_audio"
            }
            /// The type of the content part. Always `input_audio`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartAudio/type`.
            public var _type: Components.Schemas.ChatCompletionRequestMessageContentPartAudio._typePayload
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartAudio/input_audio`.
            public struct input_audioPayload: Codable, Hashable, Sendable {
                /// Base64 encoded audio data.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartAudio/input_audio/data`.
                public var data: Swift.String
                /// The format of the encoded audio data. Currently supports "wav" and "mp3".
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartAudio/input_audio/format`.
                @frozen public enum formatPayload: String, Codable, Hashable, Sendable {
                    case wav = "wav"
                    case mp3 = "mp3"
                }
                /// The format of the encoded audio data. Currently supports "wav" and "mp3".
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartAudio/input_audio/format`.
                public var format: Components.Schemas.ChatCompletionRequestMessageContentPartAudio.input_audioPayload.formatPayload
                /// Creates a new `input_audioPayload`.
                ///
                /// - Parameters:
                ///   - data: Base64 encoded audio data.
                ///   - format: The format of the encoded audio data. Currently supports "wav" and "mp3".
                public init(
                    data: Swift.String,
                    format: Components.Schemas.ChatCompletionRequestMessageContentPartAudio.input_audioPayload.formatPayload
                ) {
                    self.data = data
                    self.format = format
                }
                public enum CodingKeys: String, CodingKey {
                    case data
                    case format
                }
            }
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartAudio/input_audio`.
            public var input_audio: Components.Schemas.ChatCompletionRequestMessageContentPartAudio.input_audioPayload
            /// Creates a new `ChatCompletionRequestMessageContentPartAudio`.
            ///
            /// - Parameters:
            ///   - _type: The type of the content part. Always `input_audio`.
            ///   - input_audio:
            public init(
                _type: Components.Schemas.ChatCompletionRequestMessageContentPartAudio._typePayload,
                input_audio: Components.Schemas.ChatCompletionRequestMessageContentPartAudio.input_audioPayload
            ) {
                self._type = _type
                self.input_audio = input_audio
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case input_audio
            }
        }
        /// Learn about [file inputs](/docs/guides/text) for text generation.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartFile`.
        public struct ChatCompletionRequestMessageContentPartFile: Codable, Hashable, Sendable {
            /// The type of the content part. Always `file`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartFile/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case file = "file"
            }
            /// The type of the content part. Always `file`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartFile/type`.
            public var _type: Components.Schemas.ChatCompletionRequestMessageContentPartFile._typePayload
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartFile/file`.
            public struct filePayload: Codable, Hashable, Sendable {
                /// The name of the file, used when passing the file to the model as a 
                /// string.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartFile/file/filename`.
                public var filename: Swift.String?
                /// The base64 encoded file data, used when passing the file to the model 
                /// as a string.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartFile/file/file_data`.
                public var file_data: Swift.String?
                /// The ID of an uploaded file to use as input.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartFile/file/file_id`.
                public var file_id: Swift.String?
                /// Creates a new `filePayload`.
                ///
                /// - Parameters:
                ///   - filename: The name of the file, used when passing the file to the model as a 
                ///   - file_data: The base64 encoded file data, used when passing the file to the model 
                ///   - file_id: The ID of an uploaded file to use as input.
                public init(
                    filename: Swift.String? = nil,
                    file_data: Swift.String? = nil,
                    file_id: Swift.String? = nil
                ) {
                    self.filename = filename
                    self.file_data = file_data
                    self.file_id = file_id
                }
                public enum CodingKeys: String, CodingKey {
                    case filename
                    case file_data
                    case file_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartFile/file`.
            public var file: Components.Schemas.ChatCompletionRequestMessageContentPartFile.filePayload
            /// Creates a new `ChatCompletionRequestMessageContentPartFile`.
            ///
            /// - Parameters:
            ///   - _type: The type of the content part. Always `file`.
            ///   - file:
            public init(
                _type: Components.Schemas.ChatCompletionRequestMessageContentPartFile._typePayload,
                file: Components.Schemas.ChatCompletionRequestMessageContentPartFile.filePayload
            ) {
                self._type = _type
                self.file = file
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case file
            }
        }
        /// Learn about [image inputs](/docs/guides/vision).
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartImage`.
        public struct ChatCompletionRequestMessageContentPartImage: Codable, Hashable, Sendable {
            /// The type of the content part.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartImage/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case image_url = "image_url"
            }
            /// The type of the content part.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartImage/type`.
            public var _type: Components.Schemas.ChatCompletionRequestMessageContentPartImage._typePayload
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartImage/image_url`.
            public struct image_urlPayload: Codable, Hashable, Sendable {
                /// Either a URL of the image or the base64 encoded image data.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartImage/image_url/url`.
                public var url: Swift.String
                /// Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision#low-or-high-fidelity-image-understanding).
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartImage/image_url/detail`.
                @frozen public enum detailPayload: String, Codable, Hashable, Sendable {
                    case auto = "auto"
                    case low = "low"
                    case high = "high"
                }
                /// Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision#low-or-high-fidelity-image-understanding).
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartImage/image_url/detail`.
                public var detail: Components.Schemas.ChatCompletionRequestMessageContentPartImage.image_urlPayload.detailPayload?
                /// Creates a new `image_urlPayload`.
                ///
                /// - Parameters:
                ///   - url: Either a URL of the image or the base64 encoded image data.
                ///   - detail: Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision#low-or-high-fidelity-image-understanding).
                public init(
                    url: Swift.String,
                    detail: Components.Schemas.ChatCompletionRequestMessageContentPartImage.image_urlPayload.detailPayload? = nil
                ) {
                    self.url = url
                    self.detail = detail
                }
                public enum CodingKeys: String, CodingKey {
                    case url
                    case detail
                }
            }
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartImage/image_url`.
            public var image_url: Components.Schemas.ChatCompletionRequestMessageContentPartImage.image_urlPayload
            /// Creates a new `ChatCompletionRequestMessageContentPartImage`.
            ///
            /// - Parameters:
            ///   - _type: The type of the content part.
            ///   - image_url:
            public init(
                _type: Components.Schemas.ChatCompletionRequestMessageContentPartImage._typePayload,
                image_url: Components.Schemas.ChatCompletionRequestMessageContentPartImage.image_urlPayload
            ) {
                self._type = _type
                self.image_url = image_url
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case image_url
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartRefusal`.
        public struct ChatCompletionRequestMessageContentPartRefusal: Codable, Hashable, Sendable {
            /// The type of the content part.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartRefusal/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case refusal = "refusal"
            }
            /// The type of the content part.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartRefusal/type`.
            public var _type: Components.Schemas.ChatCompletionRequestMessageContentPartRefusal._typePayload
            /// The refusal message generated by the model.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartRefusal/refusal`.
            public var refusal: Swift.String
            /// Creates a new `ChatCompletionRequestMessageContentPartRefusal`.
            ///
            /// - Parameters:
            ///   - _type: The type of the content part.
            ///   - refusal: The refusal message generated by the model.
            public init(
                _type: Components.Schemas.ChatCompletionRequestMessageContentPartRefusal._typePayload,
                refusal: Swift.String
            ) {
                self._type = _type
                self.refusal = refusal
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case refusal
            }
        }
        /// Learn about [text inputs](/docs/guides/text-generation).
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartText`.
        public struct ChatCompletionRequestMessageContentPartText: Codable, Hashable, Sendable {
            /// The type of the content part.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartText/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case text = "text"
            }
            /// The type of the content part.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartText/type`.
            public var _type: Components.Schemas.ChatCompletionRequestMessageContentPartText._typePayload
            /// The text content.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartText/text`.
            public var text: Swift.String
            /// Creates a new `ChatCompletionRequestMessageContentPartText`.
            ///
            /// - Parameters:
            ///   - _type: The type of the content part.
            ///   - text: The text content.
            public init(
                _type: Components.Schemas.ChatCompletionRequestMessageContentPartText._typePayload,
                text: Swift.String
            ) {
                self._type = _type
                self.text = text
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case text
            }
        }
        /// Developer-provided instructions that the model should follow, regardless of
        /// messages sent by the user. With o1 models and newer, use `developer` messages
        /// for this purpose instead.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestSystemMessage`.
        public struct ChatCompletionRequestSystemMessage: Codable, Hashable, Sendable {
            /// The contents of the system message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestSystemMessage/content`.
            @frozen public enum contentPayload: Codable, Hashable, Sendable {
                /// The contents of the system message.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestSystemMessage/content/case1`.
                case case1(Swift.String)
                /// An array of content parts with a defined type. For system messages, only type `text` is supported.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestSystemMessage/content/case2`.
                case case2([Components.Schemas.ChatCompletionRequestSystemMessageContentPart])
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// The contents of the system message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestSystemMessage/content`.
            public var content: Components.Schemas.ChatCompletionRequestSystemMessage.contentPayload
            /// The role of the messages author, in this case `system`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestSystemMessage/role`.
            @frozen public enum rolePayload: String, Codable, Hashable, Sendable {
                case system = "system"
            }
            /// The role of the messages author, in this case `system`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestSystemMessage/role`.
            public var role: Components.Schemas.ChatCompletionRequestSystemMessage.rolePayload
            /// An optional name for the participant. Provides the model information to differentiate between participants of the same role.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestSystemMessage/name`.
            public var name: Swift.String?
            /// Creates a new `ChatCompletionRequestSystemMessage`.
            ///
            /// - Parameters:
            ///   - content: The contents of the system message.
            ///   - role: The role of the messages author, in this case `system`.
            ///   - name: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
            public init(
                content: Components.Schemas.ChatCompletionRequestSystemMessage.contentPayload,
                role: Components.Schemas.ChatCompletionRequestSystemMessage.rolePayload,
                name: Swift.String? = nil
            ) {
                self.content = content
                self.role = role
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case content
                case role
                case name
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestSystemMessageContentPart`.
        @frozen public enum ChatCompletionRequestSystemMessageContentPart: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestSystemMessageContentPart/case1`.
            case ChatCompletionRequestMessageContentPartText(Components.Schemas.ChatCompletionRequestMessageContentPartText)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .ChatCompletionRequestMessageContentPartText(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .ChatCompletionRequestMessageContentPartText(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestToolMessage`.
        public struct ChatCompletionRequestToolMessage: Codable, Hashable, Sendable {
            /// The role of the messages author, in this case `tool`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestToolMessage/role`.
            @frozen public enum rolePayload: String, Codable, Hashable, Sendable {
                case tool = "tool"
            }
            /// The role of the messages author, in this case `tool`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestToolMessage/role`.
            public var role: Components.Schemas.ChatCompletionRequestToolMessage.rolePayload
            /// The contents of the tool message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestToolMessage/content`.
            @frozen public enum contentPayload: Codable, Hashable, Sendable {
                /// The contents of the tool message.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestToolMessage/content/case1`.
                case case1(Swift.String)
                /// An array of content parts with a defined type. For tool messages, only type `text` is supported.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestToolMessage/content/case2`.
                case case2([Components.Schemas.ChatCompletionRequestToolMessageContentPart])
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// The contents of the tool message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestToolMessage/content`.
            public var content: Components.Schemas.ChatCompletionRequestToolMessage.contentPayload
            /// Tool call that this message is responding to.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestToolMessage/tool_call_id`.
            public var tool_call_id: Swift.String
            /// Creates a new `ChatCompletionRequestToolMessage`.
            ///
            /// - Parameters:
            ///   - role: The role of the messages author, in this case `tool`.
            ///   - content: The contents of the tool message.
            ///   - tool_call_id: Tool call that this message is responding to.
            public init(
                role: Components.Schemas.ChatCompletionRequestToolMessage.rolePayload,
                content: Components.Schemas.ChatCompletionRequestToolMessage.contentPayload,
                tool_call_id: Swift.String
            ) {
                self.role = role
                self.content = content
                self.tool_call_id = tool_call_id
            }
            public enum CodingKeys: String, CodingKey {
                case role
                case content
                case tool_call_id
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestToolMessageContentPart`.
        @frozen public enum ChatCompletionRequestToolMessageContentPart: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestToolMessageContentPart/case1`.
            case ChatCompletionRequestMessageContentPartText(Components.Schemas.ChatCompletionRequestMessageContentPartText)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .ChatCompletionRequestMessageContentPartText(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .ChatCompletionRequestMessageContentPartText(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Messages sent by an end user, containing prompts or additional context
        /// information.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessage`.
        public struct ChatCompletionRequestUserMessage: Codable, Hashable, Sendable {
            /// The contents of the user message.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessage/content`.
            @frozen public enum contentPayload: Codable, Hashable, Sendable {
                /// The text contents of the message.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessage/content/case1`.
                case case1(Swift.String)
                /// An array of content parts with a defined type. Supported options differ based on the [model](/docs/models) being used to generate the response. Can contain text, image, or audio inputs.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessage/content/case2`.
                case case2([Components.Schemas.ChatCompletionRequestUserMessageContentPart])
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// The contents of the user message.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessage/content`.
            public var content: Components.Schemas.ChatCompletionRequestUserMessage.contentPayload
            /// The role of the messages author, in this case `user`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessage/role`.
            @frozen public enum rolePayload: String, Codable, Hashable, Sendable {
                case user = "user"
            }
            /// The role of the messages author, in this case `user`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessage/role`.
            public var role: Components.Schemas.ChatCompletionRequestUserMessage.rolePayload
            /// An optional name for the participant. Provides the model information to differentiate between participants of the same role.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessage/name`.
            public var name: Swift.String?
            /// Creates a new `ChatCompletionRequestUserMessage`.
            ///
            /// - Parameters:
            ///   - content: The contents of the user message.
            ///   - role: The role of the messages author, in this case `user`.
            ///   - name: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
            public init(
                content: Components.Schemas.ChatCompletionRequestUserMessage.contentPayload,
                role: Components.Schemas.ChatCompletionRequestUserMessage.rolePayload,
                name: Swift.String? = nil
            ) {
                self.content = content
                self.role = role
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case content
                case role
                case name
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessageContentPart`.
        @frozen public enum ChatCompletionRequestUserMessageContentPart: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessageContentPart/case1`.
            case ChatCompletionRequestMessageContentPartText(Components.Schemas.ChatCompletionRequestMessageContentPartText)
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessageContentPart/case2`.
            case ChatCompletionRequestMessageContentPartImage(Components.Schemas.ChatCompletionRequestMessageContentPartImage)
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessageContentPart/case3`.
            case ChatCompletionRequestMessageContentPartAudio(Components.Schemas.ChatCompletionRequestMessageContentPartAudio)
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessageContentPart/case4`.
            case ChatCompletionRequestMessageContentPartFile(Components.Schemas.ChatCompletionRequestMessageContentPartFile)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .ChatCompletionRequestMessageContentPartText(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ChatCompletionRequestMessageContentPartImage(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ChatCompletionRequestMessageContentPartAudio(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ChatCompletionRequestMessageContentPartFile(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .ChatCompletionRequestMessageContentPartText(value):
                    try value.encode(to: encoder)
                case let .ChatCompletionRequestMessageContentPartImage(value):
                    try value.encode(to: encoder)
                case let .ChatCompletionRequestMessageContentPartAudio(value):
                    try value.encode(to: encoder)
                case let .ChatCompletionRequestMessageContentPartFile(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// A chat completion message generated by the model.
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage`.
        public struct ChatCompletionResponseMessage: Codable, Hashable, Sendable {
            /// The contents of the message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/content`.
            public var content: Swift.String?
            /// The refusal message generated by the model.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/refusal`.
            public var refusal: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/tool_calls`.
            public var tool_calls: Components.Schemas.ChatCompletionMessageToolCalls?
            /// A URL citation when using web search.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/annotationsPayload`.
            public struct annotationsPayloadPayload: Codable, Hashable, Sendable {
                /// The type of the URL citation. Always `url_citation`.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/annotationsPayload/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                    case url_citation = "url_citation"
                }
                /// The type of the URL citation. Always `url_citation`.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/annotationsPayload/type`.
                public var _type: Components.Schemas.ChatCompletionResponseMessage.annotationsPayloadPayload._typePayload
                /// A URL citation when using web search.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/annotationsPayload/url_citation`.
                public struct url_citationPayload: Codable, Hashable, Sendable {
                    /// The index of the last character of the URL citation in the message.
                    ///
                    /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/annotationsPayload/url_citation/end_index`.
                    public var end_index: Swift.Int
                    /// The index of the first character of the URL citation in the message.
                    ///
                    /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/annotationsPayload/url_citation/start_index`.
                    public var start_index: Swift.Int
                    /// The URL of the web resource.
                    ///
                    /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/annotationsPayload/url_citation/url`.
                    public var url: Swift.String
                    /// The title of the web resource.
                    ///
                    /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/annotationsPayload/url_citation/title`.
                    public var title: Swift.String
                    /// Creates a new `url_citationPayload`.
                    ///
                    /// - Parameters:
                    ///   - end_index: The index of the last character of the URL citation in the message.
                    ///   - start_index: The index of the first character of the URL citation in the message.
                    ///   - url: The URL of the web resource.
                    ///   - title: The title of the web resource.
                    public init(
                        end_index: Swift.Int,
                        start_index: Swift.Int,
                        url: Swift.String,
                        title: Swift.String
                    ) {
                        self.end_index = end_index
                        self.start_index = start_index
                        self.url = url
                        self.title = title
                    }
                    public enum CodingKeys: String, CodingKey {
                        case end_index
                        case start_index
                        case url
                        case title
                    }
                }
                /// A URL citation when using web search.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/annotationsPayload/url_citation`.
                public var url_citation: Components.Schemas.ChatCompletionResponseMessage.annotationsPayloadPayload.url_citationPayload
                /// Creates a new `annotationsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - _type: The type of the URL citation. Always `url_citation`.
                ///   - url_citation: A URL citation when using web search.
                public init(
                    _type: Components.Schemas.ChatCompletionResponseMessage.annotationsPayloadPayload._typePayload,
                    url_citation: Components.Schemas.ChatCompletionResponseMessage.annotationsPayloadPayload.url_citationPayload
                ) {
                    self._type = _type
                    self.url_citation = url_citation
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case url_citation
                }
            }
            /// Annotations for the message, when applicable, as when using the
            /// [web search tool](/docs/guides/tools-web-search?api-mode=chat).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/annotations`.
            public typealias annotationsPayload = [Components.Schemas.ChatCompletionResponseMessage.annotationsPayloadPayload]
            /// Annotations for the message, when applicable, as when using the
            /// [web search tool](/docs/guides/tools-web-search?api-mode=chat).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/annotations`.
            public var annotations: Components.Schemas.ChatCompletionResponseMessage.annotationsPayload?
            /// The role of the author of this message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/role`.
            @frozen public enum rolePayload: String, Codable, Hashable, Sendable {
                case assistant = "assistant"
            }
            /// The role of the author of this message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/role`.
            public var role: Components.Schemas.ChatCompletionResponseMessage.rolePayload
            /// Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/function_call`.
            @available(*, deprecated)
            public struct function_callPayload: Codable, Hashable, Sendable {
                /// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/function_call/arguments`.
                public var arguments: Swift.String
                /// The name of the function to call.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/function_call/name`.
                public var name: Swift.String
                /// Creates a new `function_callPayload`.
                ///
                /// - Parameters:
                ///   - arguments: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                ///   - name: The name of the function to call.
                public init(
                    arguments: Swift.String,
                    name: Swift.String
                ) {
                    self.arguments = arguments
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case arguments
                    case name
                }
            }
            /// Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/function_call`.
            @available(*, deprecated)
            public var function_call: Components.Schemas.ChatCompletionResponseMessage.function_callPayload?
            /// If the audio output modality is requested, this object contains data
            /// about the audio response from the model. [Learn more](/docs/guides/audio).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/audio`.
            public struct audioPayload: Codable, Hashable, Sendable {
                /// Unique identifier for this audio response.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/audio/id`.
                public var id: Swift.String
                /// The Unix timestamp (in seconds) for when this audio response will
                /// no longer be accessible on the server for use in multi-turn
                /// conversations.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/audio/expires_at`.
                public var expires_at: Swift.Int
                /// Base64 encoded audio bytes generated by the model, in the format
                /// specified in the request.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/audio/data`.
                public var data: Swift.String
                /// Transcript of the audio generated by the model.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/audio/transcript`.
                public var transcript: Swift.String
                /// Creates a new `audioPayload`.
                ///
                /// - Parameters:
                ///   - id: Unique identifier for this audio response.
                ///   - expires_at: The Unix timestamp (in seconds) for when this audio response will
                ///   - data: Base64 encoded audio bytes generated by the model, in the format
                ///   - transcript: Transcript of the audio generated by the model.
                public init(
                    id: Swift.String,
                    expires_at: Swift.Int,
                    data: Swift.String,
                    transcript: Swift.String
                ) {
                    self.id = id
                    self.expires_at = expires_at
                    self.data = data
                    self.transcript = transcript
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case expires_at
                    case data
                    case transcript
                }
            }
            /// If the audio output modality is requested, this object contains data
            /// about the audio response from the model. [Learn more](/docs/guides/audio).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/audio`.
            public var audio: Components.Schemas.ChatCompletionResponseMessage.audioPayload?
            /// Creates a new `ChatCompletionResponseMessage`.
            ///
            /// - Parameters:
            ///   - content: The contents of the message.
            ///   - refusal: The refusal message generated by the model.
            ///   - tool_calls:
            ///   - annotations: Annotations for the message, when applicable, as when using the
            ///   - role: The role of the author of this message.
            ///   - function_call: Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
            ///   - audio: If the audio output modality is requested, this object contains data
            public init(
                content: Swift.String? = nil,
                refusal: Swift.String? = nil,
                tool_calls: Components.Schemas.ChatCompletionMessageToolCalls? = nil,
                annotations: Components.Schemas.ChatCompletionResponseMessage.annotationsPayload? = nil,
                role: Components.Schemas.ChatCompletionResponseMessage.rolePayload,
                function_call: Components.Schemas.ChatCompletionResponseMessage.function_callPayload? = nil,
                audio: Components.Schemas.ChatCompletionResponseMessage.audioPayload? = nil
            ) {
                self.content = content
                self.refusal = refusal
                self.tool_calls = tool_calls
                self.annotations = annotations
                self.role = role
                self.function_call = function_call
                self.audio = audio
            }
            public enum CodingKeys: String, CodingKey {
                case content
                case refusal
                case tool_calls
                case annotations
                case role
                case function_call
                case audio
            }
        }
        /// Options for streaming response. Only set this when you set `stream: true`.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionStreamOptions`.
        public struct ChatCompletionStreamOptions: Codable, Hashable, Sendable {
            /// If set, an additional chunk will be streamed before the `data: [DONE]`
            /// message. The `usage` field on this chunk shows the token usage statistics
            /// for the entire request, and the `choices` field will always be an empty
            /// array. 
            ///
            /// All other chunks will also include a `usage` field, but with a null
            /// value. **NOTE:** If the stream is interrupted, you may not receive the
            /// final usage chunk which contains the total token usage for the request.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionStreamOptions/include_usage`.
            public var include_usage: Swift.Bool?
            /// Creates a new `ChatCompletionStreamOptions`.
            ///
            /// - Parameters:
            ///   - include_usage: If set, an additional chunk will be streamed before the `data: [DONE]`
            public init(include_usage: Swift.Bool? = nil) {
                self.include_usage = include_usage
            }
            public enum CodingKeys: String, CodingKey {
                case include_usage
            }
        }
        /// A chat completion delta generated by streamed model responses.
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionStreamResponseDelta`.
        public struct ChatCompletionStreamResponseDelta: Codable, Hashable, Sendable {
            /// The contents of the chunk message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionStreamResponseDelta/content`.
            public var content: Swift.String?
            /// Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionStreamResponseDelta/function_call`.
            @available(*, deprecated)
            public struct function_callPayload: Codable, Hashable, Sendable {
                /// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionStreamResponseDelta/function_call/arguments`.
                public var arguments: Swift.String?
                /// The name of the function to call.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionStreamResponseDelta/function_call/name`.
                public var name: Swift.String?
                /// Creates a new `function_callPayload`.
                ///
                /// - Parameters:
                ///   - arguments: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                ///   - name: The name of the function to call.
                public init(
                    arguments: Swift.String? = nil,
                    name: Swift.String? = nil
                ) {
                    self.arguments = arguments
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case arguments
                    case name
                }
            }
            /// Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionStreamResponseDelta/function_call`.
            @available(*, deprecated)
            public var function_call: Components.Schemas.ChatCompletionStreamResponseDelta.function_callPayload?
            /// - Remark: Generated from `#/components/schemas/ChatCompletionStreamResponseDelta/tool_calls`.
            public var tool_calls: [Components.Schemas.ChatCompletionMessageToolCallChunk]?
            /// The role of the author of this message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionStreamResponseDelta/role`.
            @frozen public enum rolePayload: String, Codable, Hashable, Sendable {
                case developer = "developer"
                case system = "system"
                case user = "user"
                case assistant = "assistant"
                case tool = "tool"
            }
            /// The role of the author of this message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionStreamResponseDelta/role`.
            public var role: Components.Schemas.ChatCompletionStreamResponseDelta.rolePayload?
            /// The refusal message generated by the model.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionStreamResponseDelta/refusal`.
            public var refusal: Swift.String?
            /// Creates a new `ChatCompletionStreamResponseDelta`.
            ///
            /// - Parameters:
            ///   - content: The contents of the chunk message.
            ///   - function_call: Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
            ///   - tool_calls:
            ///   - role: The role of the author of this message.
            ///   - refusal: The refusal message generated by the model.
            public init(
                content: Swift.String? = nil,
                function_call: Components.Schemas.ChatCompletionStreamResponseDelta.function_callPayload? = nil,
                tool_calls: [Components.Schemas.ChatCompletionMessageToolCallChunk]? = nil,
                role: Components.Schemas.ChatCompletionStreamResponseDelta.rolePayload? = nil,
                refusal: Swift.String? = nil
            ) {
                self.content = content
                self.function_call = function_call
                self.tool_calls = tool_calls
                self.role = role
                self.refusal = refusal
            }
            public enum CodingKeys: String, CodingKey {
                case content
                case function_call
                case tool_calls
                case role
                case refusal
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionTokenLogprob`.
        public struct ChatCompletionTokenLogprob: Codable, Hashable, Sendable {
            /// The token.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionTokenLogprob/token`.
            public var token: Swift.String
            /// The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionTokenLogprob/logprob`.
            public var logprob: Swift.Double
            /// A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionTokenLogprob/bytes`.
            public var bytes: [Swift.Int]?
            /// - Remark: Generated from `#/components/schemas/ChatCompletionTokenLogprob/top_logprobsPayload`.
            public struct top_logprobsPayloadPayload: Codable, Hashable, Sendable {
                /// The token.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionTokenLogprob/top_logprobsPayload/token`.
                public var token: Swift.String
                /// The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionTokenLogprob/top_logprobsPayload/logprob`.
                public var logprob: Swift.Double
                /// A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionTokenLogprob/top_logprobsPayload/bytes`.
                public var bytes: [Swift.Int]?
                /// Creates a new `top_logprobsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - token: The token.
                ///   - logprob: The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
                ///   - bytes: A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
                public init(
                    token: Swift.String,
                    logprob: Swift.Double,
                    bytes: [Swift.Int]? = nil
                ) {
                    self.token = token
                    self.logprob = logprob
                    self.bytes = bytes
                }
                public enum CodingKeys: String, CodingKey {
                    case token
                    case logprob
                    case bytes
                }
            }
            /// List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionTokenLogprob/top_logprobs`.
            public typealias top_logprobsPayload = [Components.Schemas.ChatCompletionTokenLogprob.top_logprobsPayloadPayload]
            /// List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionTokenLogprob/top_logprobs`.
            public var top_logprobs: Components.Schemas.ChatCompletionTokenLogprob.top_logprobsPayload
            /// Creates a new `ChatCompletionTokenLogprob`.
            ///
            /// - Parameters:
            ///   - token: The token.
            ///   - logprob: The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
            ///   - bytes: A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
            ///   - top_logprobs: List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.
            public init(
                token: Swift.String,
                logprob: Swift.Double,
                bytes: [Swift.Int]? = nil,
                top_logprobs: Components.Schemas.ChatCompletionTokenLogprob.top_logprobsPayload
            ) {
                self.token = token
                self.logprob = logprob
                self.bytes = bytes
                self.top_logprobs = top_logprobs
            }
            public enum CodingKeys: String, CodingKey {
                case token
                case logprob
                case bytes
                case top_logprobs
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionTool`.
        public struct ChatCompletionTool: Codable, Hashable, Sendable {
            /// The type of the tool. Currently, only `function` is supported.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionTool/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case function = "function"
            }
            /// The type of the tool. Currently, only `function` is supported.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionTool/type`.
            public var _type: Components.Schemas.ChatCompletionTool._typePayload
            /// - Remark: Generated from `#/components/schemas/ChatCompletionTool/function`.
            public var function: Components.Schemas.FunctionObject
            /// Creates a new `ChatCompletionTool`.
            ///
            /// - Parameters:
            ///   - _type: The type of the tool. Currently, only `function` is supported.
            ///   - function:
            public init(
                _type: Components.Schemas.ChatCompletionTool._typePayload,
                function: Components.Schemas.FunctionObject
            ) {
                self._type = _type
                self.function = function
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case function
            }
        }
        /// Controls which (if any) tool is called by the model.
        /// `none` means the model will not call any tool and instead generates a message.
        /// `auto` means the model can pick between generating a message or calling one or more tools.
        /// `required` means the model must call one or more tools.
        /// Specifying a particular tool via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
        ///
        /// `none` is the default when no tools are present. `auto` is the default if tools are present.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionToolChoiceOption`.
        @frozen public enum ChatCompletionToolChoiceOption: Codable, Hashable, Sendable {
            /// `none` means the model will not call any tool and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionToolChoiceOption/case1`.
            @frozen public enum Case1Payload: String, Codable, Hashable, Sendable {
                case none = "none"
                case auto = "auto"
                case required = "required"
            }
            /// `none` means the model will not call any tool and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionToolChoiceOption/case1`.
            case case1(Components.Schemas.ChatCompletionToolChoiceOption.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/ChatCompletionToolChoiceOption/case2`.
            case ChatCompletionNamedToolChoice(Components.Schemas.ChatCompletionNamedToolChoice)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ChatCompletionNamedToolChoice(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .ChatCompletionNamedToolChoice(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/CompleteUploadRequest`.
        public struct CompleteUploadRequest: Codable, Hashable, Sendable {
            /// The ordered list of Part IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CompleteUploadRequest/part_ids`.
            public var part_ids: [Swift.String]
            /// The optional md5 checksum for the file contents to verify if the bytes uploaded matches what you expect.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CompleteUploadRequest/md5`.
            public var md5: Swift.String?
            /// Creates a new `CompleteUploadRequest`.
            ///
            /// - Parameters:
            ///   - part_ids: The ordered list of Part IDs.
            ///   - md5: The optional md5 checksum for the file contents to verify if the bytes uploaded matches what you expect.
            public init(
                part_ids: [Swift.String],
                md5: Swift.String? = nil
            ) {
                self.part_ids = part_ids
                self.md5 = md5
            }
            public enum CodingKeys: String, CodingKey {
                case part_ids
                case md5
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                part_ids = try container.decode(
                    [Swift.String].self,
                    forKey: .part_ids
                )
                md5 = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .md5
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "part_ids",
                    "md5"
                ])
            }
        }
        /// Usage statistics for the completion request.
        ///
        /// - Remark: Generated from `#/components/schemas/CompletionUsage`.
        public struct CompletionUsage: Codable, Hashable, Sendable {
            /// Number of tokens in the generated completion.
            ///
            /// - Remark: Generated from `#/components/schemas/CompletionUsage/completion_tokens`.
            public var completion_tokens: Swift.Int
            /// Number of tokens in the prompt.
            ///
            /// - Remark: Generated from `#/components/schemas/CompletionUsage/prompt_tokens`.
            public var prompt_tokens: Swift.Int
            /// Total number of tokens used in the request (prompt + completion).
            ///
            /// - Remark: Generated from `#/components/schemas/CompletionUsage/total_tokens`.
            public var total_tokens: Swift.Int
            /// Breakdown of tokens used in a completion.
            ///
            /// - Remark: Generated from `#/components/schemas/CompletionUsage/completion_tokens_details`.
            public struct completion_tokens_detailsPayload: Codable, Hashable, Sendable {
                /// When using Predicted Outputs, the number of tokens in the
                /// prediction that appeared in the completion.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CompletionUsage/completion_tokens_details/accepted_prediction_tokens`.
                public var accepted_prediction_tokens: Swift.Int?
                /// Audio input tokens generated by the model.
                ///
                /// - Remark: Generated from `#/components/schemas/CompletionUsage/completion_tokens_details/audio_tokens`.
                public var audio_tokens: Swift.Int?
                /// Tokens generated by the model for reasoning.
                ///
                /// - Remark: Generated from `#/components/schemas/CompletionUsage/completion_tokens_details/reasoning_tokens`.
                public var reasoning_tokens: Swift.Int?
                /// When using Predicted Outputs, the number of tokens in the
                /// prediction that did not appear in the completion. However, like
                /// reasoning tokens, these tokens are still counted in the total
                /// completion tokens for purposes of billing, output, and context window
                /// limits.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CompletionUsage/completion_tokens_details/rejected_prediction_tokens`.
                public var rejected_prediction_tokens: Swift.Int?
                /// Creates a new `completion_tokens_detailsPayload`.
                ///
                /// - Parameters:
                ///   - accepted_prediction_tokens: When using Predicted Outputs, the number of tokens in the
                ///   - audio_tokens: Audio input tokens generated by the model.
                ///   - reasoning_tokens: Tokens generated by the model for reasoning.
                ///   - rejected_prediction_tokens: When using Predicted Outputs, the number of tokens in the
                public init(
                    accepted_prediction_tokens: Swift.Int? = nil,
                    audio_tokens: Swift.Int? = nil,
                    reasoning_tokens: Swift.Int? = nil,
                    rejected_prediction_tokens: Swift.Int? = nil
                ) {
                    self.accepted_prediction_tokens = accepted_prediction_tokens
                    self.audio_tokens = audio_tokens
                    self.reasoning_tokens = reasoning_tokens
                    self.rejected_prediction_tokens = rejected_prediction_tokens
                }
                public enum CodingKeys: String, CodingKey {
                    case accepted_prediction_tokens
                    case audio_tokens
                    case reasoning_tokens
                    case rejected_prediction_tokens
                }
            }
            /// Breakdown of tokens used in a completion.
            ///
            /// - Remark: Generated from `#/components/schemas/CompletionUsage/completion_tokens_details`.
            public var completion_tokens_details: Components.Schemas.CompletionUsage.completion_tokens_detailsPayload?
            /// Breakdown of tokens used in the prompt.
            ///
            /// - Remark: Generated from `#/components/schemas/CompletionUsage/prompt_tokens_details`.
            public struct prompt_tokens_detailsPayload: Codable, Hashable, Sendable {
                /// Audio input tokens present in the prompt.
                ///
                /// - Remark: Generated from `#/components/schemas/CompletionUsage/prompt_tokens_details/audio_tokens`.
                public var audio_tokens: Swift.Int?
                /// Cached tokens present in the prompt.
                ///
                /// - Remark: Generated from `#/components/schemas/CompletionUsage/prompt_tokens_details/cached_tokens`.
                public var cached_tokens: Swift.Int?
                /// Creates a new `prompt_tokens_detailsPayload`.
                ///
                /// - Parameters:
                ///   - audio_tokens: Audio input tokens present in the prompt.
                ///   - cached_tokens: Cached tokens present in the prompt.
                public init(
                    audio_tokens: Swift.Int? = nil,
                    cached_tokens: Swift.Int? = nil
                ) {
                    self.audio_tokens = audio_tokens
                    self.cached_tokens = cached_tokens
                }
                public enum CodingKeys: String, CodingKey {
                    case audio_tokens
                    case cached_tokens
                }
            }
            /// Breakdown of tokens used in the prompt.
            ///
            /// - Remark: Generated from `#/components/schemas/CompletionUsage/prompt_tokens_details`.
            public var prompt_tokens_details: Components.Schemas.CompletionUsage.prompt_tokens_detailsPayload?
            /// Creates a new `CompletionUsage`.
            ///
            /// - Parameters:
            ///   - completion_tokens: Number of tokens in the generated completion.
            ///   - prompt_tokens: Number of tokens in the prompt.
            ///   - total_tokens: Total number of tokens used in the request (prompt + completion).
            ///   - completion_tokens_details: Breakdown of tokens used in a completion.
            ///   - prompt_tokens_details: Breakdown of tokens used in the prompt.
            public init(
                completion_tokens: Swift.Int,
                prompt_tokens: Swift.Int,
                total_tokens: Swift.Int,
                completion_tokens_details: Components.Schemas.CompletionUsage.completion_tokens_detailsPayload? = nil,
                prompt_tokens_details: Components.Schemas.CompletionUsage.prompt_tokens_detailsPayload? = nil
            ) {
                self.completion_tokens = completion_tokens
                self.prompt_tokens = prompt_tokens
                self.total_tokens = total_tokens
                self.completion_tokens_details = completion_tokens_details
                self.prompt_tokens_details = prompt_tokens_details
            }
            public enum CodingKeys: String, CodingKey {
                case completion_tokens
                case prompt_tokens
                case total_tokens
                case completion_tokens_details
                case prompt_tokens_details
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest`.
        public struct CreateAssistantRequest: Codable, Hashable, Sendable {
            /// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/model`.
            public struct modelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/model/value1`.
                public var value1: Swift.String?
                /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/model/value2`.
                public var value2: Components.Schemas.AssistantSupportedModels?
                /// Creates a new `modelPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Swift.String? = nil,
                    value2: Components.Schemas.AssistantSupportedModels? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            value1,
                            value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        value1,
                        value2
                    ])
                }
            }
            /// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/model`.
            public var model: Components.Schemas.CreateAssistantRequest.modelPayload
            /// The name of the assistant. The maximum length is 256 characters.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/name`.
            public var name: Swift.String?
            /// The description of the assistant. The maximum length is 512 characters.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/description`.
            public var description: Swift.String?
            /// The system instructions that the assistant uses. The maximum length is 256,000 characters.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/instructions`.
            public var instructions: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/reasoning_effort`.
            public var reasoning_effort: Components.Schemas.ReasoningEffort?
            /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/toolsPayload`.
            @frozen public enum toolsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/toolsPayload/case1`.
                case AssistantToolsCode(Components.Schemas.AssistantToolsCode)
                /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/toolsPayload/case2`.
                case AssistantToolsFileSearch(Components.Schemas.AssistantToolsFileSearch)
                /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/toolsPayload/case3`.
                case AssistantToolsFunction(Components.Schemas.AssistantToolsFunction)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .AssistantToolsCode(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .AssistantToolsFileSearch(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .AssistantToolsFunction(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .AssistantToolsCode(value):
                        try value.encode(to: encoder)
                    case let .AssistantToolsFileSearch(value):
                        try value.encode(to: encoder)
                    case let .AssistantToolsFunction(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/tools`.
            public typealias toolsPayload = [Components.Schemas.CreateAssistantRequest.toolsPayloadPayload]
            /// A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/tools`.
            public var tools: Components.Schemas.CreateAssistantRequest.toolsPayload?
            /// A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/tool_resources`.
            public struct tool_resourcesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/tool_resources/code_interpreter`.
                public struct code_interpreterPayload: Codable, Hashable, Sendable {
                    /// A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/tool_resources/code_interpreter/file_ids`.
                    public var file_ids: [Swift.String]?
                    /// Creates a new `code_interpreterPayload`.
                    ///
                    /// - Parameters:
                    ///   - file_ids: A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                    public init(file_ids: [Swift.String]? = nil) {
                        self.file_ids = file_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case file_ids
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/tool_resources/code_interpreter`.
                public var code_interpreter: Components.Schemas.CreateAssistantRequest.tool_resourcesPayload.code_interpreterPayload?
                /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/tool_resources/file_search`.
                @frozen public enum file_searchPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/tool_resources/file_search/case1`.
                    public struct Case1Payload: Codable, Hashable, Sendable {
                        /// Creates a new `Case1Payload`.
                        public init() {}
                    }
                    /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/tool_resources/file_search/case1`.
                    case case1(Components.Schemas.CreateAssistantRequest.tool_resourcesPayload.file_searchPayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/tool_resources/file_search/case2`.
                    public struct Case2Payload: Codable, Hashable, Sendable {
                        /// Creates a new `Case2Payload`.
                        public init() {}
                    }
                    /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/tool_resources/file_search/case2`.
                    case case2(Components.Schemas.CreateAssistantRequest.tool_resourcesPayload.file_searchPayload.Case2Payload)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try value.encode(to: encoder)
                        case let .case2(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/tool_resources/file_search`.
                public var file_search: Components.Schemas.CreateAssistantRequest.tool_resourcesPayload.file_searchPayload?
                /// Creates a new `tool_resourcesPayload`.
                ///
                /// - Parameters:
                ///   - code_interpreter:
                ///   - file_search:
                public init(
                    code_interpreter: Components.Schemas.CreateAssistantRequest.tool_resourcesPayload.code_interpreterPayload? = nil,
                    file_search: Components.Schemas.CreateAssistantRequest.tool_resourcesPayload.file_searchPayload? = nil
                ) {
                    self.code_interpreter = code_interpreter
                    self.file_search = file_search
                }
                public enum CodingKeys: String, CodingKey {
                    case code_interpreter
                    case file_search
                }
            }
            /// A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/tool_resources`.
            public var tool_resources: Components.Schemas.CreateAssistantRequest.tool_resourcesPayload?
            /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/temperature`.
            public var temperature: Swift.Double?
            /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            ///
            /// We generally recommend altering this or temperature but not both.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/top_p`.
            public var top_p: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/CreateAssistantRequest/response_format`.
            public var response_format: Components.Schemas.AssistantsApiResponseFormatOption?
            /// Creates a new `CreateAssistantRequest`.
            ///
            /// - Parameters:
            ///   - model: ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
            ///   - name: The name of the assistant. The maximum length is 256 characters.
            ///   - description: The description of the assistant. The maximum length is 512 characters.
            ///   - instructions: The system instructions that the assistant uses. The maximum length is 256,000 characters.
            ///   - reasoning_effort:
            ///   - tools: A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
            ///   - tool_resources: A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///   - metadata:
            ///   - temperature: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            ///   - top_p: An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            ///   - response_format:
            public init(
                model: Components.Schemas.CreateAssistantRequest.modelPayload,
                name: Swift.String? = nil,
                description: Swift.String? = nil,
                instructions: Swift.String? = nil,
                reasoning_effort: Components.Schemas.ReasoningEffort? = nil,
                tools: Components.Schemas.CreateAssistantRequest.toolsPayload? = nil,
                tool_resources: Components.Schemas.CreateAssistantRequest.tool_resourcesPayload? = nil,
                metadata: Components.Schemas.Metadata? = nil,
                temperature: Swift.Double? = nil,
                top_p: Swift.Double? = nil,
                response_format: Components.Schemas.AssistantsApiResponseFormatOption? = nil
            ) {
                self.model = model
                self.name = name
                self.description = description
                self.instructions = instructions
                self.reasoning_effort = reasoning_effort
                self.tools = tools
                self.tool_resources = tool_resources
                self.metadata = metadata
                self.temperature = temperature
                self.top_p = top_p
                self.response_format = response_format
            }
            public enum CodingKeys: String, CodingKey {
                case model
                case name
                case description
                case instructions
                case reasoning_effort
                case tools
                case tool_resources
                case metadata
                case temperature
                case top_p
                case response_format
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                model = try container.decode(
                    Components.Schemas.CreateAssistantRequest.modelPayload.self,
                    forKey: .model
                )
                name = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .name
                )
                description = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .description
                )
                instructions = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .instructions
                )
                reasoning_effort = try container.decodeIfPresent(
                    Components.Schemas.ReasoningEffort.self,
                    forKey: .reasoning_effort
                )
                tools = try container.decodeIfPresent(
                    Components.Schemas.CreateAssistantRequest.toolsPayload.self,
                    forKey: .tools
                )
                tool_resources = try container.decodeIfPresent(
                    Components.Schemas.CreateAssistantRequest.tool_resourcesPayload.self,
                    forKey: .tool_resources
                )
                metadata = try container.decodeIfPresent(
                    Components.Schemas.Metadata.self,
                    forKey: .metadata
                )
                temperature = try container.decodeIfPresent(
                    Swift.Double.self,
                    forKey: .temperature
                )
                top_p = try container.decodeIfPresent(
                    Swift.Double.self,
                    forKey: .top_p
                )
                response_format = try container.decodeIfPresent(
                    Components.Schemas.AssistantsApiResponseFormatOption.self,
                    forKey: .response_format
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "model",
                    "name",
                    "description",
                    "instructions",
                    "reasoning_effort",
                    "tools",
                    "tool_resources",
                    "metadata",
                    "temperature",
                    "top_p",
                    "response_format"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest`.
        public struct CreateChatCompletionRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value1`.
            public var value1: Components.Schemas.CreateModelResponseProperties
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// A list of messages comprising the conversation so far. Depending on the
                /// [model](/docs/models) you use, different message types (modalities) are
                /// supported, like [text](/docs/guides/text-generation),
                /// [images](/docs/guides/vision), and [audio](/docs/guides/audio).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/messages`.
                public var messages: [Components.Schemas.ChatCompletionRequestMessage]
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/model`.
                public var model: Components.Schemas.ModelIdsShared
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/modalities`.
                public var modalities: Components.Schemas.ResponseModalities?
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/reasoning_effort`.
                public var reasoning_effort: Components.Schemas.ReasoningEffort?
                /// An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/max_completion_tokens`.
                public var max_completion_tokens: Swift.Int?
                /// Number between -2.0 and 2.0. Positive values penalize new tokens based on
                /// their existing frequency in the text so far, decreasing the model's
                /// likelihood to repeat the same line verbatim.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/frequency_penalty`.
                public var frequency_penalty: Swift.Double?
                /// Number between -2.0 and 2.0. Positive values penalize new tokens based on
                /// whether they appear in the text so far, increasing the model's likelihood
                /// to talk about new topics.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/presence_penalty`.
                public var presence_penalty: Swift.Double?
                /// This tool searches the web for relevant results to use in a response.
                /// Learn more about the [web search tool](/docs/guides/tools-web-search?api-mode=chat).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/web_search_options`.
                public struct web_search_optionsPayload: Codable, Hashable, Sendable {
                    /// Approximate location parameters for the search.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/web_search_options/user_location`.
                    public struct user_locationPayload: Codable, Hashable, Sendable {
                        /// The type of location approximation. Always `approximate`.
                        ///
                        ///
                        /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/web_search_options/user_location/type`.
                        @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                            case approximate = "approximate"
                        }
                        /// The type of location approximation. Always `approximate`.
                        ///
                        ///
                        /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/web_search_options/user_location/type`.
                        public var _type: Components.Schemas.CreateChatCompletionRequest.Value2Payload.web_search_optionsPayload.user_locationPayload._typePayload
                        /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/web_search_options/user_location/approximate`.
                        public var approximate: Components.Schemas.WebSearchLocation
                        /// Creates a new `user_locationPayload`.
                        ///
                        /// - Parameters:
                        ///   - _type: The type of location approximation. Always `approximate`.
                        ///   - approximate:
                        public init(
                            _type: Components.Schemas.CreateChatCompletionRequest.Value2Payload.web_search_optionsPayload.user_locationPayload._typePayload,
                            approximate: Components.Schemas.WebSearchLocation
                        ) {
                            self._type = _type
                            self.approximate = approximate
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case approximate
                        }
                    }
                    /// Approximate location parameters for the search.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/web_search_options/user_location`.
                    public var user_location: Components.Schemas.CreateChatCompletionRequest.Value2Payload.web_search_optionsPayload.user_locationPayload?
                    /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/web_search_options/search_context_size`.
                    public var search_context_size: Components.Schemas.WebSearchContextSize?
                    /// Creates a new `web_search_optionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - user_location: Approximate location parameters for the search.
                    ///   - search_context_size:
                    public init(
                        user_location: Components.Schemas.CreateChatCompletionRequest.Value2Payload.web_search_optionsPayload.user_locationPayload? = nil,
                        search_context_size: Components.Schemas.WebSearchContextSize? = nil
                    ) {
                        self.user_location = user_location
                        self.search_context_size = search_context_size
                    }
                    public enum CodingKeys: String, CodingKey {
                        case user_location
                        case search_context_size
                    }
                }
                /// This tool searches the web for relevant results to use in a response.
                /// Learn more about the [web search tool](/docs/guides/tools-web-search?api-mode=chat).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/web_search_options`.
                public var web_search_options: Components.Schemas.CreateChatCompletionRequest.Value2Payload.web_search_optionsPayload?
                /// An integer between 0 and 20 specifying the number of most likely tokens to
                /// return at each token position, each with an associated log probability.
                /// `logprobs` must be set to `true` if this parameter is used.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/top_logprobs`.
                public var top_logprobs: Swift.Int?
                /// An object specifying the format that the model must output.
                ///
                /// Setting to `{ "type": "json_schema", "json_schema": {...} }` enables
                /// Structured Outputs which ensures the model will match your supplied JSON
                /// schema. Learn more in the [Structured Outputs
                /// guide](/docs/guides/structured-outputs).
                ///
                /// Setting to `{ "type": "json_object" }` enables the older JSON mode, which
                /// ensures the message the model generates is valid JSON. Using `json_schema`
                /// is preferred for models that support it.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/response_format`.
                @frozen public enum response_formatPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/response_format/case1`.
                    case ResponseFormatText(Components.Schemas.ResponseFormatText)
                    /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/response_format/case2`.
                    case ResponseFormatJsonSchema(Components.Schemas.ResponseFormatJsonSchema)
                    /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/response_format/case3`.
                    case ResponseFormatJsonObject(Components.Schemas.ResponseFormatJsonObject)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .ResponseFormatText(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .ResponseFormatJsonSchema(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .ResponseFormatJsonObject(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .ResponseFormatText(value):
                            try value.encode(to: encoder)
                        case let .ResponseFormatJsonSchema(value):
                            try value.encode(to: encoder)
                        case let .ResponseFormatJsonObject(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// An object specifying the format that the model must output.
                ///
                /// Setting to `{ "type": "json_schema", "json_schema": {...} }` enables
                /// Structured Outputs which ensures the model will match your supplied JSON
                /// schema. Learn more in the [Structured Outputs
                /// guide](/docs/guides/structured-outputs).
                ///
                /// Setting to `{ "type": "json_object" }` enables the older JSON mode, which
                /// ensures the message the model generates is valid JSON. Using `json_schema`
                /// is preferred for models that support it.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/response_format`.
                public var response_format: Components.Schemas.CreateChatCompletionRequest.Value2Payload.response_formatPayload?
                /// Parameters for audio output. Required when audio output is requested with
                /// `modalities: ["audio"]`. [Learn more](/docs/guides/audio).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/audio`.
                public struct audioPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/audio/voice`.
                    public var voice: Components.Schemas.VoiceIdsShared
                    /// Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,
                    /// `opus`, or `pcm16`.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/audio/format`.
                    @frozen public enum formatPayload: String, Codable, Hashable, Sendable {
                        case wav = "wav"
                        case aac = "aac"
                        case mp3 = "mp3"
                        case flac = "flac"
                        case opus = "opus"
                        case pcm16 = "pcm16"
                    }
                    /// Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,
                    /// `opus`, or `pcm16`.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/audio/format`.
                    public var format: Components.Schemas.CreateChatCompletionRequest.Value2Payload.audioPayload.formatPayload
                    /// Creates a new `audioPayload`.
                    ///
                    /// - Parameters:
                    ///   - voice:
                    ///   - format: Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,
                    public init(
                        voice: Components.Schemas.VoiceIdsShared,
                        format: Components.Schemas.CreateChatCompletionRequest.Value2Payload.audioPayload.formatPayload
                    ) {
                        self.voice = voice
                        self.format = format
                    }
                    public enum CodingKeys: String, CodingKey {
                        case voice
                        case format
                    }
                }
                /// Parameters for audio output. Required when audio output is requested with
                /// `modalities: ["audio"]`. [Learn more](/docs/guides/audio).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/audio`.
                public var audio: Components.Schemas.CreateChatCompletionRequest.Value2Payload.audioPayload?
                /// Whether or not to store the output of this chat completion request for 
                /// use in our [model distillation](/docs/guides/distillation) or
                /// [evals](/docs/guides/evals) products.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/store`.
                public var store: Swift.Bool?
                /// If set to true, the model response data will be streamed to the client
                /// as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).
                /// See the [Streaming section below](/docs/api-reference/chat/streaming)
                /// for more information, along with the [streaming responses](/docs/guides/streaming-responses)
                /// guide for more information on how to handle the streaming events.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/stream`.
                public var stream: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/stop`.
                public var stop: Components.Schemas.StopConfiguration?
                /// Modify the likelihood of specified tokens appearing in the completion.
                ///
                /// Accepts a JSON object that maps tokens (specified by their token ID in the
                /// tokenizer) to an associated bias value from -100 to 100. Mathematically,
                /// the bias is added to the logits generated by the model prior to sampling.
                /// The exact effect will vary per model, but values between -1 and 1 should
                /// decrease or increase likelihood of selection; values like -100 or 100
                /// should result in a ban or exclusive selection of the relevant token.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/logit_bias`.
                public struct logit_biasPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: [String: Swift.Int]
                    /// Creates a new `logit_biasPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: [String: Swift.Int] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// Modify the likelihood of specified tokens appearing in the completion.
                ///
                /// Accepts a JSON object that maps tokens (specified by their token ID in the
                /// tokenizer) to an associated bias value from -100 to 100. Mathematically,
                /// the bias is added to the logits generated by the model prior to sampling.
                /// The exact effect will vary per model, but values between -1 and 1 should
                /// decrease or increase likelihood of selection; values like -100 or 100
                /// should result in a ban or exclusive selection of the relevant token.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/logit_bias`.
                public var logit_bias: Components.Schemas.CreateChatCompletionRequest.Value2Payload.logit_biasPayload?
                /// Whether to return log probabilities of the output tokens or not. If true,
                /// returns the log probabilities of each output token returned in the
                /// `content` of `message`.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/logprobs`.
                public var logprobs: Swift.Bool?
                /// The maximum number of [tokens](/tokenizer) that can be generated in the
                /// chat completion. This value can be used to control
                /// [costs](https://openai.com/api/pricing/) for text generated via API.
                ///
                /// This value is now deprecated in favor of `max_completion_tokens`, and is
                /// not compatible with [o-series models](/docs/guides/reasoning).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/max_tokens`.
                @available(*, deprecated)
                public var max_tokens: Swift.Int?
                /// How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/n`.
                public var n: Swift.Int?
                /// Configuration for a [Predicted Output](/docs/guides/predicted-outputs),
                /// which can greatly improve response times when large parts of the model
                /// response are known ahead of time. This is most common when you are
                /// regenerating a file with only minor changes to most of the content.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/prediction`.
                @frozen public enum predictionPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/prediction/case1`.
                    case PredictionContent(Components.Schemas.PredictionContent)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .PredictionContent(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .PredictionContent(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// Configuration for a [Predicted Output](/docs/guides/predicted-outputs),
                /// which can greatly improve response times when large parts of the model
                /// response are known ahead of time. This is most common when you are
                /// regenerating a file with only minor changes to most of the content.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/prediction`.
                public var prediction: Components.Schemas.CreateChatCompletionRequest.Value2Payload.predictionPayload?
                /// This feature is in Beta.
                /// If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
                /// Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/seed`.
                public var seed: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/stream_options`.
                public var stream_options: Components.Schemas.ChatCompletionStreamOptions?
                /// A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/tools`.
                public var tools: [Components.Schemas.ChatCompletionTool]?
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/tool_choice`.
                public var tool_choice: Components.Schemas.ChatCompletionToolChoiceOption?
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/parallel_tool_calls`.
                public var parallel_tool_calls: Components.Schemas.ParallelToolCalls?
                /// Deprecated in favor of `tool_choice`.
                ///
                /// Controls which (if any) function is called by the model.
                ///
                /// `none` means the model will not call a function and instead generates a
                /// message.
                ///
                /// `auto` means the model can pick between generating a message or calling a
                /// function.
                ///
                /// Specifying a particular function via `{"name": "my_function"}` forces the
                /// model to call that function.
                ///
                /// `none` is the default when no functions are present. `auto` is the default
                /// if functions are present.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/function_call`.
                @frozen public enum function_callPayload: Codable, Hashable, Sendable {
                    /// `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/function_call/case1`.
                    @frozen public enum Case1Payload: String, Codable, Hashable, Sendable {
                        case none = "none"
                        case auto = "auto"
                    }
                    /// `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/function_call/case1`.
                    case case1(Components.Schemas.CreateChatCompletionRequest.Value2Payload.function_callPayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/function_call/case2`.
                    case ChatCompletionFunctionCallOption(Components.Schemas.ChatCompletionFunctionCallOption)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .ChatCompletionFunctionCallOption(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .ChatCompletionFunctionCallOption(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// Deprecated in favor of `tool_choice`.
                ///
                /// Controls which (if any) function is called by the model.
                ///
                /// `none` means the model will not call a function and instead generates a
                /// message.
                ///
                /// `auto` means the model can pick between generating a message or calling a
                /// function.
                ///
                /// Specifying a particular function via `{"name": "my_function"}` forces the
                /// model to call that function.
                ///
                /// `none` is the default when no functions are present. `auto` is the default
                /// if functions are present.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/function_call`.
                @available(*, deprecated)
                public var function_call: Components.Schemas.CreateChatCompletionRequest.Value2Payload.function_callPayload?
                /// Deprecated in favor of `tools`.
                ///
                /// A list of functions the model may generate JSON inputs for.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2/functions`.
                @available(*, deprecated)
                public var functions: [Components.Schemas.ChatCompletionFunctions]?
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - messages: A list of messages comprising the conversation so far. Depending on the
                ///   - model:
                ///   - modalities:
                ///   - reasoning_effort:
                ///   - max_completion_tokens: An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).
                ///   - frequency_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on
                ///   - presence_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on
                ///   - web_search_options: This tool searches the web for relevant results to use in a response.
                ///   - top_logprobs: An integer between 0 and 20 specifying the number of most likely tokens to
                ///   - response_format: An object specifying the format that the model must output.
                ///   - audio: Parameters for audio output. Required when audio output is requested with
                ///   - store: Whether or not to store the output of this chat completion request for 
                ///   - stream: If set to true, the model response data will be streamed to the client
                ///   - stop:
                ///   - logit_bias: Modify the likelihood of specified tokens appearing in the completion.
                ///   - logprobs: Whether to return log probabilities of the output tokens or not. If true,
                ///   - max_tokens: The maximum number of [tokens](/tokenizer) that can be generated in the
                ///   - n: How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
                ///   - prediction: Configuration for a [Predicted Output](/docs/guides/predicted-outputs),
                ///   - seed: This feature is in Beta.
                ///   - stream_options:
                ///   - tools: A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
                ///   - tool_choice:
                ///   - parallel_tool_calls:
                ///   - function_call: Deprecated in favor of `tool_choice`.
                ///   - functions: Deprecated in favor of `tools`.
                public init(
                    messages: [Components.Schemas.ChatCompletionRequestMessage],
                    model: Components.Schemas.ModelIdsShared,
                    modalities: Components.Schemas.ResponseModalities? = nil,
                    reasoning_effort: Components.Schemas.ReasoningEffort? = nil,
                    max_completion_tokens: Swift.Int? = nil,
                    frequency_penalty: Swift.Double? = nil,
                    presence_penalty: Swift.Double? = nil,
                    web_search_options: Components.Schemas.CreateChatCompletionRequest.Value2Payload.web_search_optionsPayload? = nil,
                    top_logprobs: Swift.Int? = nil,
                    response_format: Components.Schemas.CreateChatCompletionRequest.Value2Payload.response_formatPayload? = nil,
                    audio: Components.Schemas.CreateChatCompletionRequest.Value2Payload.audioPayload? = nil,
                    store: Swift.Bool? = nil,
                    stream: Swift.Bool? = nil,
                    stop: Components.Schemas.StopConfiguration? = nil,
                    logit_bias: Components.Schemas.CreateChatCompletionRequest.Value2Payload.logit_biasPayload? = nil,
                    logprobs: Swift.Bool? = nil,
                    max_tokens: Swift.Int? = nil,
                    n: Swift.Int? = nil,
                    prediction: Components.Schemas.CreateChatCompletionRequest.Value2Payload.predictionPayload? = nil,
                    seed: Swift.Int? = nil,
                    stream_options: Components.Schemas.ChatCompletionStreamOptions? = nil,
                    tools: [Components.Schemas.ChatCompletionTool]? = nil,
                    tool_choice: Components.Schemas.ChatCompletionToolChoiceOption? = nil,
                    parallel_tool_calls: Components.Schemas.ParallelToolCalls? = nil,
                    function_call: Components.Schemas.CreateChatCompletionRequest.Value2Payload.function_callPayload? = nil,
                    functions: [Components.Schemas.ChatCompletionFunctions]? = nil
                ) {
                    self.messages = messages
                    self.model = model
                    self.modalities = modalities
                    self.reasoning_effort = reasoning_effort
                    self.max_completion_tokens = max_completion_tokens
                    self.frequency_penalty = frequency_penalty
                    self.presence_penalty = presence_penalty
                    self.web_search_options = web_search_options
                    self.top_logprobs = top_logprobs
                    self.response_format = response_format
                    self.audio = audio
                    self.store = store
                    self.stream = stream
                    self.stop = stop
                    self.logit_bias = logit_bias
                    self.logprobs = logprobs
                    self.max_tokens = max_tokens
                    self.n = n
                    self.prediction = prediction
                    self.seed = seed
                    self.stream_options = stream_options
                    self.tools = tools
                    self.tool_choice = tool_choice
                    self.parallel_tool_calls = parallel_tool_calls
                    self.function_call = function_call
                    self.functions = functions
                }
                public enum CodingKeys: String, CodingKey {
                    case messages
                    case model
                    case modalities
                    case reasoning_effort
                    case max_completion_tokens
                    case frequency_penalty
                    case presence_penalty
                    case web_search_options
                    case top_logprobs
                    case response_format
                    case audio
                    case store
                    case stream
                    case stop
                    case logit_bias
                    case logprobs
                    case max_tokens
                    case n
                    case prediction
                    case seed
                    case stream_options
                    case tools
                    case tool_choice
                    case parallel_tool_calls
                    case function_call
                    case functions
                }
            }
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/value2`.
            public var value2: Components.Schemas.CreateChatCompletionRequest.Value2Payload
            /// Creates a new `CreateChatCompletionRequest`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.CreateModelResponseProperties,
                value2: Components.Schemas.CreateChatCompletionRequest.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// Represents a chat completion response returned by model, based on the provided input.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse`.
        public struct CreateChatCompletionResponse: Codable, Hashable, Sendable {
            /// A unique identifier for the chat completion.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/choicesPayload`.
            public struct choicesPayloadPayload: Codable, Hashable, Sendable {
                /// The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                /// `length` if the maximum number of tokens specified in the request was reached,
                /// `content_filter` if content was omitted due to a flag from our content filters,
                /// `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/choicesPayload/finish_reason`.
                @frozen public enum finish_reasonPayload: String, Codable, Hashable, Sendable {
                    case stop = "stop"
                    case length = "length"
                    case tool_calls = "tool_calls"
                    case content_filter = "content_filter"
                    case function_call = "function_call"
                }
                /// The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                /// `length` if the maximum number of tokens specified in the request was reached,
                /// `content_filter` if content was omitted due to a flag from our content filters,
                /// `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/choicesPayload/finish_reason`.
                public var finish_reason: Components.Schemas.CreateChatCompletionResponse.choicesPayloadPayload.finish_reasonPayload
                /// The index of the choice in the list of choices.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/choicesPayload/index`.
                public var index: Swift.Int
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/choicesPayload/message`.
                public var message: Components.Schemas.ChatCompletionResponseMessage
                /// Log probability information for the choice.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/choicesPayload/logprobs`.
                public struct logprobsPayload: Codable, Hashable, Sendable {
                    /// A list of message content tokens with log probability information.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/choicesPayload/logprobs/content`.
                    public var content: [Components.Schemas.ChatCompletionTokenLogprob]?
                    /// A list of message refusal tokens with log probability information.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/choicesPayload/logprobs/refusal`.
                    public var refusal: [Components.Schemas.ChatCompletionTokenLogprob]?
                    /// Creates a new `logprobsPayload`.
                    ///
                    /// - Parameters:
                    ///   - content: A list of message content tokens with log probability information.
                    ///   - refusal: A list of message refusal tokens with log probability information.
                    public init(
                        content: [Components.Schemas.ChatCompletionTokenLogprob]? = nil,
                        refusal: [Components.Schemas.ChatCompletionTokenLogprob]? = nil
                    ) {
                        self.content = content
                        self.refusal = refusal
                    }
                    public enum CodingKeys: String, CodingKey {
                        case content
                        case refusal
                    }
                }
                /// Log probability information for the choice.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/choicesPayload/logprobs`.
                public var logprobs: Components.Schemas.CreateChatCompletionResponse.choicesPayloadPayload.logprobsPayload?
                /// Creates a new `choicesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - finish_reason: The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                ///   - index: The index of the choice in the list of choices.
                ///   - message:
                ///   - logprobs: Log probability information for the choice.
                public init(
                    finish_reason: Components.Schemas.CreateChatCompletionResponse.choicesPayloadPayload.finish_reasonPayload,
                    index: Swift.Int,
                    message: Components.Schemas.ChatCompletionResponseMessage,
                    logprobs: Components.Schemas.CreateChatCompletionResponse.choicesPayloadPayload.logprobsPayload? = nil
                ) {
                    self.finish_reason = finish_reason
                    self.index = index
                    self.message = message
                    self.logprobs = logprobs
                }
                public enum CodingKeys: String, CodingKey {
                    case finish_reason
                    case index
                    case message
                    case logprobs
                }
            }
            /// A list of chat completion choices. Can be more than one if `n` is greater than 1.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/choices`.
            public typealias choicesPayload = [Components.Schemas.CreateChatCompletionResponse.choicesPayloadPayload]
            /// A list of chat completion choices. Can be more than one if `n` is greater than 1.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/choices`.
            public var choices: Components.Schemas.CreateChatCompletionResponse.choicesPayload
            /// The Unix timestamp (in seconds) of when the chat completion was created.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/created`.
            public var created: Swift.Int
            /// The model used for the chat completion.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/model`.
            public var model: Swift.String
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/service_tier`.
            public var service_tier: Components.Schemas.ServiceTier?
            /// This fingerprint represents the backend configuration that the model runs with.
            ///
            /// Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/system_fingerprint`.
            public var system_fingerprint: Swift.String?
            /// The object type, which is always `chat.completion`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case chat_period_completion = "chat.completion"
            }
            /// The object type, which is always `chat.completion`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/object`.
            public var object: Components.Schemas.CreateChatCompletionResponse.objectPayload
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/usage`.
            public var usage: Components.Schemas.CompletionUsage?
            /// Creates a new `CreateChatCompletionResponse`.
            ///
            /// - Parameters:
            ///   - id: A unique identifier for the chat completion.
            ///   - choices: A list of chat completion choices. Can be more than one if `n` is greater than 1.
            ///   - created: The Unix timestamp (in seconds) of when the chat completion was created.
            ///   - model: The model used for the chat completion.
            ///   - service_tier:
            ///   - system_fingerprint: This fingerprint represents the backend configuration that the model runs with.
            ///   - object: The object type, which is always `chat.completion`.
            ///   - usage:
            public init(
                id: Swift.String,
                choices: Components.Schemas.CreateChatCompletionResponse.choicesPayload,
                created: Swift.Int,
                model: Swift.String,
                service_tier: Components.Schemas.ServiceTier? = nil,
                system_fingerprint: Swift.String? = nil,
                object: Components.Schemas.CreateChatCompletionResponse.objectPayload,
                usage: Components.Schemas.CompletionUsage? = nil
            ) {
                self.id = id
                self.choices = choices
                self.created = created
                self.model = model
                self.service_tier = service_tier
                self.system_fingerprint = system_fingerprint
                self.object = object
                self.usage = usage
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case choices
                case created
                case model
                case service_tier
                case system_fingerprint
                case object
                case usage
            }
        }
        /// Represents a streamed chunk of a chat completion response returned
        /// by the model, based on the provided input. 
        /// [Learn more](/docs/guides/streaming-responses).
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse`.
        public struct CreateChatCompletionStreamResponse: Codable, Hashable, Sendable {
            /// A unique identifier for the chat completion. Each chunk has the same ID.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/choicesPayload`.
            public struct choicesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/choicesPayload/delta`.
                public var delta: Components.Schemas.ChatCompletionStreamResponseDelta
                /// Log probability information for the choice.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/choicesPayload/logprobs`.
                public struct logprobsPayload: Codable, Hashable, Sendable {
                    /// A list of message content tokens with log probability information.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/choicesPayload/logprobs/content`.
                    public var content: [Components.Schemas.ChatCompletionTokenLogprob]?
                    /// A list of message refusal tokens with log probability information.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/choicesPayload/logprobs/refusal`.
                    public var refusal: [Components.Schemas.ChatCompletionTokenLogprob]?
                    /// Creates a new `logprobsPayload`.
                    ///
                    /// - Parameters:
                    ///   - content: A list of message content tokens with log probability information.
                    ///   - refusal: A list of message refusal tokens with log probability information.
                    public init(
                        content: [Components.Schemas.ChatCompletionTokenLogprob]? = nil,
                        refusal: [Components.Schemas.ChatCompletionTokenLogprob]? = nil
                    ) {
                        self.content = content
                        self.refusal = refusal
                    }
                    public enum CodingKeys: String, CodingKey {
                        case content
                        case refusal
                    }
                }
                /// Log probability information for the choice.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/choicesPayload/logprobs`.
                public var logprobs: Components.Schemas.CreateChatCompletionStreamResponse.choicesPayloadPayload.logprobsPayload?
                /// The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                /// `length` if the maximum number of tokens specified in the request was reached,
                /// `content_filter` if content was omitted due to a flag from our content filters,
                /// `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/choicesPayload/finish_reason`.
                @frozen public enum finish_reasonPayload: String, Codable, Hashable, Sendable {
                    case stop = "stop"
                    case length = "length"
                    case tool_calls = "tool_calls"
                    case content_filter = "content_filter"
                    case function_call = "function_call"
                }
                /// The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                /// `length` if the maximum number of tokens specified in the request was reached,
                /// `content_filter` if content was omitted due to a flag from our content filters,
                /// `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/choicesPayload/finish_reason`.
                public var finish_reason: Components.Schemas.CreateChatCompletionStreamResponse.choicesPayloadPayload.finish_reasonPayload?
                /// The index of the choice in the list of choices.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/choicesPayload/index`.
                public var index: Swift.Int
                /// Creates a new `choicesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - delta:
                ///   - logprobs: Log probability information for the choice.
                ///   - finish_reason: The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                ///   - index: The index of the choice in the list of choices.
                public init(
                    delta: Components.Schemas.ChatCompletionStreamResponseDelta,
                    logprobs: Components.Schemas.CreateChatCompletionStreamResponse.choicesPayloadPayload.logprobsPayload? = nil,
                    finish_reason: Components.Schemas.CreateChatCompletionStreamResponse.choicesPayloadPayload.finish_reasonPayload? = nil,
                    index: Swift.Int
                ) {
                    self.delta = delta
                    self.logprobs = logprobs
                    self.finish_reason = finish_reason
                    self.index = index
                }
                public enum CodingKeys: String, CodingKey {
                    case delta
                    case logprobs
                    case finish_reason
                    case index
                }
            }
            /// A list of chat completion choices. Can contain more than one elements if `n` is greater than 1. Can also be empty for the
            /// last chunk if you set `stream_options: {"include_usage": true}`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/choices`.
            public typealias choicesPayload = [Components.Schemas.CreateChatCompletionStreamResponse.choicesPayloadPayload]
            /// A list of chat completion choices. Can contain more than one elements if `n` is greater than 1. Can also be empty for the
            /// last chunk if you set `stream_options: {"include_usage": true}`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/choices`.
            public var choices: Components.Schemas.CreateChatCompletionStreamResponse.choicesPayload
            /// The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/created`.
            public var created: Swift.Int
            /// The model to generate the completion.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/model`.
            public var model: Swift.String
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/service_tier`.
            public var service_tier: Components.Schemas.ServiceTier?
            /// This fingerprint represents the backend configuration that the model runs with.
            /// Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/system_fingerprint`.
            public var system_fingerprint: Swift.String?
            /// The object type, which is always `chat.completion.chunk`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case chat_period_completion_period_chunk = "chat.completion.chunk"
            }
            /// The object type, which is always `chat.completion.chunk`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/object`.
            public var object: Components.Schemas.CreateChatCompletionStreamResponse.objectPayload
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionStreamResponse/usage`.
            public var usage: Components.Schemas.CompletionUsage?
            /// Creates a new `CreateChatCompletionStreamResponse`.
            ///
            /// - Parameters:
            ///   - id: A unique identifier for the chat completion. Each chunk has the same ID.
            ///   - choices: A list of chat completion choices. Can contain more than one elements if `n` is greater than 1. Can also be empty for the
            ///   - created: The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp.
            ///   - model: The model to generate the completion.
            ///   - service_tier:
            ///   - system_fingerprint: This fingerprint represents the backend configuration that the model runs with.
            ///   - object: The object type, which is always `chat.completion.chunk`.
            ///   - usage:
            public init(
                id: Swift.String,
                choices: Components.Schemas.CreateChatCompletionStreamResponse.choicesPayload,
                created: Swift.Int,
                model: Swift.String,
                service_tier: Components.Schemas.ServiceTier? = nil,
                system_fingerprint: Swift.String? = nil,
                object: Components.Schemas.CreateChatCompletionStreamResponse.objectPayload,
                usage: Components.Schemas.CompletionUsage? = nil
            ) {
                self.id = id
                self.choices = choices
                self.created = created
                self.model = model
                self.service_tier = service_tier
                self.system_fingerprint = system_fingerprint
                self.object = object
                self.usage = usage
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case choices
                case created
                case model
                case service_tier
                case system_fingerprint
                case object
                case usage
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest`.
        public struct CreateCompletionRequest: Codable, Hashable, Sendable {
            /// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/model`.
            public struct modelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/model/value1`.
                public var value1: Swift.String?
                /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/model/value2`.
                @frozen public enum Value2Payload: String, Codable, Hashable, Sendable {
                    case gpt_hyphen_3_period_5_hyphen_turbo_hyphen_instruct = "gpt-3.5-turbo-instruct"
                    case davinci_hyphen_002 = "davinci-002"
                    case babbage_hyphen_002 = "babbage-002"
                }
                /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/model/value2`.
                public var value2: Components.Schemas.CreateCompletionRequest.modelPayload.Value2Payload?
                /// Creates a new `modelPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Swift.String? = nil,
                    value2: Components.Schemas.CreateCompletionRequest.modelPayload.Value2Payload? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            value1,
                            value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        value1,
                        value2
                    ])
                }
            }
            /// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/model`.
            public var model: Components.Schemas.CreateCompletionRequest.modelPayload
            /// The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.
            ///
            /// Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/prompt`.
            @frozen public enum promptPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/prompt/case1`.
                case case1(Swift.String)
                /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/prompt/case2`.
                case case2([Swift.String])
                /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/prompt/case3`.
                case case3([Swift.Int])
                /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/prompt/case4`.
                case case4([[Swift.Int]])
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case3(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case4(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case3(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case4(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.
            ///
            /// Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/prompt`.
            public var prompt: Components.Schemas.CreateCompletionRequest.promptPayload?
            /// Generates `best_of` completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.
            ///
            /// When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.
            ///
            /// **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/best_of`.
            public var best_of: Swift.Int?
            /// Echo back the prompt in addition to the completion
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/echo`.
            public var echo: Swift.Bool?
            /// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
            ///
            /// [See more information about frequency and presence penalties.](/docs/guides/text-generation)
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/frequency_penalty`.
            public var frequency_penalty: Swift.Double?
            /// Modify the likelihood of specified tokens appearing in the completion.
            ///
            /// Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
            ///
            /// As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/logit_bias`.
            public struct logit_biasPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.Int]
                /// Creates a new `logit_biasPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Swift.Int] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Modify the likelihood of specified tokens appearing in the completion.
            ///
            /// Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
            ///
            /// As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/logit_bias`.
            public var logit_bias: Components.Schemas.CreateCompletionRequest.logit_biasPayload?
            /// Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.
            ///
            /// The maximum value for `logprobs` is 5.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/logprobs`.
            public var logprobs: Swift.Int?
            /// The maximum number of [tokens](/tokenizer) that can be generated in the completion.
            ///
            /// The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/max_tokens`.
            public var max_tokens: Swift.Int?
            /// How many completions to generate for each prompt.
            ///
            /// **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/n`.
            public var n: Swift.Int?
            /// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
            ///
            /// [See more information about frequency and presence penalties.](/docs/guides/text-generation)
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/presence_penalty`.
            public var presence_penalty: Swift.Double?
            /// If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
            ///
            /// Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/seed`.
            public var seed: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/stop`.
            public var stop: Components.Schemas.StopConfiguration?
            /// Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/stream`.
            public var stream: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/stream_options`.
            public var stream_options: Components.Schemas.ChatCompletionStreamOptions?
            /// The suffix that comes after a completion of inserted text.
            ///
            /// This parameter is only supported for `gpt-3.5-turbo-instruct`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/suffix`.
            public var suffix: Swift.String?
            /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            ///
            /// We generally recommend altering this or `top_p` but not both.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/temperature`.
            public var temperature: Swift.Double?
            /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            ///
            /// We generally recommend altering this or `temperature` but not both.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/top_p`.
            public var top_p: Swift.Double?
            /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionRequest/user`.
            public var user: Swift.String?
            /// Creates a new `CreateCompletionRequest`.
            ///
            /// - Parameters:
            ///   - model: ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
            ///   - prompt: The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.
            ///   - best_of: Generates `best_of` completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.
            ///   - echo: Echo back the prompt in addition to the completion
            ///   - frequency_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
            ///   - logit_bias: Modify the likelihood of specified tokens appearing in the completion.
            ///   - logprobs: Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.
            ///   - max_tokens: The maximum number of [tokens](/tokenizer) that can be generated in the completion.
            ///   - n: How many completions to generate for each prompt.
            ///   - presence_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
            ///   - seed: If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
            ///   - stop:
            ///   - stream: Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
            ///   - stream_options:
            ///   - suffix: The suffix that comes after a completion of inserted text.
            ///   - temperature: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            ///   - top_p: An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            ///   - user: A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
            public init(
                model: Components.Schemas.CreateCompletionRequest.modelPayload,
                prompt: Components.Schemas.CreateCompletionRequest.promptPayload? = nil,
                best_of: Swift.Int? = nil,
                echo: Swift.Bool? = nil,
                frequency_penalty: Swift.Double? = nil,
                logit_bias: Components.Schemas.CreateCompletionRequest.logit_biasPayload? = nil,
                logprobs: Swift.Int? = nil,
                max_tokens: Swift.Int? = nil,
                n: Swift.Int? = nil,
                presence_penalty: Swift.Double? = nil,
                seed: Swift.Int64? = nil,
                stop: Components.Schemas.StopConfiguration? = nil,
                stream: Swift.Bool? = nil,
                stream_options: Components.Schemas.ChatCompletionStreamOptions? = nil,
                suffix: Swift.String? = nil,
                temperature: Swift.Double? = nil,
                top_p: Swift.Double? = nil,
                user: Swift.String? = nil
            ) {
                self.model = model
                self.prompt = prompt
                self.best_of = best_of
                self.echo = echo
                self.frequency_penalty = frequency_penalty
                self.logit_bias = logit_bias
                self.logprobs = logprobs
                self.max_tokens = max_tokens
                self.n = n
                self.presence_penalty = presence_penalty
                self.seed = seed
                self.stop = stop
                self.stream = stream
                self.stream_options = stream_options
                self.suffix = suffix
                self.temperature = temperature
                self.top_p = top_p
                self.user = user
            }
            public enum CodingKeys: String, CodingKey {
                case model
                case prompt
                case best_of
                case echo
                case frequency_penalty
                case logit_bias
                case logprobs
                case max_tokens
                case n
                case presence_penalty
                case seed
                case stop
                case stream
                case stream_options
                case suffix
                case temperature
                case top_p
                case user
            }
        }
        /// Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint).
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse`.
        public struct CreateCompletionResponse: Codable, Hashable, Sendable {
            /// A unique identifier for the completion.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/choicesPayload`.
            public struct choicesPayloadPayload: Codable, Hashable, Sendable {
                /// The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                /// `length` if the maximum number of tokens specified in the request was reached,
                /// or `content_filter` if content was omitted due to a flag from our content filters.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/choicesPayload/finish_reason`.
                @frozen public enum finish_reasonPayload: String, Codable, Hashable, Sendable {
                    case stop = "stop"
                    case length = "length"
                    case content_filter = "content_filter"
                }
                /// The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                /// `length` if the maximum number of tokens specified in the request was reached,
                /// or `content_filter` if content was omitted due to a flag from our content filters.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/choicesPayload/finish_reason`.
                public var finish_reason: Components.Schemas.CreateCompletionResponse.choicesPayloadPayload.finish_reasonPayload
                /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/choicesPayload/index`.
                public var index: Swift.Int
                /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/choicesPayload/logprobs`.
                public struct logprobsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/choicesPayload/logprobs/text_offset`.
                    public var text_offset: [Swift.Int]?
                    /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/choicesPayload/logprobs/token_logprobs`.
                    public var token_logprobs: [Swift.Double]?
                    /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/choicesPayload/logprobs/tokens`.
                    public var tokens: [Swift.String]?
                    /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/choicesPayload/logprobs/top_logprobsPayload`.
                    public struct top_logprobsPayloadPayload: Codable, Hashable, Sendable {
                        /// A container of undocumented properties.
                        public var additionalProperties: [String: Swift.Double]
                        /// Creates a new `top_logprobsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - additionalProperties: A container of undocumented properties.
                        public init(additionalProperties: [String: Swift.Double] = .init()) {
                            self.additionalProperties = additionalProperties
                        }
                        public init(from decoder: any Decoder) throws {
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/choicesPayload/logprobs/top_logprobs`.
                    public typealias top_logprobsPayload = [Components.Schemas.CreateCompletionResponse.choicesPayloadPayload.logprobsPayload.top_logprobsPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/choicesPayload/logprobs/top_logprobs`.
                    public var top_logprobs: Components.Schemas.CreateCompletionResponse.choicesPayloadPayload.logprobsPayload.top_logprobsPayload?
                    /// Creates a new `logprobsPayload`.
                    ///
                    /// - Parameters:
                    ///   - text_offset:
                    ///   - token_logprobs:
                    ///   - tokens:
                    ///   - top_logprobs:
                    public init(
                        text_offset: [Swift.Int]? = nil,
                        token_logprobs: [Swift.Double]? = nil,
                        tokens: [Swift.String]? = nil,
                        top_logprobs: Components.Schemas.CreateCompletionResponse.choicesPayloadPayload.logprobsPayload.top_logprobsPayload? = nil
                    ) {
                        self.text_offset = text_offset
                        self.token_logprobs = token_logprobs
                        self.tokens = tokens
                        self.top_logprobs = top_logprobs
                    }
                    public enum CodingKeys: String, CodingKey {
                        case text_offset
                        case token_logprobs
                        case tokens
                        case top_logprobs
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/choicesPayload/logprobs`.
                public var logprobs: Components.Schemas.CreateCompletionResponse.choicesPayloadPayload.logprobsPayload?
                /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/choicesPayload/text`.
                public var text: Swift.String
                /// Creates a new `choicesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - finish_reason: The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                ///   - index:
                ///   - logprobs:
                ///   - text:
                public init(
                    finish_reason: Components.Schemas.CreateCompletionResponse.choicesPayloadPayload.finish_reasonPayload,
                    index: Swift.Int,
                    logprobs: Components.Schemas.CreateCompletionResponse.choicesPayloadPayload.logprobsPayload? = nil,
                    text: Swift.String
                ) {
                    self.finish_reason = finish_reason
                    self.index = index
                    self.logprobs = logprobs
                    self.text = text
                }
                public enum CodingKeys: String, CodingKey {
                    case finish_reason
                    case index
                    case logprobs
                    case text
                }
            }
            /// The list of completion choices the model generated for the input prompt.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/choices`.
            public typealias choicesPayload = [Components.Schemas.CreateCompletionResponse.choicesPayloadPayload]
            /// The list of completion choices the model generated for the input prompt.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/choices`.
            public var choices: Components.Schemas.CreateCompletionResponse.choicesPayload
            /// The Unix timestamp (in seconds) of when the completion was created.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/created`.
            public var created: Swift.Int
            /// The model used for completion.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/model`.
            public var model: Swift.String
            /// This fingerprint represents the backend configuration that the model runs with.
            ///
            /// Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/system_fingerprint`.
            public var system_fingerprint: Swift.String?
            /// The object type, which is always "text_completion"
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case text_completion = "text_completion"
            }
            /// The object type, which is always "text_completion"
            ///
            /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/object`.
            public var object: Components.Schemas.CreateCompletionResponse.objectPayload
            /// - Remark: Generated from `#/components/schemas/CreateCompletionResponse/usage`.
            public var usage: Components.Schemas.CompletionUsage?
            /// Creates a new `CreateCompletionResponse`.
            ///
            /// - Parameters:
            ///   - id: A unique identifier for the completion.
            ///   - choices: The list of completion choices the model generated for the input prompt.
            ///   - created: The Unix timestamp (in seconds) of when the completion was created.
            ///   - model: The model used for completion.
            ///   - system_fingerprint: This fingerprint represents the backend configuration that the model runs with.
            ///   - object: The object type, which is always "text_completion"
            ///   - usage:
            public init(
                id: Swift.String,
                choices: Components.Schemas.CreateCompletionResponse.choicesPayload,
                created: Swift.Int,
                model: Swift.String,
                system_fingerprint: Swift.String? = nil,
                object: Components.Schemas.CreateCompletionResponse.objectPayload,
                usage: Components.Schemas.CompletionUsage? = nil
            ) {
                self.id = id
                self.choices = choices
                self.created = created
                self.model = model
                self.system_fingerprint = system_fingerprint
                self.object = object
                self.usage = usage
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case choices
                case created
                case model
                case system_fingerprint
                case object
                case usage
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest`.
        public struct CreateEmbeddingRequest: Codable, Hashable, Sendable {
            /// Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. Some models may also impose a limit on total number of tokens summed across inputs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest/input`.
            @frozen public enum inputPayload: Codable, Hashable, Sendable {
                /// The string that will be turned into an embedding.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest/input/case1`.
                case case1(Swift.String)
                /// The array of strings that will be turned into an embedding.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest/input/case2`.
                case case2([Swift.String])
                /// The array of integers that will be turned into an embedding.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest/input/case3`.
                case case3([Swift.Int])
                /// The array of arrays containing integers that will be turned into an embedding.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest/input/case4`.
                case case4([[Swift.Int]])
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case3(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case4(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case3(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case4(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. Some models may also impose a limit on total number of tokens summed across inputs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest/input`.
            public var input: Components.Schemas.CreateEmbeddingRequest.inputPayload
            /// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest/model`.
            public struct modelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest/model/value1`.
                public var value1: Swift.String?
                /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest/model/value2`.
                @frozen public enum Value2Payload: String, Codable, Hashable, Sendable {
                    case text_hyphen_embedding_hyphen_ada_hyphen_002 = "text-embedding-ada-002"
                    case text_hyphen_embedding_hyphen_3_hyphen_small = "text-embedding-3-small"
                    case text_hyphen_embedding_hyphen_3_hyphen_large = "text-embedding-3-large"
                }
                /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest/model/value2`.
                public var value2: Components.Schemas.CreateEmbeddingRequest.modelPayload.Value2Payload?
                /// Creates a new `modelPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Swift.String? = nil,
                    value2: Components.Schemas.CreateEmbeddingRequest.modelPayload.Value2Payload? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            value1,
                            value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        value1,
                        value2
                    ])
                }
            }
            /// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest/model`.
            public var model: Components.Schemas.CreateEmbeddingRequest.modelPayload
            /// The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest/encoding_format`.
            @frozen public enum encoding_formatPayload: String, Codable, Hashable, Sendable {
                case float = "float"
                case base64 = "base64"
            }
            /// The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest/encoding_format`.
            public var encoding_format: Components.Schemas.CreateEmbeddingRequest.encoding_formatPayload?
            /// The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest/dimensions`.
            public var dimensions: Swift.Int?
            /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEmbeddingRequest/user`.
            public var user: Swift.String?
            /// Creates a new `CreateEmbeddingRequest`.
            ///
            /// - Parameters:
            ///   - input: Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. Some models may also impose a limit on total number of tokens summed across inputs.
            ///   - model: ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
            ///   - encoding_format: The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).
            ///   - dimensions: The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.
            ///   - user: A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
            public init(
                input: Components.Schemas.CreateEmbeddingRequest.inputPayload,
                model: Components.Schemas.CreateEmbeddingRequest.modelPayload,
                encoding_format: Components.Schemas.CreateEmbeddingRequest.encoding_formatPayload? = nil,
                dimensions: Swift.Int? = nil,
                user: Swift.String? = nil
            ) {
                self.input = input
                self.model = model
                self.encoding_format = encoding_format
                self.dimensions = dimensions
                self.user = user
            }
            public enum CodingKeys: String, CodingKey {
                case input
                case model
                case encoding_format
                case dimensions
                case user
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                input = try container.decode(
                    Components.Schemas.CreateEmbeddingRequest.inputPayload.self,
                    forKey: .input
                )
                model = try container.decode(
                    Components.Schemas.CreateEmbeddingRequest.modelPayload.self,
                    forKey: .model
                )
                encoding_format = try container.decodeIfPresent(
                    Components.Schemas.CreateEmbeddingRequest.encoding_formatPayload.self,
                    forKey: .encoding_format
                )
                dimensions = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .dimensions
                )
                user = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .user
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "input",
                    "model",
                    "encoding_format",
                    "dimensions",
                    "user"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateEmbeddingResponse`.
        public struct CreateEmbeddingResponse: Codable, Hashable, Sendable {
            /// The list of embeddings generated by the model.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEmbeddingResponse/data`.
            public var data: [Components.Schemas.Embedding]
            /// The name of the model used to generate the embedding.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEmbeddingResponse/model`.
            public var model: Swift.String
            /// The object type, which is always "list".
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEmbeddingResponse/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case list = "list"
            }
            /// The object type, which is always "list".
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEmbeddingResponse/object`.
            public var object: Components.Schemas.CreateEmbeddingResponse.objectPayload
            /// The usage information for the request.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEmbeddingResponse/usage`.
            public struct usagePayload: Codable, Hashable, Sendable {
                /// The number of tokens used by the prompt.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateEmbeddingResponse/usage/prompt_tokens`.
                public var prompt_tokens: Swift.Int
                /// The total number of tokens used by the request.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateEmbeddingResponse/usage/total_tokens`.
                public var total_tokens: Swift.Int
                /// Creates a new `usagePayload`.
                ///
                /// - Parameters:
                ///   - prompt_tokens: The number of tokens used by the prompt.
                ///   - total_tokens: The total number of tokens used by the request.
                public init(
                    prompt_tokens: Swift.Int,
                    total_tokens: Swift.Int
                ) {
                    self.prompt_tokens = prompt_tokens
                    self.total_tokens = total_tokens
                }
                public enum CodingKeys: String, CodingKey {
                    case prompt_tokens
                    case total_tokens
                }
            }
            /// The usage information for the request.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEmbeddingResponse/usage`.
            public var usage: Components.Schemas.CreateEmbeddingResponse.usagePayload
            /// Creates a new `CreateEmbeddingResponse`.
            ///
            /// - Parameters:
            ///   - data: The list of embeddings generated by the model.
            ///   - model: The name of the model used to generate the embedding.
            ///   - object: The object type, which is always "list".
            ///   - usage: The usage information for the request.
            public init(
                data: [Components.Schemas.Embedding],
                model: Swift.String,
                object: Components.Schemas.CreateEmbeddingResponse.objectPayload,
                usage: Components.Schemas.CreateEmbeddingResponse.usagePayload
            ) {
                self.data = data
                self.model = model
                self.object = object
                self.usage = usage
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case model
                case object
                case usage
            }
        }
        /// A CompletionsRunDataSource object describing a model sampling configuration.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource`.
        public struct CreateEvalCompletionsRunDataSource: Codable, Hashable, Sendable {
            /// The type of run data source. Always `completions`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case completions = "completions"
            }
            /// The type of run data source. Always `completions`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource/type`.
            public var _type: Components.Schemas.CreateEvalCompletionsRunDataSource._typePayload
            /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource/input_messages`.
            @frozen public enum input_messagesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource/input_messages/case1`.
                public struct Case1Payload: Codable, Hashable, Sendable {
                    /// The type of input messages. Always `template`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource/input_messages/case1/type`.
                    @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                        case template = "template"
                    }
                    /// The type of input messages. Always `template`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource/input_messages/case1/type`.
                    public var _type: Components.Schemas.CreateEvalCompletionsRunDataSource.input_messagesPayload.Case1Payload._typePayload
                    /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource/input_messages/case1/templatePayload`.
                    @frozen public enum templatePayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource/input_messages/case1/templatePayload/case1`.
                        case EasyInputMessage(Components.Schemas.EasyInputMessage)
                        /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource/input_messages/case1/templatePayload/case2`.
                        case EvalItem(Components.Schemas.EvalItem)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .EasyInputMessage(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .EvalItem(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .EasyInputMessage(value):
                                try value.encode(to: encoder)
                            case let .EvalItem(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// A list of chat messages forming the prompt or context. May include variable references to the "item" namespace, ie {{item.name}}.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource/input_messages/case1/template`.
                    public typealias templatePayload = [Components.Schemas.CreateEvalCompletionsRunDataSource.input_messagesPayload.Case1Payload.templatePayloadPayload]
                    /// A list of chat messages forming the prompt or context. May include variable references to the "item" namespace, ie {{item.name}}.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource/input_messages/case1/template`.
                    public var template: Components.Schemas.CreateEvalCompletionsRunDataSource.input_messagesPayload.Case1Payload.templatePayload
                    /// Creates a new `Case1Payload`.
                    ///
                    /// - Parameters:
                    ///   - _type: The type of input messages. Always `template`.
                    ///   - template: A list of chat messages forming the prompt or context. May include variable references to the "item" namespace, ie {{item.name}}.
                    public init(
                        _type: Components.Schemas.CreateEvalCompletionsRunDataSource.input_messagesPayload.Case1Payload._typePayload,
                        template: Components.Schemas.CreateEvalCompletionsRunDataSource.input_messagesPayload.Case1Payload.templatePayload
                    ) {
                        self._type = _type
                        self.template = template
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _type = "type"
                        case template
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource/input_messages/case1`.
                case case1(Components.Schemas.CreateEvalCompletionsRunDataSource.input_messagesPayload.Case1Payload)
                /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource/input_messages/case2`.
                public struct Case2Payload: Codable, Hashable, Sendable {
                    /// The type of input messages. Always `item_reference`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource/input_messages/case2/type`.
                    @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                        case item_reference = "item_reference"
                    }
                    /// The type of input messages. Always `item_reference`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource/input_messages/case2/type`.
                    public var _type: Components.Schemas.CreateEvalCompletionsRunDataSource.input_messagesPayload.Case2Payload._typePayload
                    /// A reference to a variable in the "item" namespace. Ie, "item.name"
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource/input_messages/case2/item_reference`.
                    public var item_reference: Swift.String
                    /// Creates a new `Case2Payload`.
                    ///
                    /// - Parameters:
                    ///   - _type: The type of input messages. Always `item_reference`.
                    ///   - item_reference: A reference to a variable in the "item" namespace. Ie, "item.name"
                    public init(
                        _type: Components.Schemas.CreateEvalCompletionsRunDataSource.input_messagesPayload.Case2Payload._typePayload,
                        item_reference: Swift.String
                    ) {
                        self._type = _type
                        self.item_reference = item_reference
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _type = "type"
                        case item_reference
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource/input_messages/case2`.
                case case2(Components.Schemas.CreateEvalCompletionsRunDataSource.input_messagesPayload.Case2Payload)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try value.encode(to: encoder)
                    case let .case2(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource/input_messages`.
            public var input_messages: Components.Schemas.CreateEvalCompletionsRunDataSource.input_messagesPayload?
            /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource/sampling_params`.
            public struct sampling_paramsPayload: Codable, Hashable, Sendable {
                /// A higher temperature increases randomness in the outputs.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource/sampling_params/temperature`.
                public var temperature: Swift.Double?
                /// The maximum number of tokens in the generated output.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource/sampling_params/max_completion_tokens`.
                public var max_completion_tokens: Swift.Int?
                /// An alternative to temperature for nucleus sampling; 1.0 includes all tokens.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource/sampling_params/top_p`.
                public var top_p: Swift.Double?
                /// A seed value to initialize the randomness, during sampling.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource/sampling_params/seed`.
                public var seed: Swift.Int?
                /// Creates a new `sampling_paramsPayload`.
                ///
                /// - Parameters:
                ///   - temperature: A higher temperature increases randomness in the outputs.
                ///   - max_completion_tokens: The maximum number of tokens in the generated output.
                ///   - top_p: An alternative to temperature for nucleus sampling; 1.0 includes all tokens.
                ///   - seed: A seed value to initialize the randomness, during sampling.
                public init(
                    temperature: Swift.Double? = nil,
                    max_completion_tokens: Swift.Int? = nil,
                    top_p: Swift.Double? = nil,
                    seed: Swift.Int? = nil
                ) {
                    self.temperature = temperature
                    self.max_completion_tokens = max_completion_tokens
                    self.top_p = top_p
                    self.seed = seed
                }
                public enum CodingKeys: String, CodingKey {
                    case temperature
                    case max_completion_tokens
                    case top_p
                    case seed
                }
            }
            /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource/sampling_params`.
            public var sampling_params: Components.Schemas.CreateEvalCompletionsRunDataSource.sampling_paramsPayload?
            /// The name of the model to use for generating completions (e.g. "o3-mini").
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource/model`.
            public var model: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource/source`.
            @frozen public enum sourcePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource/source/case1`.
                case EvalJsonlFileContentSource(Components.Schemas.EvalJsonlFileContentSource)
                /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource/source/case2`.
                case EvalJsonlFileIdSource(Components.Schemas.EvalJsonlFileIdSource)
                /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource/source/case3`.
                case EvalStoredCompletionsSource(Components.Schemas.EvalStoredCompletionsSource)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .EvalJsonlFileContentSource(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .EvalJsonlFileIdSource(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .EvalStoredCompletionsSource(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .EvalJsonlFileContentSource(value):
                        try value.encode(to: encoder)
                    case let .EvalJsonlFileIdSource(value):
                        try value.encode(to: encoder)
                    case let .EvalStoredCompletionsSource(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/CreateEvalCompletionsRunDataSource/source`.
            public var source: Components.Schemas.CreateEvalCompletionsRunDataSource.sourcePayload
            /// Creates a new `CreateEvalCompletionsRunDataSource`.
            ///
            /// - Parameters:
            ///   - _type: The type of run data source. Always `completions`.
            ///   - input_messages:
            ///   - sampling_params:
            ///   - model: The name of the model to use for generating completions (e.g. "o3-mini").
            ///   - source:
            public init(
                _type: Components.Schemas.CreateEvalCompletionsRunDataSource._typePayload,
                input_messages: Components.Schemas.CreateEvalCompletionsRunDataSource.input_messagesPayload? = nil,
                sampling_params: Components.Schemas.CreateEvalCompletionsRunDataSource.sampling_paramsPayload? = nil,
                model: Swift.String? = nil,
                source: Components.Schemas.CreateEvalCompletionsRunDataSource.sourcePayload
            ) {
                self._type = _type
                self.input_messages = input_messages
                self.sampling_params = sampling_params
                self.model = model
                self.source = source
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case input_messages
                case sampling_params
                case model
                case source
            }
        }
        /// A CustomDataSourceConfig object that defines the schema for the data source used for the evaluation runs.
        /// This schema is used to define the shape of the data that will be:
        /// - Used to define your testing criteria and
        /// - What data is required when creating a run
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/CreateEvalCustomDataSourceConfig`.
        public struct CreateEvalCustomDataSourceConfig: Codable, Hashable, Sendable {
            /// The type of data source. Always `custom`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalCustomDataSourceConfig/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case custom = "custom"
            }
            /// The type of data source. Always `custom`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalCustomDataSourceConfig/type`.
            public var _type: Components.Schemas.CreateEvalCustomDataSourceConfig._typePayload
            /// The json schema for each row in the data source.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalCustomDataSourceConfig/item_schema`.
            public struct item_schemaPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                /// Creates a new `item_schemaPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The json schema for each row in the data source.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalCustomDataSourceConfig/item_schema`.
            public var item_schema: Components.Schemas.CreateEvalCustomDataSourceConfig.item_schemaPayload
            /// Whether the eval should expect you to populate the sample namespace (ie, by generating responses off of your data source)
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalCustomDataSourceConfig/include_sample_schema`.
            public var include_sample_schema: Swift.Bool?
            /// Creates a new `CreateEvalCustomDataSourceConfig`.
            ///
            /// - Parameters:
            ///   - _type: The type of data source. Always `custom`.
            ///   - item_schema: The json schema for each row in the data source.
            ///   - include_sample_schema: Whether the eval should expect you to populate the sample namespace (ie, by generating responses off of your data source)
            public init(
                _type: Components.Schemas.CreateEvalCustomDataSourceConfig._typePayload,
                item_schema: Components.Schemas.CreateEvalCustomDataSourceConfig.item_schemaPayload,
                include_sample_schema: Swift.Bool? = nil
            ) {
                self._type = _type
                self.item_schema = item_schema
                self.include_sample_schema = include_sample_schema
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case item_schema
                case include_sample_schema
            }
        }
        /// A chat message that makes up the prompt or context. May include variable references to the "item" namespace, ie {{item.name}}.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateEvalItem`.
        @frozen public enum CreateEvalItem: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreateEvalItem/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// The role of the message (e.g. "system", "assistant", "user").
                ///
                /// - Remark: Generated from `#/components/schemas/CreateEvalItem/case1/role`.
                public var role: Swift.String
                /// The content of the message.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateEvalItem/case1/content`.
                public var content: Swift.String
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - role: The role of the message (e.g. "system", "assistant", "user").
                ///   - content: The content of the message.
                public init(
                    role: Swift.String,
                    content: Swift.String
                ) {
                    self.role = role
                    self.content = content
                }
                public enum CodingKeys: String, CodingKey {
                    case role
                    case content
                }
            }
            /// - Remark: Generated from `#/components/schemas/CreateEvalItem/case1`.
            case case1(Components.Schemas.CreateEvalItem.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/CreateEvalItem/case2`.
            case EvalItem(Components.Schemas.EvalItem)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .EvalItem(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .EvalItem(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// A JsonlRunDataSource object with that specifies a JSONL file that matches the eval 
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/CreateEvalJsonlRunDataSource`.
        public struct CreateEvalJsonlRunDataSource: Codable, Hashable, Sendable {
            /// The type of data source. Always `jsonl`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalJsonlRunDataSource/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case jsonl = "jsonl"
            }
            /// The type of data source. Always `jsonl`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalJsonlRunDataSource/type`.
            public var _type: Components.Schemas.CreateEvalJsonlRunDataSource._typePayload
            /// - Remark: Generated from `#/components/schemas/CreateEvalJsonlRunDataSource/source`.
            @frozen public enum sourcePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateEvalJsonlRunDataSource/source/case1`.
                case EvalJsonlFileContentSource(Components.Schemas.EvalJsonlFileContentSource)
                /// - Remark: Generated from `#/components/schemas/CreateEvalJsonlRunDataSource/source/case2`.
                case EvalJsonlFileIdSource(Components.Schemas.EvalJsonlFileIdSource)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .EvalJsonlFileContentSource(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .EvalJsonlFileIdSource(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .EvalJsonlFileContentSource(value):
                        try value.encode(to: encoder)
                    case let .EvalJsonlFileIdSource(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/CreateEvalJsonlRunDataSource/source`.
            public var source: Components.Schemas.CreateEvalJsonlRunDataSource.sourcePayload
            /// Creates a new `CreateEvalJsonlRunDataSource`.
            ///
            /// - Parameters:
            ///   - _type: The type of data source. Always `jsonl`.
            ///   - source:
            public init(
                _type: Components.Schemas.CreateEvalJsonlRunDataSource._typePayload,
                source: Components.Schemas.CreateEvalJsonlRunDataSource.sourcePayload
            ) {
                self._type = _type
                self.source = source
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case source
            }
        }
        /// A LabelModelGrader object which uses a model to assign labels to each item
        /// in the evaluation.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/CreateEvalLabelModelGrader`.
        public struct CreateEvalLabelModelGrader: Codable, Hashable, Sendable {
            /// The object type, which is always `label_model`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalLabelModelGrader/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case label_model = "label_model"
            }
            /// The object type, which is always `label_model`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalLabelModelGrader/type`.
            public var _type: Components.Schemas.CreateEvalLabelModelGrader._typePayload
            /// The name of the grader.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalLabelModelGrader/name`.
            public var name: Swift.String
            /// The model to use for the evaluation. Must support structured outputs.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalLabelModelGrader/model`.
            public var model: Swift.String
            /// A list of chat messages forming the prompt or context. May include variable references to the "item" namespace, ie {{item.name}}.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalLabelModelGrader/input`.
            public var input: [Components.Schemas.CreateEvalItem]
            /// The labels to classify to each item in the evaluation.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalLabelModelGrader/labels`.
            public var labels: [Swift.String]
            /// The labels that indicate a passing result. Must be a subset of labels.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalLabelModelGrader/passing_labels`.
            public var passing_labels: [Swift.String]
            /// Creates a new `CreateEvalLabelModelGrader`.
            ///
            /// - Parameters:
            ///   - _type: The object type, which is always `label_model`.
            ///   - name: The name of the grader.
            ///   - model: The model to use for the evaluation. Must support structured outputs.
            ///   - input: A list of chat messages forming the prompt or context. May include variable references to the "item" namespace, ie {{item.name}}.
            ///   - labels: The labels to classify to each item in the evaluation.
            ///   - passing_labels: The labels that indicate a passing result. Must be a subset of labels.
            public init(
                _type: Components.Schemas.CreateEvalLabelModelGrader._typePayload,
                name: Swift.String,
                model: Swift.String,
                input: [Components.Schemas.CreateEvalItem],
                labels: [Swift.String],
                passing_labels: [Swift.String]
            ) {
                self._type = _type
                self.name = name
                self.model = model
                self.input = input
                self.labels = labels
                self.passing_labels = passing_labels
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case name
                case model
                case input
                case labels
                case passing_labels
            }
        }
        /// A data source config which specifies the metadata property of your stored completions query.
        /// This is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/CreateEvalLogsDataSourceConfig`.
        public struct CreateEvalLogsDataSourceConfig: Codable, Hashable, Sendable {
            /// The type of data source. Always `logs`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalLogsDataSourceConfig/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case logs = "logs"
            }
            /// The type of data source. Always `logs`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalLogsDataSourceConfig/type`.
            public var _type: Components.Schemas.CreateEvalLogsDataSourceConfig._typePayload
            /// Metadata filters for the logs data source.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalLogsDataSourceConfig/metadata`.
            public struct metadataPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                /// Creates a new `metadataPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Metadata filters for the logs data source.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalLogsDataSourceConfig/metadata`.
            public var metadata: Components.Schemas.CreateEvalLogsDataSourceConfig.metadataPayload?
            /// Creates a new `CreateEvalLogsDataSourceConfig`.
            ///
            /// - Parameters:
            ///   - _type: The type of data source. Always `logs`.
            ///   - metadata: Metadata filters for the logs data source.
            public init(
                _type: Components.Schemas.CreateEvalLogsDataSourceConfig._typePayload,
                metadata: Components.Schemas.CreateEvalLogsDataSourceConfig.metadataPayload? = nil
            ) {
                self._type = _type
                self.metadata = metadata
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case metadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateEvalRequest`.
        public struct CreateEvalRequest: Codable, Hashable, Sendable {
            /// The name of the evaluation.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalRequest/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateEvalRequest/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// The configuration for the data source used for the evaluation runs.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalRequest/data_source_config`.
            @frozen public enum data_source_configPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateEvalRequest/data_source_config/case1`.
                case CreateEvalCustomDataSourceConfig(Components.Schemas.CreateEvalCustomDataSourceConfig)
                /// - Remark: Generated from `#/components/schemas/CreateEvalRequest/data_source_config/case2`.
                case CreateEvalLogsDataSourceConfig(Components.Schemas.CreateEvalLogsDataSourceConfig)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .CreateEvalCustomDataSourceConfig(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .CreateEvalLogsDataSourceConfig(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .CreateEvalCustomDataSourceConfig(value):
                        try value.encode(to: encoder)
                    case let .CreateEvalLogsDataSourceConfig(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// The configuration for the data source used for the evaluation runs.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalRequest/data_source_config`.
            public var data_source_config: Components.Schemas.CreateEvalRequest.data_source_configPayload
            /// - Remark: Generated from `#/components/schemas/CreateEvalRequest/testing_criteriaPayload`.
            @frozen public enum testing_criteriaPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateEvalRequest/testing_criteriaPayload/case1`.
                case CreateEvalLabelModelGrader(Components.Schemas.CreateEvalLabelModelGrader)
                /// - Remark: Generated from `#/components/schemas/CreateEvalRequest/testing_criteriaPayload/case2`.
                case EvalStringCheckGrader(Components.Schemas.EvalStringCheckGrader)
                /// - Remark: Generated from `#/components/schemas/CreateEvalRequest/testing_criteriaPayload/case3`.
                case EvalTextSimilarityGrader(Components.Schemas.EvalTextSimilarityGrader)
                /// - Remark: Generated from `#/components/schemas/CreateEvalRequest/testing_criteriaPayload/case4`.
                case EvalPythonGrader(Components.Schemas.EvalPythonGrader)
                /// - Remark: Generated from `#/components/schemas/CreateEvalRequest/testing_criteriaPayload/case5`.
                case EvalScoreModelGrader(Components.Schemas.EvalScoreModelGrader)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .CreateEvalLabelModelGrader(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .EvalStringCheckGrader(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .EvalTextSimilarityGrader(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .EvalPythonGrader(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .EvalScoreModelGrader(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .CreateEvalLabelModelGrader(value):
                        try value.encode(to: encoder)
                    case let .EvalStringCheckGrader(value):
                        try value.encode(to: encoder)
                    case let .EvalTextSimilarityGrader(value):
                        try value.encode(to: encoder)
                    case let .EvalPythonGrader(value):
                        try value.encode(to: encoder)
                    case let .EvalScoreModelGrader(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// A list of graders for all eval runs in this group.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalRequest/testing_criteria`.
            public typealias testing_criteriaPayload = [Components.Schemas.CreateEvalRequest.testing_criteriaPayloadPayload]
            /// A list of graders for all eval runs in this group.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalRequest/testing_criteria`.
            public var testing_criteria: Components.Schemas.CreateEvalRequest.testing_criteriaPayload
            /// Creates a new `CreateEvalRequest`.
            ///
            /// - Parameters:
            ///   - name: The name of the evaluation.
            ///   - metadata:
            ///   - data_source_config: The configuration for the data source used for the evaluation runs.
            ///   - testing_criteria: A list of graders for all eval runs in this group.
            public init(
                name: Swift.String? = nil,
                metadata: Components.Schemas.Metadata? = nil,
                data_source_config: Components.Schemas.CreateEvalRequest.data_source_configPayload,
                testing_criteria: Components.Schemas.CreateEvalRequest.testing_criteriaPayload
            ) {
                self.name = name
                self.metadata = metadata
                self.data_source_config = data_source_config
                self.testing_criteria = testing_criteria
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case metadata
                case data_source_config
                case testing_criteria
            }
        }
        /// A ResponsesRunDataSource object describing a model sampling configuration.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource`.
        public struct CreateEvalResponsesRunDataSource: Codable, Hashable, Sendable {
            /// The type of run data source. Always `completions`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case completions = "completions"
            }
            /// The type of run data source. Always `completions`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/type`.
            public var _type: Components.Schemas.CreateEvalResponsesRunDataSource._typePayload
            /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/input_messages`.
            @frozen public enum input_messagesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/input_messages/case1`.
                public struct Case1Payload: Codable, Hashable, Sendable {
                    /// The type of input messages. Always `template`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/input_messages/case1/type`.
                    @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                        case template = "template"
                    }
                    /// The type of input messages. Always `template`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/input_messages/case1/type`.
                    public var _type: Components.Schemas.CreateEvalResponsesRunDataSource.input_messagesPayload.Case1Payload._typePayload
                    /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/input_messages/case1/templatePayload`.
                    @frozen public enum templatePayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/input_messages/case1/templatePayload/case1`.
                        public struct Case1Payload: Codable, Hashable, Sendable {
                            /// The role of the message (e.g. "system", "assistant", "user").
                            ///
                            /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/input_messages/case1/templatePayload/case1/role`.
                            public var role: Swift.String
                            /// The content of the message.
                            ///
                            /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/input_messages/case1/templatePayload/case1/content`.
                            public var content: Swift.String
                            /// Creates a new `Case1Payload`.
                            ///
                            /// - Parameters:
                            ///   - role: The role of the message (e.g. "system", "assistant", "user").
                            ///   - content: The content of the message.
                            public init(
                                role: Swift.String,
                                content: Swift.String
                            ) {
                                self.role = role
                                self.content = content
                            }
                            public enum CodingKeys: String, CodingKey {
                                case role
                                case content
                            }
                        }
                        /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/input_messages/case1/templatePayload/case1`.
                        case case1(Components.Schemas.CreateEvalResponsesRunDataSource.input_messagesPayload.Case1Payload.templatePayloadPayload.Case1Payload)
                        /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/input_messages/case1/templatePayload/case2`.
                        case EvalItem(Components.Schemas.EvalItem)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .EvalItem(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try value.encode(to: encoder)
                            case let .EvalItem(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// A list of chat messages forming the prompt or context. May include variable references to the "item" namespace, ie {{item.name}}.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/input_messages/case1/template`.
                    public typealias templatePayload = [Components.Schemas.CreateEvalResponsesRunDataSource.input_messagesPayload.Case1Payload.templatePayloadPayload]
                    /// A list of chat messages forming the prompt or context. May include variable references to the "item" namespace, ie {{item.name}}.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/input_messages/case1/template`.
                    public var template: Components.Schemas.CreateEvalResponsesRunDataSource.input_messagesPayload.Case1Payload.templatePayload
                    /// Creates a new `Case1Payload`.
                    ///
                    /// - Parameters:
                    ///   - _type: The type of input messages. Always `template`.
                    ///   - template: A list of chat messages forming the prompt or context. May include variable references to the "item" namespace, ie {{item.name}}.
                    public init(
                        _type: Components.Schemas.CreateEvalResponsesRunDataSource.input_messagesPayload.Case1Payload._typePayload,
                        template: Components.Schemas.CreateEvalResponsesRunDataSource.input_messagesPayload.Case1Payload.templatePayload
                    ) {
                        self._type = _type
                        self.template = template
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _type = "type"
                        case template
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/input_messages/case1`.
                case case1(Components.Schemas.CreateEvalResponsesRunDataSource.input_messagesPayload.Case1Payload)
                /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/input_messages/case2`.
                public struct Case2Payload: Codable, Hashable, Sendable {
                    /// The type of input messages. Always `item_reference`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/input_messages/case2/type`.
                    @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                        case item_reference = "item_reference"
                    }
                    /// The type of input messages. Always `item_reference`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/input_messages/case2/type`.
                    public var _type: Components.Schemas.CreateEvalResponsesRunDataSource.input_messagesPayload.Case2Payload._typePayload
                    /// A reference to a variable in the "item" namespace. Ie, "item.name"
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/input_messages/case2/item_reference`.
                    public var item_reference: Swift.String
                    /// Creates a new `Case2Payload`.
                    ///
                    /// - Parameters:
                    ///   - _type: The type of input messages. Always `item_reference`.
                    ///   - item_reference: A reference to a variable in the "item" namespace. Ie, "item.name"
                    public init(
                        _type: Components.Schemas.CreateEvalResponsesRunDataSource.input_messagesPayload.Case2Payload._typePayload,
                        item_reference: Swift.String
                    ) {
                        self._type = _type
                        self.item_reference = item_reference
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _type = "type"
                        case item_reference
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/input_messages/case2`.
                case case2(Components.Schemas.CreateEvalResponsesRunDataSource.input_messagesPayload.Case2Payload)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try value.encode(to: encoder)
                    case let .case2(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/input_messages`.
            public var input_messages: Components.Schemas.CreateEvalResponsesRunDataSource.input_messagesPayload?
            /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/sampling_params`.
            public struct sampling_paramsPayload: Codable, Hashable, Sendable {
                /// A higher temperature increases randomness in the outputs.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/sampling_params/temperature`.
                public var temperature: Swift.Double?
                /// The maximum number of tokens in the generated output.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/sampling_params/max_completion_tokens`.
                public var max_completion_tokens: Swift.Int?
                /// An alternative to temperature for nucleus sampling; 1.0 includes all tokens.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/sampling_params/top_p`.
                public var top_p: Swift.Double?
                /// A seed value to initialize the randomness, during sampling.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/sampling_params/seed`.
                public var seed: Swift.Int?
                /// Creates a new `sampling_paramsPayload`.
                ///
                /// - Parameters:
                ///   - temperature: A higher temperature increases randomness in the outputs.
                ///   - max_completion_tokens: The maximum number of tokens in the generated output.
                ///   - top_p: An alternative to temperature for nucleus sampling; 1.0 includes all tokens.
                ///   - seed: A seed value to initialize the randomness, during sampling.
                public init(
                    temperature: Swift.Double? = nil,
                    max_completion_tokens: Swift.Int? = nil,
                    top_p: Swift.Double? = nil,
                    seed: Swift.Int? = nil
                ) {
                    self.temperature = temperature
                    self.max_completion_tokens = max_completion_tokens
                    self.top_p = top_p
                    self.seed = seed
                }
                public enum CodingKeys: String, CodingKey {
                    case temperature
                    case max_completion_tokens
                    case top_p
                    case seed
                }
            }
            /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/sampling_params`.
            public var sampling_params: Components.Schemas.CreateEvalResponsesRunDataSource.sampling_paramsPayload?
            /// The name of the model to use for generating completions (e.g. "o3-mini").
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/model`.
            public var model: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/source`.
            @frozen public enum sourcePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/source/case1`.
                case EvalJsonlFileContentSource(Components.Schemas.EvalJsonlFileContentSource)
                /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/source/case2`.
                case EvalJsonlFileIdSource(Components.Schemas.EvalJsonlFileIdSource)
                /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/source/case3`.
                case EvalResponsesSource(Components.Schemas.EvalResponsesSource)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .EvalJsonlFileContentSource(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .EvalJsonlFileIdSource(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .EvalResponsesSource(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .EvalJsonlFileContentSource(value):
                        try value.encode(to: encoder)
                    case let .EvalJsonlFileIdSource(value):
                        try value.encode(to: encoder)
                    case let .EvalResponsesSource(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/CreateEvalResponsesRunDataSource/source`.
            public var source: Components.Schemas.CreateEvalResponsesRunDataSource.sourcePayload
            /// Creates a new `CreateEvalResponsesRunDataSource`.
            ///
            /// - Parameters:
            ///   - _type: The type of run data source. Always `completions`.
            ///   - input_messages:
            ///   - sampling_params:
            ///   - model: The name of the model to use for generating completions (e.g. "o3-mini").
            ///   - source:
            public init(
                _type: Components.Schemas.CreateEvalResponsesRunDataSource._typePayload,
                input_messages: Components.Schemas.CreateEvalResponsesRunDataSource.input_messagesPayload? = nil,
                sampling_params: Components.Schemas.CreateEvalResponsesRunDataSource.sampling_paramsPayload? = nil,
                model: Swift.String? = nil,
                source: Components.Schemas.CreateEvalResponsesRunDataSource.sourcePayload
            ) {
                self._type = _type
                self.input_messages = input_messages
                self.sampling_params = sampling_params
                self.model = model
                self.source = source
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case input_messages
                case sampling_params
                case model
                case source
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateEvalRunRequest`.
        public struct CreateEvalRunRequest: Codable, Hashable, Sendable {
            /// The name of the run.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalRunRequest/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateEvalRunRequest/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// Details about the run's data source.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalRunRequest/data_source`.
            @frozen public enum data_sourcePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateEvalRunRequest/data_source/case1`.
                case CreateEvalJsonlRunDataSource(Components.Schemas.CreateEvalJsonlRunDataSource)
                /// - Remark: Generated from `#/components/schemas/CreateEvalRunRequest/data_source/case2`.
                case CreateEvalCompletionsRunDataSource(Components.Schemas.CreateEvalCompletionsRunDataSource)
                /// - Remark: Generated from `#/components/schemas/CreateEvalRunRequest/data_source/case3`.
                case CreateEvalResponsesRunDataSource(Components.Schemas.CreateEvalResponsesRunDataSource)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .CreateEvalJsonlRunDataSource(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .CreateEvalCompletionsRunDataSource(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .CreateEvalResponsesRunDataSource(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .CreateEvalJsonlRunDataSource(value):
                        try value.encode(to: encoder)
                    case let .CreateEvalCompletionsRunDataSource(value):
                        try value.encode(to: encoder)
                    case let .CreateEvalResponsesRunDataSource(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// Details about the run's data source.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateEvalRunRequest/data_source`.
            public var data_source: Components.Schemas.CreateEvalRunRequest.data_sourcePayload
            /// Creates a new `CreateEvalRunRequest`.
            ///
            /// - Parameters:
            ///   - name: The name of the run.
            ///   - metadata:
            ///   - data_source: Details about the run's data source.
            public init(
                name: Swift.String? = nil,
                metadata: Components.Schemas.Metadata? = nil,
                data_source: Components.Schemas.CreateEvalRunRequest.data_sourcePayload
            ) {
                self.name = name
                self.metadata = metadata
                self.data_source = data_source
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case metadata
                case data_source
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateFileRequest`.
        @frozen public enum CreateFileRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/schemas/CreateFileRequest/file`.
            public struct filePayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `filePayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case file(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateFileRequest.filePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateFileRequest/purpose`.
            public struct purposePayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `purposePayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case purpose(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateFileRequest.purposePayload>)
        }
        /// - Remark: Generated from `#/components/schemas/CreateFineTuningCheckpointPermissionRequest`.
        public struct CreateFineTuningCheckpointPermissionRequest: Codable, Hashable, Sendable {
            /// The project identifiers to grant access to.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateFineTuningCheckpointPermissionRequest/project_ids`.
            public var project_ids: [Swift.String]
            /// Creates a new `CreateFineTuningCheckpointPermissionRequest`.
            ///
            /// - Parameters:
            ///   - project_ids: The project identifiers to grant access to.
            public init(project_ids: [Swift.String]) {
                self.project_ids = project_ids
            }
            public enum CodingKeys: String, CodingKey {
                case project_ids
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                project_ids = try container.decode(
                    [Swift.String].self,
                    forKey: .project_ids
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "project_ids"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest`.
        public struct CreateFineTuningJobRequest: Codable, Hashable, Sendable {
            /// The name of the model to fine-tune. You can select one of the
            /// [supported models](/docs/guides/fine-tuning#which-models-can-be-fine-tuned).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/model`.
            public struct modelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/model/value1`.
                public var value1: Swift.String?
                /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/model/value2`.
                @frozen public enum Value2Payload: String, Codable, Hashable, Sendable {
                    case babbage_hyphen_002 = "babbage-002"
                    case davinci_hyphen_002 = "davinci-002"
                    case gpt_hyphen_3_period_5_hyphen_turbo = "gpt-3.5-turbo"
                    case gpt_hyphen_4o_hyphen_mini = "gpt-4o-mini"
                }
                /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/model/value2`.
                public var value2: Components.Schemas.CreateFineTuningJobRequest.modelPayload.Value2Payload?
                /// Creates a new `modelPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Swift.String? = nil,
                    value2: Components.Schemas.CreateFineTuningJobRequest.modelPayload.Value2Payload? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            value1,
                            value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        value1,
                        value2
                    ])
                }
            }
            /// The name of the model to fine-tune. You can select one of the
            /// [supported models](/docs/guides/fine-tuning#which-models-can-be-fine-tuned).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/model`.
            public var model: Components.Schemas.CreateFineTuningJobRequest.modelPayload
            /// The ID of an uploaded file that contains training data.
            ///
            /// See [upload file](/docs/api-reference/files/create) for how to upload a file.
            ///
            /// Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.
            ///
            /// The contents of the file should differ depending on if the model uses the [chat](/docs/api-reference/fine-tuning/chat-input), [completions](/docs/api-reference/fine-tuning/completions-input) format, or if the fine-tuning method uses the [preference](/docs/api-reference/fine-tuning/preference-input) format.
            ///
            /// See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/training_file`.
            public var training_file: Swift.String
            /// The hyperparameters used for the fine-tuning job.
            /// This value is now deprecated in favor of `method`, and should be passed in under the `method` parameter.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters`.
            @available(*, deprecated)
            public struct hyperparametersPayload: Codable, Hashable, Sendable {
                /// Number of examples in each batch. A larger batch size means that model parameters
                /// are updated less frequently, but with lower variance.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters/batch_size`.
                @frozen public enum batch_sizePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters/batch_size/case1`.
                    @frozen public enum Case1Payload: String, Codable, Hashable, Sendable {
                        case auto = "auto"
                    }
                    /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters/batch_size/case1`.
                    case case1(Components.Schemas.CreateFineTuningJobRequest.hyperparametersPayload.batch_sizePayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters/batch_size/case2`.
                    case case2(Swift.Int)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// Number of examples in each batch. A larger batch size means that model parameters
                /// are updated less frequently, but with lower variance.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters/batch_size`.
                public var batch_size: Components.Schemas.CreateFineTuningJobRequest.hyperparametersPayload.batch_sizePayload?
                /// Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
                /// overfitting.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters/learning_rate_multiplier`.
                @frozen public enum learning_rate_multiplierPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters/learning_rate_multiplier/case1`.
                    @frozen public enum Case1Payload: String, Codable, Hashable, Sendable {
                        case auto = "auto"
                    }
                    /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters/learning_rate_multiplier/case1`.
                    case case1(Components.Schemas.CreateFineTuningJobRequest.hyperparametersPayload.learning_rate_multiplierPayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters/learning_rate_multiplier/case2`.
                    case case2(Swift.Double)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
                /// overfitting.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters/learning_rate_multiplier`.
                public var learning_rate_multiplier: Components.Schemas.CreateFineTuningJobRequest.hyperparametersPayload.learning_rate_multiplierPayload?
                /// The number of epochs to train the model for. An epoch refers to one full cycle
                /// through the training dataset.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters/n_epochs`.
                @frozen public enum n_epochsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters/n_epochs/case1`.
                    @frozen public enum Case1Payload: String, Codable, Hashable, Sendable {
                        case auto = "auto"
                    }
                    /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters/n_epochs/case1`.
                    case case1(Components.Schemas.CreateFineTuningJobRequest.hyperparametersPayload.n_epochsPayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters/n_epochs/case2`.
                    case case2(Swift.Int)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// The number of epochs to train the model for. An epoch refers to one full cycle
                /// through the training dataset.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters/n_epochs`.
                public var n_epochs: Components.Schemas.CreateFineTuningJobRequest.hyperparametersPayload.n_epochsPayload?
                /// Creates a new `hyperparametersPayload`.
                ///
                /// - Parameters:
                ///   - batch_size: Number of examples in each batch. A larger batch size means that model parameters
                ///   - learning_rate_multiplier: Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
                ///   - n_epochs: The number of epochs to train the model for. An epoch refers to one full cycle
                public init(
                    batch_size: Components.Schemas.CreateFineTuningJobRequest.hyperparametersPayload.batch_sizePayload? = nil,
                    learning_rate_multiplier: Components.Schemas.CreateFineTuningJobRequest.hyperparametersPayload.learning_rate_multiplierPayload? = nil,
                    n_epochs: Components.Schemas.CreateFineTuningJobRequest.hyperparametersPayload.n_epochsPayload? = nil
                ) {
                    self.batch_size = batch_size
                    self.learning_rate_multiplier = learning_rate_multiplier
                    self.n_epochs = n_epochs
                }
                public enum CodingKeys: String, CodingKey {
                    case batch_size
                    case learning_rate_multiplier
                    case n_epochs
                }
            }
            /// The hyperparameters used for the fine-tuning job.
            /// This value is now deprecated in favor of `method`, and should be passed in under the `method` parameter.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/hyperparameters`.
            @available(*, deprecated)
            public var hyperparameters: Components.Schemas.CreateFineTuningJobRequest.hyperparametersPayload?
            /// A string of up to 64 characters that will be added to your fine-tuned model name.
            ///
            /// For example, a `suffix` of "custom-model-name" would produce a model name like `ft:gpt-4o-mini:openai:custom-model-name:7p4lURel`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/suffix`.
            public var suffix: Swift.String?
            /// The ID of an uploaded file that contains validation data.
            ///
            /// If you provide this file, the data is used to generate validation
            /// metrics periodically during fine-tuning. These metrics can be viewed in
            /// the fine-tuning results file.
            /// The same data should not be present in both train and validation files.
            ///
            /// Your dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.
            ///
            /// See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/validation_file`.
            public var validation_file: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/integrationsPayload`.
            public struct integrationsPayloadPayload: Codable, Hashable, Sendable {
                /// The type of integration to enable. Currently, only "wandb" (Weights and Biases) is supported.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/integrationsPayload/type`.
                @frozen public enum _typePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/integrationsPayload/type/case1`.
                    @frozen public enum Case1Payload: String, Codable, Hashable, Sendable {
                        case wandb = "wandb"
                    }
                    /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/integrationsPayload/type/case1`.
                    case case1(Components.Schemas.CreateFineTuningJobRequest.integrationsPayloadPayload._typePayload.Case1Payload)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// The type of integration to enable. Currently, only "wandb" (Weights and Biases) is supported.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/integrationsPayload/type`.
                public var _type: Components.Schemas.CreateFineTuningJobRequest.integrationsPayloadPayload._typePayload
                /// The settings for your integration with Weights and Biases. This payload specifies the project that
                /// metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags
                /// to your run, and set a default entity (team, username, etc) to be associated with your run.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/integrationsPayload/wandb`.
                public struct wandbPayload: Codable, Hashable, Sendable {
                    /// The name of the project that the new run will be created under.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/integrationsPayload/wandb/project`.
                    public var project: Swift.String
                    /// A display name to set for the run. If not set, we will use the Job ID as the name.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/integrationsPayload/wandb/name`.
                    public var name: Swift.String?
                    /// The entity to use for the run. This allows you to set the team or username of the WandB user that you would
                    /// like associated with the run. If not set, the default entity for the registered WandB API key is used.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/integrationsPayload/wandb/entity`.
                    public var entity: Swift.String?
                    /// A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some
                    /// default tags are generated by OpenAI: "openai/finetune", "openai/{base-model}", "openai/{ftjob-abcdef}".
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/integrationsPayload/wandb/tags`.
                    public var tags: [Swift.String]?
                    /// Creates a new `wandbPayload`.
                    ///
                    /// - Parameters:
                    ///   - project: The name of the project that the new run will be created under.
                    ///   - name: A display name to set for the run. If not set, we will use the Job ID as the name.
                    ///   - entity: The entity to use for the run. This allows you to set the team or username of the WandB user that you would
                    ///   - tags: A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some
                    public init(
                        project: Swift.String,
                        name: Swift.String? = nil,
                        entity: Swift.String? = nil,
                        tags: [Swift.String]? = nil
                    ) {
                        self.project = project
                        self.name = name
                        self.entity = entity
                        self.tags = tags
                    }
                    public enum CodingKeys: String, CodingKey {
                        case project
                        case name
                        case entity
                        case tags
                    }
                }
                /// The settings for your integration with Weights and Biases. This payload specifies the project that
                /// metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags
                /// to your run, and set a default entity (team, username, etc) to be associated with your run.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/integrationsPayload/wandb`.
                public var wandb: Components.Schemas.CreateFineTuningJobRequest.integrationsPayloadPayload.wandbPayload
                /// Creates a new `integrationsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - _type: The type of integration to enable. Currently, only "wandb" (Weights and Biases) is supported.
                ///   - wandb: The settings for your integration with Weights and Biases. This payload specifies the project that
                public init(
                    _type: Components.Schemas.CreateFineTuningJobRequest.integrationsPayloadPayload._typePayload,
                    wandb: Components.Schemas.CreateFineTuningJobRequest.integrationsPayloadPayload.wandbPayload
                ) {
                    self._type = _type
                    self.wandb = wandb
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case wandb
                }
            }
            /// A list of integrations to enable for your fine-tuning job.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/integrations`.
            public typealias integrationsPayload = [Components.Schemas.CreateFineTuningJobRequest.integrationsPayloadPayload]
            /// A list of integrations to enable for your fine-tuning job.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/integrations`.
            public var integrations: Components.Schemas.CreateFineTuningJobRequest.integrationsPayload?
            /// The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases.
            /// If a seed is not specified, one will be generated for you.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/seed`.
            public var seed: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/method`.
            public var method: Components.Schemas.FineTuneMethod?
            /// - Remark: Generated from `#/components/schemas/CreateFineTuningJobRequest/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// Creates a new `CreateFineTuningJobRequest`.
            ///
            /// - Parameters:
            ///   - model: The name of the model to fine-tune. You can select one of the
            ///   - training_file: The ID of an uploaded file that contains training data.
            ///   - hyperparameters: The hyperparameters used for the fine-tuning job.
            ///   - suffix: A string of up to 64 characters that will be added to your fine-tuned model name.
            ///   - validation_file: The ID of an uploaded file that contains validation data.
            ///   - integrations: A list of integrations to enable for your fine-tuning job.
            ///   - seed: The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases.
            ///   - method:
            ///   - metadata:
            public init(
                model: Components.Schemas.CreateFineTuningJobRequest.modelPayload,
                training_file: Swift.String,
                hyperparameters: Components.Schemas.CreateFineTuningJobRequest.hyperparametersPayload? = nil,
                suffix: Swift.String? = nil,
                validation_file: Swift.String? = nil,
                integrations: Components.Schemas.CreateFineTuningJobRequest.integrationsPayload? = nil,
                seed: Swift.Int? = nil,
                method: Components.Schemas.FineTuneMethod? = nil,
                metadata: Components.Schemas.Metadata? = nil
            ) {
                self.model = model
                self.training_file = training_file
                self.hyperparameters = hyperparameters
                self.suffix = suffix
                self.validation_file = validation_file
                self.integrations = integrations
                self.seed = seed
                self.method = method
                self.metadata = metadata
            }
            public enum CodingKeys: String, CodingKey {
                case model
                case training_file
                case hyperparameters
                case suffix
                case validation_file
                case integrations
                case seed
                case method
                case metadata
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateImageEditRequest`.
        @frozen public enum CreateImageEditRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/schemas/CreateImageEditRequest/image`.
            public struct imagePayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `imagePayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case image(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageEditRequest.imagePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageEditRequest/prompt`.
            public struct promptPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `promptPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case prompt(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageEditRequest.promptPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageEditRequest/mask`.
            public struct maskPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `maskPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case mask(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageEditRequest.maskPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageEditRequest/model`.
            public struct modelPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `modelPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case model(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageEditRequest.modelPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageEditRequest/n`.
            public struct nPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `nPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case n(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageEditRequest.nPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageEditRequest/size`.
            public struct sizePayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `sizePayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case size(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageEditRequest.sizePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageEditRequest/response_format`.
            public struct response_formatPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `response_formatPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case response_format(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageEditRequest.response_formatPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageEditRequest/user`.
            public struct userPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `userPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case user(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageEditRequest.userPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageEditRequest/quality`.
            public struct qualityPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `qualityPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case quality(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageEditRequest.qualityPayload>)
            case undocumented(OpenAPIRuntime.MultipartRawPart)
        }
        /// - Remark: Generated from `#/components/schemas/CreateImageRequest`.
        public struct CreateImageRequest: Codable, Hashable, Sendable {
            /// A text description of the desired image(s). The maximum length is 32000 characters for `gpt-image-1`, 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/prompt`.
            public var prompt: Swift.String
            /// The model to use for image generation. One of `dall-e-2`, `dall-e-3`, or `gpt-image-1`. Defaults to `dall-e-2` unless a parameter specific to `gpt-image-1` is used.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/model`.
            public struct modelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateImageRequest/model/value1`.
                public var value1: Swift.String?
                /// - Remark: Generated from `#/components/schemas/CreateImageRequest/model/value2`.
                @frozen public enum Value2Payload: String, Codable, Hashable, Sendable {
                    case dall_hyphen_e_hyphen_2 = "dall-e-2"
                    case dall_hyphen_e_hyphen_3 = "dall-e-3"
                    case gpt_hyphen_image_hyphen_1 = "gpt-image-1"
                }
                /// - Remark: Generated from `#/components/schemas/CreateImageRequest/model/value2`.
                public var value2: Components.Schemas.CreateImageRequest.modelPayload.Value2Payload?
                /// Creates a new `modelPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Swift.String? = nil,
                    value2: Components.Schemas.CreateImageRequest.modelPayload.Value2Payload? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            value1,
                            value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        value1,
                        value2
                    ])
                }
            }
            /// The model to use for image generation. One of `dall-e-2`, `dall-e-3`, or `gpt-image-1`. Defaults to `dall-e-2` unless a parameter specific to `gpt-image-1` is used.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/model`.
            public var model: Components.Schemas.CreateImageRequest.modelPayload?
            /// The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/n`.
            public var n: Swift.Int?
            /// The quality of the image that will be generated. 
            ///
            /// - `auto` (default value) will automatically select the best quality for the given model.
            /// - `high`, `medium` and `low` are supported for `gpt-image-1`.
            /// - `hd` and `standard` are supported for `dall-e-3`.
            /// - `standard` is the only option for `dall-e-2`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/quality`.
            @frozen public enum qualityPayload: String, Codable, Hashable, Sendable {
                case standard = "standard"
                case hd = "hd"
                case low = "low"
                case medium = "medium"
                case high = "high"
                case auto = "auto"
            }
            /// The quality of the image that will be generated. 
            ///
            /// - `auto` (default value) will automatically select the best quality for the given model.
            /// - `high`, `medium` and `low` are supported for `gpt-image-1`.
            /// - `hd` and `standard` are supported for `dall-e-3`.
            /// - `standard` is the only option for `dall-e-2`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/quality`.
            public var quality: Components.Schemas.CreateImageRequest.qualityPayload?
            /// The format in which generated images with `dall-e-2` and `dall-e-3` are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated. This parameter isn't supported for `gpt-image-1` which will always return base64-encoded images.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/response_format`.
            @frozen public enum response_formatPayload: String, Codable, Hashable, Sendable {
                case url = "url"
                case b64_json = "b64_json"
            }
            /// The format in which generated images with `dall-e-2` and `dall-e-3` are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated. This parameter isn't supported for `gpt-image-1` which will always return base64-encoded images.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/response_format`.
            public var response_format: Components.Schemas.CreateImageRequest.response_formatPayload?
            /// The format in which the generated images are returned. This parameter is only supported for `gpt-image-1`. Must be one of `png`, `jpeg`, or `webp`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/output_format`.
            @frozen public enum output_formatPayload: String, Codable, Hashable, Sendable {
                case png = "png"
                case jpeg = "jpeg"
                case webp = "webp"
            }
            /// The format in which the generated images are returned. This parameter is only supported for `gpt-image-1`. Must be one of `png`, `jpeg`, or `webp`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/output_format`.
            public var output_format: Components.Schemas.CreateImageRequest.output_formatPayload?
            /// The compression level (0-100%) for the generated images. This parameter is only supported for `gpt-image-1` with the `webp` or `jpeg` output formats, and defaults to 100.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/output_compression`.
            public var output_compression: Swift.Int?
            /// The size of the generated images. Must be one of `1024x1024`, `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value) for `gpt-image-1`, one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`, and one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/size`.
            @frozen public enum sizePayload: String, Codable, Hashable, Sendable {
                case auto = "auto"
                case _1024x1024 = "1024x1024"
                case _1536x1024 = "1536x1024"
                case _1024x1536 = "1024x1536"
                case _256x256 = "256x256"
                case _512x512 = "512x512"
                case _1792x1024 = "1792x1024"
                case _1024x1792 = "1024x1792"
            }
            /// The size of the generated images. Must be one of `1024x1024`, `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value) for `gpt-image-1`, one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`, and one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/size`.
            public var size: Components.Schemas.CreateImageRequest.sizePayload?
            /// Control the content-moderation level for images generated by `gpt-image-1`. Must be either `low` for less restrictive filtering or `auto` (default value).
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/moderation`.
            @frozen public enum moderationPayload: String, Codable, Hashable, Sendable {
                case low = "low"
                case auto = "auto"
            }
            /// Control the content-moderation level for images generated by `gpt-image-1`. Must be either `low` for less restrictive filtering or `auto` (default value).
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/moderation`.
            public var moderation: Components.Schemas.CreateImageRequest.moderationPayload?
            /// Allows to set transparency for the background of the generated image(s). 
            /// This parameter is only supported for `gpt-image-1`. Must be one of 
            /// `transparent`, `opaque` or `auto` (default value). When `auto` is used, the 
            /// model will automatically determine the best background for the image.
            ///
            /// If `transparent`, the output format needs to support transparency, so it 
            /// should be set to either `png` (default value) or `webp`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/background`.
            @frozen public enum backgroundPayload: String, Codable, Hashable, Sendable {
                case transparent = "transparent"
                case opaque = "opaque"
                case auto = "auto"
            }
            /// Allows to set transparency for the background of the generated image(s). 
            /// This parameter is only supported for `gpt-image-1`. Must be one of 
            /// `transparent`, `opaque` or `auto` (default value). When `auto` is used, the 
            /// model will automatically determine the best background for the image.
            ///
            /// If `transparent`, the output format needs to support transparency, so it 
            /// should be set to either `png` (default value) or `webp`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/background`.
            public var background: Components.Schemas.CreateImageRequest.backgroundPayload?
            /// The style of the generated images. This parameter is only supported for `dall-e-3`. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/style`.
            @frozen public enum stylePayload: String, Codable, Hashable, Sendable {
                case vivid = "vivid"
                case natural = "natural"
            }
            /// The style of the generated images. This parameter is only supported for `dall-e-3`. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/style`.
            public var style: Components.Schemas.CreateImageRequest.stylePayload?
            /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/user`.
            public var user: Swift.String?
            /// Creates a new `CreateImageRequest`.
            ///
            /// - Parameters:
            ///   - prompt: A text description of the desired image(s). The maximum length is 32000 characters for `gpt-image-1`, 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.
            ///   - model: The model to use for image generation. One of `dall-e-2`, `dall-e-3`, or `gpt-image-1`. Defaults to `dall-e-2` unless a parameter specific to `gpt-image-1` is used.
            ///   - n: The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
            ///   - quality: The quality of the image that will be generated. 
            ///   - response_format: The format in which generated images with `dall-e-2` and `dall-e-3` are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated. This parameter isn't supported for `gpt-image-1` which will always return base64-encoded images.
            ///   - output_format: The format in which the generated images are returned. This parameter is only supported for `gpt-image-1`. Must be one of `png`, `jpeg`, or `webp`.
            ///   - output_compression: The compression level (0-100%) for the generated images. This parameter is only supported for `gpt-image-1` with the `webp` or `jpeg` output formats, and defaults to 100.
            ///   - size: The size of the generated images. Must be one of `1024x1024`, `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value) for `gpt-image-1`, one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`, and one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3`.
            ///   - moderation: Control the content-moderation level for images generated by `gpt-image-1`. Must be either `low` for less restrictive filtering or `auto` (default value).
            ///   - background: Allows to set transparency for the background of the generated image(s). 
            ///   - style: The style of the generated images. This parameter is only supported for `dall-e-3`. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images.
            ///   - user: A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
            public init(
                prompt: Swift.String,
                model: Components.Schemas.CreateImageRequest.modelPayload? = nil,
                n: Swift.Int? = nil,
                quality: Components.Schemas.CreateImageRequest.qualityPayload? = nil,
                response_format: Components.Schemas.CreateImageRequest.response_formatPayload? = nil,
                output_format: Components.Schemas.CreateImageRequest.output_formatPayload? = nil,
                output_compression: Swift.Int? = nil,
                size: Components.Schemas.CreateImageRequest.sizePayload? = nil,
                moderation: Components.Schemas.CreateImageRequest.moderationPayload? = nil,
                background: Components.Schemas.CreateImageRequest.backgroundPayload? = nil,
                style: Components.Schemas.CreateImageRequest.stylePayload? = nil,
                user: Swift.String? = nil
            ) {
                self.prompt = prompt
                self.model = model
                self.n = n
                self.quality = quality
                self.response_format = response_format
                self.output_format = output_format
                self.output_compression = output_compression
                self.size = size
                self.moderation = moderation
                self.background = background
                self.style = style
                self.user = user
            }
            public enum CodingKeys: String, CodingKey {
                case prompt
                case model
                case n
                case quality
                case response_format
                case output_format
                case output_compression
                case size
                case moderation
                case background
                case style
                case user
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateImageVariationRequest`.
        @frozen public enum CreateImageVariationRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/schemas/CreateImageVariationRequest/image`.
            public struct imagePayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `imagePayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case image(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageVariationRequest.imagePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageVariationRequest/model`.
            public struct modelPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `modelPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case model(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageVariationRequest.modelPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageVariationRequest/n`.
            public struct nPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `nPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case n(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageVariationRequest.nPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageVariationRequest/response_format`.
            public struct response_formatPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `response_formatPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case response_format(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageVariationRequest.response_formatPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageVariationRequest/size`.
            public struct sizePayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `sizePayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case size(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageVariationRequest.sizePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageVariationRequest/user`.
            public struct userPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `userPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case user(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageVariationRequest.userPayload>)
            case undocumented(OpenAPIRuntime.MultipartRawPart)
        }
        /// - Remark: Generated from `#/components/schemas/CreateMessageRequest`.
        public struct CreateMessageRequest: Codable, Hashable, Sendable {
            /// The role of the entity that is creating the message. Allowed values include:
            /// - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.
            /// - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/role`.
            @frozen public enum rolePayload: String, Codable, Hashable, Sendable {
                case user = "user"
                case assistant = "assistant"
            }
            /// The role of the entity that is creating the message. Allowed values include:
            /// - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.
            /// - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/role`.
            public var role: Components.Schemas.CreateMessageRequest.rolePayload
            /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/content`.
            @frozen public enum contentPayload: Codable, Hashable, Sendable {
                /// The text contents of the message.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/content/case1`.
                case case1(Swift.String)
                /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/content/Case2Payload`.
                @frozen public enum Case2PayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/content/Case2Payload/case1`.
                    case MessageContentImageFileObject(Components.Schemas.MessageContentImageFileObject)
                    /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/content/Case2Payload/case2`.
                    case MessageContentImageUrlObject(Components.Schemas.MessageContentImageUrlObject)
                    /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/content/Case2Payload/case3`.
                    case MessageRequestContentTextObject(Components.Schemas.MessageRequestContentTextObject)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .MessageContentImageFileObject(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .MessageContentImageUrlObject(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .MessageRequestContentTextObject(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .MessageContentImageFileObject(value):
                            try value.encode(to: encoder)
                        case let .MessageContentImageUrlObject(value):
                            try value.encode(to: encoder)
                        case let .MessageRequestContentTextObject(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// An array of content parts with a defined type, each can be of type `text` or images can be passed with `image_url` or `image_file`. Image types are only supported on [Vision-compatible models](/docs/models).
                ///
                /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/content/case2`.
                public typealias Case2Payload = [Components.Schemas.CreateMessageRequest.contentPayload.Case2PayloadPayload]
                /// An array of content parts with a defined type, each can be of type `text` or images can be passed with `image_url` or `image_file`. Image types are only supported on [Vision-compatible models](/docs/models).
                ///
                /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/content/case2`.
                case case2(Components.Schemas.CreateMessageRequest.contentPayload.Case2Payload)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/content`.
            public var content: Components.Schemas.CreateMessageRequest.contentPayload
            /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/attachmentsPayload`.
            public struct attachmentsPayloadPayload: Codable, Hashable, Sendable {
                /// The ID of the file to attach to the message.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/attachmentsPayload/file_id`.
                public var file_id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/attachmentsPayload/toolsPayload`.
                @frozen public enum toolsPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/attachmentsPayload/toolsPayload/case1`.
                    case AssistantToolsCode(Components.Schemas.AssistantToolsCode)
                    /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/attachmentsPayload/toolsPayload/case2`.
                    case AssistantToolsFileSearchTypeOnly(Components.Schemas.AssistantToolsFileSearchTypeOnly)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .AssistantToolsCode(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .AssistantToolsFileSearchTypeOnly(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .AssistantToolsCode(value):
                            try value.encode(to: encoder)
                        case let .AssistantToolsFileSearchTypeOnly(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// The tools to add this file to.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/attachmentsPayload/tools`.
                public typealias toolsPayload = [Components.Schemas.CreateMessageRequest.attachmentsPayloadPayload.toolsPayloadPayload]
                /// The tools to add this file to.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/attachmentsPayload/tools`.
                public var tools: Components.Schemas.CreateMessageRequest.attachmentsPayloadPayload.toolsPayload?
                /// Creates a new `attachmentsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - file_id: The ID of the file to attach to the message.
                ///   - tools: The tools to add this file to.
                public init(
                    file_id: Swift.String? = nil,
                    tools: Components.Schemas.CreateMessageRequest.attachmentsPayloadPayload.toolsPayload? = nil
                ) {
                    self.file_id = file_id
                    self.tools = tools
                }
                public enum CodingKeys: String, CodingKey {
                    case file_id
                    case tools
                }
            }
            /// A list of files attached to the message, and the tools they should be added to.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/attachments`.
            public typealias attachmentsPayload = [Components.Schemas.CreateMessageRequest.attachmentsPayloadPayload]
            /// A list of files attached to the message, and the tools they should be added to.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/attachments`.
            public var attachments: Components.Schemas.CreateMessageRequest.attachmentsPayload?
            /// - Remark: Generated from `#/components/schemas/CreateMessageRequest/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// Creates a new `CreateMessageRequest`.
            ///
            /// - Parameters:
            ///   - role: The role of the entity that is creating the message. Allowed values include:
            ///   - content:
            ///   - attachments: A list of files attached to the message, and the tools they should be added to.
            ///   - metadata:
            public init(
                role: Components.Schemas.CreateMessageRequest.rolePayload,
                content: Components.Schemas.CreateMessageRequest.contentPayload,
                attachments: Components.Schemas.CreateMessageRequest.attachmentsPayload? = nil,
                metadata: Components.Schemas.Metadata? = nil
            ) {
                self.role = role
                self.content = content
                self.attachments = attachments
                self.metadata = metadata
            }
            public enum CodingKeys: String, CodingKey {
                case role
                case content
                case attachments
                case metadata
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                role = try container.decode(
                    Components.Schemas.CreateMessageRequest.rolePayload.self,
                    forKey: .role
                )
                content = try container.decode(
                    Components.Schemas.CreateMessageRequest.contentPayload.self,
                    forKey: .content
                )
                attachments = try container.decodeIfPresent(
                    Components.Schemas.CreateMessageRequest.attachmentsPayload.self,
                    forKey: .attachments
                )
                metadata = try container.decodeIfPresent(
                    Components.Schemas.Metadata.self,
                    forKey: .metadata
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "role",
                    "content",
                    "attachments",
                    "metadata"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateModelResponseProperties`.
        public struct CreateModelResponseProperties: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreateModelResponseProperties/value1`.
            public var value1: Components.Schemas.ModelResponseProperties
            /// Creates a new `CreateModelResponseProperties`.
            ///
            /// - Parameters:
            ///   - value1:
            public init(value1: Components.Schemas.ModelResponseProperties) {
                self.value1 = value1
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateModerationRequest`.
        public struct CreateModerationRequest: Codable, Hashable, Sendable {
            /// Input (or inputs) to classify. Can be a single string, an array of strings, or
            /// an array of multi-modal input objects similar to other models.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input`.
            @frozen public enum inputPayload: Codable, Hashable, Sendable {
                /// A string of text to classify for moderation.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/case1`.
                case case1(Swift.String)
                /// An array of strings to classify for moderation.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/case2`.
                case case2([Swift.String])
                /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/Case3Payload`.
                @frozen public enum Case3PayloadPayload: Codable, Hashable, Sendable {
                    /// An object describing an image to classify.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/Case3Payload/case1`.
                    public struct Case1Payload: Codable, Hashable, Sendable {
                        /// Always `image_url`.
                        ///
                        /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/Case3Payload/case1/type`.
                        @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                            case image_url = "image_url"
                        }
                        /// Always `image_url`.
                        ///
                        /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/Case3Payload/case1/type`.
                        public var _type: Components.Schemas.CreateModerationRequest.inputPayload.Case3PayloadPayload.Case1Payload._typePayload
                        /// Contains either an image URL or a data URL for a base64 encoded image.
                        ///
                        /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/Case3Payload/case1/image_url`.
                        public struct image_urlPayload: Codable, Hashable, Sendable {
                            /// Either a URL of the image or the base64 encoded image data.
                            ///
                            /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/Case3Payload/case1/image_url/url`.
                            public var url: Swift.String
                            /// Creates a new `image_urlPayload`.
                            ///
                            /// - Parameters:
                            ///   - url: Either a URL of the image or the base64 encoded image data.
                            public init(url: Swift.String) {
                                self.url = url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case url
                            }
                        }
                        /// Contains either an image URL or a data URL for a base64 encoded image.
                        ///
                        /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/Case3Payload/case1/image_url`.
                        public var image_url: Components.Schemas.CreateModerationRequest.inputPayload.Case3PayloadPayload.Case1Payload.image_urlPayload
                        /// Creates a new `Case1Payload`.
                        ///
                        /// - Parameters:
                        ///   - _type: Always `image_url`.
                        ///   - image_url: Contains either an image URL or a data URL for a base64 encoded image.
                        public init(
                            _type: Components.Schemas.CreateModerationRequest.inputPayload.Case3PayloadPayload.Case1Payload._typePayload,
                            image_url: Components.Schemas.CreateModerationRequest.inputPayload.Case3PayloadPayload.Case1Payload.image_urlPayload
                        ) {
                            self._type = _type
                            self.image_url = image_url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case image_url
                        }
                    }
                    /// An object describing an image to classify.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/Case3Payload/case1`.
                    case case1(Components.Schemas.CreateModerationRequest.inputPayload.Case3PayloadPayload.Case1Payload)
                    /// An object describing text to classify.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/Case3Payload/case2`.
                    public struct Case2Payload: Codable, Hashable, Sendable {
                        /// Always `text`.
                        ///
                        /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/Case3Payload/case2/type`.
                        @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                            case text = "text"
                        }
                        /// Always `text`.
                        ///
                        /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/Case3Payload/case2/type`.
                        public var _type: Components.Schemas.CreateModerationRequest.inputPayload.Case3PayloadPayload.Case2Payload._typePayload
                        /// A string of text to classify.
                        ///
                        /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/Case3Payload/case2/text`.
                        public var text: Swift.String
                        /// Creates a new `Case2Payload`.
                        ///
                        /// - Parameters:
                        ///   - _type: Always `text`.
                        ///   - text: A string of text to classify.
                        public init(
                            _type: Components.Schemas.CreateModerationRequest.inputPayload.Case3PayloadPayload.Case2Payload._typePayload,
                            text: Swift.String
                        ) {
                            self._type = _type
                            self.text = text
                        }
                        public enum CodingKeys: String, CodingKey {
                            case _type = "type"
                            case text
                        }
                    }
                    /// An object describing text to classify.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/Case3Payload/case2`.
                    case case2(Components.Schemas.CreateModerationRequest.inputPayload.Case3PayloadPayload.Case2Payload)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try value.encode(to: encoder)
                        case let .case2(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// An array of multi-modal inputs to the moderation model.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/case3`.
                public typealias Case3Payload = [Components.Schemas.CreateModerationRequest.inputPayload.Case3PayloadPayload]
                /// An array of multi-modal inputs to the moderation model.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input/case3`.
                case case3(Components.Schemas.CreateModerationRequest.inputPayload.Case3Payload)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case3(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case3(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// Input (or inputs) to classify. Can be a single string, an array of strings, or
            /// an array of multi-modal input objects similar to other models.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/input`.
            public var input: Components.Schemas.CreateModerationRequest.inputPayload
            /// The content moderation model you would like to use. Learn more in
            /// [the moderation guide](/docs/guides/moderation), and learn about
            /// available models [here](/docs/models#moderation).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/model`.
            public struct modelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/model/value1`.
                public var value1: Swift.String?
                /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/model/value2`.
                @frozen public enum Value2Payload: String, Codable, Hashable, Sendable {
                    case omni_hyphen_moderation_hyphen_latest = "omni-moderation-latest"
                    case omni_hyphen_moderation_hyphen_2024_hyphen_09_hyphen_26 = "omni-moderation-2024-09-26"
                    case text_hyphen_moderation_hyphen_latest = "text-moderation-latest"
                    case text_hyphen_moderation_hyphen_stable = "text-moderation-stable"
                }
                /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/model/value2`.
                public var value2: Components.Schemas.CreateModerationRequest.modelPayload.Value2Payload?
                /// Creates a new `modelPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Swift.String? = nil,
                    value2: Components.Schemas.CreateModerationRequest.modelPayload.Value2Payload? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            value1,
                            value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        value1,
                        value2
                    ])
                }
            }
            /// The content moderation model you would like to use. Learn more in
            /// [the moderation guide](/docs/guides/moderation), and learn about
            /// available models [here](/docs/models#moderation).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateModerationRequest/model`.
            public var model: Components.Schemas.CreateModerationRequest.modelPayload?
            /// Creates a new `CreateModerationRequest`.
            ///
            /// - Parameters:
            ///   - input: Input (or inputs) to classify. Can be a single string, an array of strings, or
            ///   - model: The content moderation model you would like to use. Learn more in
            public init(
                input: Components.Schemas.CreateModerationRequest.inputPayload,
                model: Components.Schemas.CreateModerationRequest.modelPayload? = nil
            ) {
                self.input = input
                self.model = model
            }
            public enum CodingKeys: String, CodingKey {
                case input
                case model
            }
        }
        /// Represents if a given text input is potentially harmful.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateModerationResponse`.
        public struct CreateModerationResponse: Codable, Hashable, Sendable {
            /// The unique identifier for the moderation request.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/id`.
            public var id: Swift.String
            /// The model used to generate the moderation results.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/model`.
            public var model: Swift.String
            /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload`.
            public struct resultsPayloadPayload: Codable, Hashable, Sendable {
                /// Whether any of the below categories are flagged.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/flagged`.
                public var flagged: Swift.Bool
                /// A list of the categories, and whether they are flagged or not.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/categories`.
                public struct categoriesPayload: Codable, Hashable, Sendable {
                    /// Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harassment.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/categories/hate`.
                    public var hate: Swift.Bool
                    /// Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/categories/hate/threatening`.
                    public var hate_sol_threatening: Swift.Bool
                    /// Content that expresses, incites, or promotes harassing language towards any target.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/categories/harassment`.
                    public var harassment: Swift.Bool
                    /// Harassment content that also includes violence or serious harm towards any target.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/categories/harassment/threatening`.
                    public var harassment_sol_threatening: Swift.Bool
                    /// Content that includes instructions or advice that facilitate the planning or execution of wrongdoing, or that gives advice or instruction on how to commit illicit acts. For example, "how to shoplift" would fit this category.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/categories/illicit`.
                    public var illicit: Swift.Bool?
                    /// Content that includes instructions or advice that facilitate the planning or execution of wrongdoing that also includes violence, or that gives advice or instruction on the procurement of any weapon.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/categories/illicit/violent`.
                    public var illicit_sol_violent: Swift.Bool?
                    /// Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/categories/self-harm`.
                    public var self_hyphen_harm: Swift.Bool
                    /// Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/categories/self-harm/intent`.
                    public var self_hyphen_harm_sol_intent: Swift.Bool
                    /// Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/categories/self-harm/instructions`.
                    public var self_hyphen_harm_sol_instructions: Swift.Bool
                    /// Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness).
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/categories/sexual`.
                    public var sexual: Swift.Bool
                    /// Sexual content that includes an individual who is under 18 years old.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/categories/sexual/minors`.
                    public var sexual_sol_minors: Swift.Bool
                    /// Content that depicts death, violence, or physical injury.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/categories/violence`.
                    public var violence: Swift.Bool
                    /// Content that depicts death, violence, or physical injury in graphic detail.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/categories/violence/graphic`.
                    public var violence_sol_graphic: Swift.Bool
                    /// Creates a new `categoriesPayload`.
                    ///
                    /// - Parameters:
                    ///   - hate: Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harassment.
                    ///   - hate_sol_threatening: Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste.
                    ///   - harassment: Content that expresses, incites, or promotes harassing language towards any target.
                    ///   - harassment_sol_threatening: Harassment content that also includes violence or serious harm towards any target.
                    ///   - illicit: Content that includes instructions or advice that facilitate the planning or execution of wrongdoing, or that gives advice or instruction on how to commit illicit acts. For example, "how to shoplift" would fit this category.
                    ///   - illicit_sol_violent: Content that includes instructions or advice that facilitate the planning or execution of wrongdoing that also includes violence, or that gives advice or instruction on the procurement of any weapon.
                    ///   - self_hyphen_harm: Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders.
                    ///   - self_hyphen_harm_sol_intent: Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders.
                    ///   - self_hyphen_harm_sol_instructions: Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts.
                    ///   - sexual: Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness).
                    ///   - sexual_sol_minors: Sexual content that includes an individual who is under 18 years old.
                    ///   - violence: Content that depicts death, violence, or physical injury.
                    ///   - violence_sol_graphic: Content that depicts death, violence, or physical injury in graphic detail.
                    public init(
                        hate: Swift.Bool,
                        hate_sol_threatening: Swift.Bool,
                        harassment: Swift.Bool,
                        harassment_sol_threatening: Swift.Bool,
                        illicit: Swift.Bool? = nil,
                        illicit_sol_violent: Swift.Bool? = nil,
                        self_hyphen_harm: Swift.Bool,
                        self_hyphen_harm_sol_intent: Swift.Bool,
                        self_hyphen_harm_sol_instructions: Swift.Bool,
                        sexual: Swift.Bool,
                        sexual_sol_minors: Swift.Bool,
                        violence: Swift.Bool,
                        violence_sol_graphic: Swift.Bool
                    ) {
                        self.hate = hate
                        self.hate_sol_threatening = hate_sol_threatening
                        self.harassment = harassment
                        self.harassment_sol_threatening = harassment_sol_threatening
                        self.illicit = illicit
                        self.illicit_sol_violent = illicit_sol_violent
                        self.self_hyphen_harm = self_hyphen_harm
                        self.self_hyphen_harm_sol_intent = self_hyphen_harm_sol_intent
                        self.self_hyphen_harm_sol_instructions = self_hyphen_harm_sol_instructions
                        self.sexual = sexual
                        self.sexual_sol_minors = sexual_sol_minors
                        self.violence = violence
                        self.violence_sol_graphic = violence_sol_graphic
                    }
                    public enum CodingKeys: String, CodingKey {
                        case hate
                        case hate_sol_threatening = "hate/threatening"
                        case harassment
                        case harassment_sol_threatening = "harassment/threatening"
                        case illicit
                        case illicit_sol_violent = "illicit/violent"
                        case self_hyphen_harm = "self-harm"
                        case self_hyphen_harm_sol_intent = "self-harm/intent"
                        case self_hyphen_harm_sol_instructions = "self-harm/instructions"
                        case sexual
                        case sexual_sol_minors = "sexual/minors"
                        case violence
                        case violence_sol_graphic = "violence/graphic"
                    }
                }
                /// A list of the categories, and whether they are flagged or not.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/categories`.
                public var categories: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.categoriesPayload
                /// A list of the categories along with their scores as predicted by model.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_scores`.
                public struct category_scoresPayload: Codable, Hashable, Sendable {
                    /// The score for the category 'hate'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_scores/hate`.
                    public var hate: Swift.Double
                    /// The score for the category 'hate/threatening'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_scores/hate/threatening`.
                    public var hate_sol_threatening: Swift.Double
                    /// The score for the category 'harassment'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_scores/harassment`.
                    public var harassment: Swift.Double
                    /// The score for the category 'harassment/threatening'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_scores/harassment/threatening`.
                    public var harassment_sol_threatening: Swift.Double
                    /// The score for the category 'illicit'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_scores/illicit`.
                    public var illicit: Swift.Double
                    /// The score for the category 'illicit/violent'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_scores/illicit/violent`.
                    public var illicit_sol_violent: Swift.Double
                    /// The score for the category 'self-harm'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_scores/self-harm`.
                    public var self_hyphen_harm: Swift.Double
                    /// The score for the category 'self-harm/intent'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_scores/self-harm/intent`.
                    public var self_hyphen_harm_sol_intent: Swift.Double
                    /// The score for the category 'self-harm/instructions'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_scores/self-harm/instructions`.
                    public var self_hyphen_harm_sol_instructions: Swift.Double
                    /// The score for the category 'sexual'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_scores/sexual`.
                    public var sexual: Swift.Double
                    /// The score for the category 'sexual/minors'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_scores/sexual/minors`.
                    public var sexual_sol_minors: Swift.Double
                    /// The score for the category 'violence'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_scores/violence`.
                    public var violence: Swift.Double
                    /// The score for the category 'violence/graphic'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_scores/violence/graphic`.
                    public var violence_sol_graphic: Swift.Double
                    /// Creates a new `category_scoresPayload`.
                    ///
                    /// - Parameters:
                    ///   - hate: The score for the category 'hate'.
                    ///   - hate_sol_threatening: The score for the category 'hate/threatening'.
                    ///   - harassment: The score for the category 'harassment'.
                    ///   - harassment_sol_threatening: The score for the category 'harassment/threatening'.
                    ///   - illicit: The score for the category 'illicit'.
                    ///   - illicit_sol_violent: The score for the category 'illicit/violent'.
                    ///   - self_hyphen_harm: The score for the category 'self-harm'.
                    ///   - self_hyphen_harm_sol_intent: The score for the category 'self-harm/intent'.
                    ///   - self_hyphen_harm_sol_instructions: The score for the category 'self-harm/instructions'.
                    ///   - sexual: The score for the category 'sexual'.
                    ///   - sexual_sol_minors: The score for the category 'sexual/minors'.
                    ///   - violence: The score for the category 'violence'.
                    ///   - violence_sol_graphic: The score for the category 'violence/graphic'.
                    public init(
                        hate: Swift.Double,
                        hate_sol_threatening: Swift.Double,
                        harassment: Swift.Double,
                        harassment_sol_threatening: Swift.Double,
                        illicit: Swift.Double,
                        illicit_sol_violent: Swift.Double,
                        self_hyphen_harm: Swift.Double,
                        self_hyphen_harm_sol_intent: Swift.Double,
                        self_hyphen_harm_sol_instructions: Swift.Double,
                        sexual: Swift.Double,
                        sexual_sol_minors: Swift.Double,
                        violence: Swift.Double,
                        violence_sol_graphic: Swift.Double
                    ) {
                        self.hate = hate
                        self.hate_sol_threatening = hate_sol_threatening
                        self.harassment = harassment
                        self.harassment_sol_threatening = harassment_sol_threatening
                        self.illicit = illicit
                        self.illicit_sol_violent = illicit_sol_violent
                        self.self_hyphen_harm = self_hyphen_harm
                        self.self_hyphen_harm_sol_intent = self_hyphen_harm_sol_intent
                        self.self_hyphen_harm_sol_instructions = self_hyphen_harm_sol_instructions
                        self.sexual = sexual
                        self.sexual_sol_minors = sexual_sol_minors
                        self.violence = violence
                        self.violence_sol_graphic = violence_sol_graphic
                    }
                    public enum CodingKeys: String, CodingKey {
                        case hate
                        case hate_sol_threatening = "hate/threatening"
                        case harassment
                        case harassment_sol_threatening = "harassment/threatening"
                        case illicit
                        case illicit_sol_violent = "illicit/violent"
                        case self_hyphen_harm = "self-harm"
                        case self_hyphen_harm_sol_intent = "self-harm/intent"
                        case self_hyphen_harm_sol_instructions = "self-harm/instructions"
                        case sexual
                        case sexual_sol_minors = "sexual/minors"
                        case violence
                        case violence_sol_graphic = "violence/graphic"
                    }
                }
                /// A list of the categories along with their scores as predicted by model.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_scores`.
                public var category_scores: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_scoresPayload
                /// A list of the categories along with the input type(s) that the score applies to.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types`.
                public struct category_applied_input_typesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/hatePayload`.
                    @frozen public enum hatePayloadPayload: String, Codable, Hashable, Sendable {
                        case text = "text"
                    }
                    /// The applied input type(s) for the category 'hate'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/hate`.
                    public typealias hatePayload = [Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.hatePayloadPayload]
                    /// The applied input type(s) for the category 'hate'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/hate`.
                    public var hate: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.hatePayload
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/hate_sol_threateningPayload`.
                    @frozen public enum hate_sol_threateningPayloadPayload: String, Codable, Hashable, Sendable {
                        case text = "text"
                    }
                    /// The applied input type(s) for the category 'hate/threatening'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/hate/threatening`.
                    public typealias hate_sol_threateningPayload = [Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.hate_sol_threateningPayloadPayload]
                    /// The applied input type(s) for the category 'hate/threatening'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/hate/threatening`.
                    public var hate_sol_threatening: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.hate_sol_threateningPayload
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/harassmentPayload`.
                    @frozen public enum harassmentPayloadPayload: String, Codable, Hashable, Sendable {
                        case text = "text"
                    }
                    /// The applied input type(s) for the category 'harassment'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/harassment`.
                    public typealias harassmentPayload = [Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.harassmentPayloadPayload]
                    /// The applied input type(s) for the category 'harassment'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/harassment`.
                    public var harassment: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.harassmentPayload
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/harassment_sol_threateningPayload`.
                    @frozen public enum harassment_sol_threateningPayloadPayload: String, Codable, Hashable, Sendable {
                        case text = "text"
                    }
                    /// The applied input type(s) for the category 'harassment/threatening'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/harassment/threatening`.
                    public typealias harassment_sol_threateningPayload = [Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.harassment_sol_threateningPayloadPayload]
                    /// The applied input type(s) for the category 'harassment/threatening'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/harassment/threatening`.
                    public var harassment_sol_threatening: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.harassment_sol_threateningPayload
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/illicitPayload`.
                    @frozen public enum illicitPayloadPayload: String, Codable, Hashable, Sendable {
                        case text = "text"
                    }
                    /// The applied input type(s) for the category 'illicit'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/illicit`.
                    public typealias illicitPayload = [Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.illicitPayloadPayload]
                    /// The applied input type(s) for the category 'illicit'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/illicit`.
                    public var illicit: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.illicitPayload
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/illicit_sol_violentPayload`.
                    @frozen public enum illicit_sol_violentPayloadPayload: String, Codable, Hashable, Sendable {
                        case text = "text"
                    }
                    /// The applied input type(s) for the category 'illicit/violent'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/illicit/violent`.
                    public typealias illicit_sol_violentPayload = [Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.illicit_sol_violentPayloadPayload]
                    /// The applied input type(s) for the category 'illicit/violent'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/illicit/violent`.
                    public var illicit_sol_violent: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.illicit_sol_violentPayload
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/self_hyphen_harmPayload`.
                    @frozen public enum self_hyphen_harmPayloadPayload: String, Codable, Hashable, Sendable {
                        case text = "text"
                        case image = "image"
                    }
                    /// The applied input type(s) for the category 'self-harm'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/self-harm`.
                    public typealias self_hyphen_harmPayload = [Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.self_hyphen_harmPayloadPayload]
                    /// The applied input type(s) for the category 'self-harm'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/self-harm`.
                    public var self_hyphen_harm: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.self_hyphen_harmPayload
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/self_hyphen_harm_sol_intentPayload`.
                    @frozen public enum self_hyphen_harm_sol_intentPayloadPayload: String, Codable, Hashable, Sendable {
                        case text = "text"
                        case image = "image"
                    }
                    /// The applied input type(s) for the category 'self-harm/intent'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/self-harm/intent`.
                    public typealias self_hyphen_harm_sol_intentPayload = [Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.self_hyphen_harm_sol_intentPayloadPayload]
                    /// The applied input type(s) for the category 'self-harm/intent'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/self-harm/intent`.
                    public var self_hyphen_harm_sol_intent: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.self_hyphen_harm_sol_intentPayload
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/self_hyphen_harm_sol_instructionsPayload`.
                    @frozen public enum self_hyphen_harm_sol_instructionsPayloadPayload: String, Codable, Hashable, Sendable {
                        case text = "text"
                        case image = "image"
                    }
                    /// The applied input type(s) for the category 'self-harm/instructions'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/self-harm/instructions`.
                    public typealias self_hyphen_harm_sol_instructionsPayload = [Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.self_hyphen_harm_sol_instructionsPayloadPayload]
                    /// The applied input type(s) for the category 'self-harm/instructions'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/self-harm/instructions`.
                    public var self_hyphen_harm_sol_instructions: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.self_hyphen_harm_sol_instructionsPayload
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/sexualPayload`.
                    @frozen public enum sexualPayloadPayload: String, Codable, Hashable, Sendable {
                        case text = "text"
                        case image = "image"
                    }
                    /// The applied input type(s) for the category 'sexual'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/sexual`.
                    public typealias sexualPayload = [Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.sexualPayloadPayload]
                    /// The applied input type(s) for the category 'sexual'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/sexual`.
                    public var sexual: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.sexualPayload
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/sexual_sol_minorsPayload`.
                    @frozen public enum sexual_sol_minorsPayloadPayload: String, Codable, Hashable, Sendable {
                        case text = "text"
                    }
                    /// The applied input type(s) for the category 'sexual/minors'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/sexual/minors`.
                    public typealias sexual_sol_minorsPayload = [Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.sexual_sol_minorsPayloadPayload]
                    /// The applied input type(s) for the category 'sexual/minors'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/sexual/minors`.
                    public var sexual_sol_minors: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.sexual_sol_minorsPayload
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/violencePayload`.
                    @frozen public enum violencePayloadPayload: String, Codable, Hashable, Sendable {
                        case text = "text"
                        case image = "image"
                    }
                    /// The applied input type(s) for the category 'violence'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/violence`.
                    public typealias violencePayload = [Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.violencePayloadPayload]
                    /// The applied input type(s) for the category 'violence'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/violence`.
                    public var violence: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.violencePayload
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/violence_sol_graphicPayload`.
                    @frozen public enum violence_sol_graphicPayloadPayload: String, Codable, Hashable, Sendable {
                        case text = "text"
                        case image = "image"
                    }
                    /// The applied input type(s) for the category 'violence/graphic'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/violence/graphic`.
                    public typealias violence_sol_graphicPayload = [Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.violence_sol_graphicPayloadPayload]
                    /// The applied input type(s) for the category 'violence/graphic'.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types/violence/graphic`.
                    public var violence_sol_graphic: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.violence_sol_graphicPayload
                    /// Creates a new `category_applied_input_typesPayload`.
                    ///
                    /// - Parameters:
                    ///   - hate: The applied input type(s) for the category 'hate'.
                    ///   - hate_sol_threatening: The applied input type(s) for the category 'hate/threatening'.
                    ///   - harassment: The applied input type(s) for the category 'harassment'.
                    ///   - harassment_sol_threatening: The applied input type(s) for the category 'harassment/threatening'.
                    ///   - illicit: The applied input type(s) for the category 'illicit'.
                    ///   - illicit_sol_violent: The applied input type(s) for the category 'illicit/violent'.
                    ///   - self_hyphen_harm: The applied input type(s) for the category 'self-harm'.
                    ///   - self_hyphen_harm_sol_intent: The applied input type(s) for the category 'self-harm/intent'.
                    ///   - self_hyphen_harm_sol_instructions: The applied input type(s) for the category 'self-harm/instructions'.
                    ///   - sexual: The applied input type(s) for the category 'sexual'.
                    ///   - sexual_sol_minors: The applied input type(s) for the category 'sexual/minors'.
                    ///   - violence: The applied input type(s) for the category 'violence'.
                    ///   - violence_sol_graphic: The applied input type(s) for the category 'violence/graphic'.
                    public init(
                        hate: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.hatePayload,
                        hate_sol_threatening: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.hate_sol_threateningPayload,
                        harassment: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.harassmentPayload,
                        harassment_sol_threatening: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.harassment_sol_threateningPayload,
                        illicit: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.illicitPayload,
                        illicit_sol_violent: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.illicit_sol_violentPayload,
                        self_hyphen_harm: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.self_hyphen_harmPayload,
                        self_hyphen_harm_sol_intent: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.self_hyphen_harm_sol_intentPayload,
                        self_hyphen_harm_sol_instructions: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.self_hyphen_harm_sol_instructionsPayload,
                        sexual: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.sexualPayload,
                        sexual_sol_minors: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.sexual_sol_minorsPayload,
                        violence: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.violencePayload,
                        violence_sol_graphic: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload.violence_sol_graphicPayload
                    ) {
                        self.hate = hate
                        self.hate_sol_threatening = hate_sol_threatening
                        self.harassment = harassment
                        self.harassment_sol_threatening = harassment_sol_threatening
                        self.illicit = illicit
                        self.illicit_sol_violent = illicit_sol_violent
                        self.self_hyphen_harm = self_hyphen_harm
                        self.self_hyphen_harm_sol_intent = self_hyphen_harm_sol_intent
                        self.self_hyphen_harm_sol_instructions = self_hyphen_harm_sol_instructions
                        self.sexual = sexual
                        self.sexual_sol_minors = sexual_sol_minors
                        self.violence = violence
                        self.violence_sol_graphic = violence_sol_graphic
                    }
                    public enum CodingKeys: String, CodingKey {
                        case hate
                        case hate_sol_threatening = "hate/threatening"
                        case harassment
                        case harassment_sol_threatening = "harassment/threatening"
                        case illicit
                        case illicit_sol_violent = "illicit/violent"
                        case self_hyphen_harm = "self-harm"
                        case self_hyphen_harm_sol_intent = "self-harm/intent"
                        case self_hyphen_harm_sol_instructions = "self-harm/instructions"
                        case sexual
                        case sexual_sol_minors = "sexual/minors"
                        case violence
                        case violence_sol_graphic = "violence/graphic"
                    }
                }
                /// A list of the categories along with the input type(s) that the score applies to.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/resultsPayload/category_applied_input_types`.
                public var category_applied_input_types: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload
                /// Creates a new `resultsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - flagged: Whether any of the below categories are flagged.
                ///   - categories: A list of the categories, and whether they are flagged or not.
                ///   - category_scores: A list of the categories along with their scores as predicted by model.
                ///   - category_applied_input_types: A list of the categories along with the input type(s) that the score applies to.
                public init(
                    flagged: Swift.Bool,
                    categories: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.categoriesPayload,
                    category_scores: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_scoresPayload,
                    category_applied_input_types: Components.Schemas.CreateModerationResponse.resultsPayloadPayload.category_applied_input_typesPayload
                ) {
                    self.flagged = flagged
                    self.categories = categories
                    self.category_scores = category_scores
                    self.category_applied_input_types = category_applied_input_types
                }
                public enum CodingKeys: String, CodingKey {
                    case flagged
                    case categories
                    case category_scores
                    case category_applied_input_types
                }
            }
            /// A list of moderation objects.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/results`.
            public typealias resultsPayload = [Components.Schemas.CreateModerationResponse.resultsPayloadPayload]
            /// A list of moderation objects.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateModerationResponse/results`.
            public var results: Components.Schemas.CreateModerationResponse.resultsPayload
            /// Creates a new `CreateModerationResponse`.
            ///
            /// - Parameters:
            ///   - id: The unique identifier for the moderation request.
            ///   - model: The model used to generate the moderation results.
            ///   - results: A list of moderation objects.
            public init(
                id: Swift.String,
                model: Swift.String,
                results: Components.Schemas.CreateModerationResponse.resultsPayload
            ) {
                self.id = id
                self.model = model
                self.results = results
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case model
                case results
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateRunRequest`.
        public struct CreateRunRequest: Codable, Hashable, Sendable {
            /// The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/assistant_id`.
            public var assistant_id: Swift.String
            /// The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/model`.
            public struct modelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateRunRequest/model/value1`.
                public var value1: Swift.String?
                /// - Remark: Generated from `#/components/schemas/CreateRunRequest/model/value2`.
                public var value2: Components.Schemas.AssistantSupportedModels?
                /// Creates a new `modelPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Swift.String? = nil,
                    value2: Components.Schemas.AssistantSupportedModels? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            value1,
                            value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        value1,
                        value2
                    ])
                }
            }
            /// The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/model`.
            public var model: Components.Schemas.CreateRunRequest.modelPayload?
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/reasoning_effort`.
            public var reasoning_effort: Components.Schemas.ReasoningEffort?
            /// Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/instructions`.
            public var instructions: Swift.String?
            /// Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/additional_instructions`.
            public var additional_instructions: Swift.String?
            /// Adds additional messages to the thread before creating the run.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/additional_messages`.
            public var additional_messages: [Components.Schemas.CreateMessageRequest]?
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/toolsPayload`.
            @frozen public enum toolsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateRunRequest/toolsPayload/case1`.
                case AssistantToolsCode(Components.Schemas.AssistantToolsCode)
                /// - Remark: Generated from `#/components/schemas/CreateRunRequest/toolsPayload/case2`.
                case AssistantToolsFileSearch(Components.Schemas.AssistantToolsFileSearch)
                /// - Remark: Generated from `#/components/schemas/CreateRunRequest/toolsPayload/case3`.
                case AssistantToolsFunction(Components.Schemas.AssistantToolsFunction)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .AssistantToolsCode(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .AssistantToolsFileSearch(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .AssistantToolsFunction(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .AssistantToolsCode(value):
                        try value.encode(to: encoder)
                    case let .AssistantToolsFileSearch(value):
                        try value.encode(to: encoder)
                    case let .AssistantToolsFunction(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/tools`.
            public typealias toolsPayload = [Components.Schemas.CreateRunRequest.toolsPayloadPayload]
            /// Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/tools`.
            public var tools: Components.Schemas.CreateRunRequest.toolsPayload?
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/temperature`.
            public var temperature: Swift.Double?
            /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            ///
            /// We generally recommend altering this or temperature but not both.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/top_p`.
            public var top_p: Swift.Double?
            /// If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/stream`.
            public var stream: Swift.Bool?
            /// The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/max_prompt_tokens`.
            public var max_prompt_tokens: Swift.Int?
            /// The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/max_completion_tokens`.
            public var max_completion_tokens: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/truncation_strategy`.
            public struct truncation_strategyPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateRunRequest/truncation_strategy/value1`.
                public var value1: Components.Schemas.TruncationObject
                /// - Remark: Generated from `#/components/schemas/CreateRunRequest/truncation_strategy/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer
                /// Creates a new `truncation_strategyPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.TruncationObject,
                    value2: OpenAPIRuntime.OpenAPIValueContainer
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/truncation_strategy`.
            public var truncation_strategy: Components.Schemas.CreateRunRequest.truncation_strategyPayload?
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/tool_choice`.
            public struct tool_choicePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateRunRequest/tool_choice/value1`.
                public var value1: Components.Schemas.AssistantsApiToolChoiceOption
                /// - Remark: Generated from `#/components/schemas/CreateRunRequest/tool_choice/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer
                /// Creates a new `tool_choicePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.AssistantsApiToolChoiceOption,
                    value2: OpenAPIRuntime.OpenAPIValueContainer
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/tool_choice`.
            public var tool_choice: Components.Schemas.CreateRunRequest.tool_choicePayload?
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/parallel_tool_calls`.
            public var parallel_tool_calls: Components.Schemas.ParallelToolCalls?
            /// - Remark: Generated from `#/components/schemas/CreateRunRequest/response_format`.
            public var response_format: Components.Schemas.AssistantsApiResponseFormatOption?
            /// Creates a new `CreateRunRequest`.
            ///
            /// - Parameters:
            ///   - assistant_id: The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
            ///   - model: The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
            ///   - reasoning_effort:
            ///   - instructions: Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.
            ///   - additional_instructions: Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.
            ///   - additional_messages: Adds additional messages to the thread before creating the run.
            ///   - tools: Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
            ///   - metadata:
            ///   - temperature: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            ///   - top_p: An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            ///   - stream: If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
            ///   - max_prompt_tokens: The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
            ///   - max_completion_tokens: The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
            ///   - truncation_strategy:
            ///   - tool_choice:
            ///   - parallel_tool_calls:
            ///   - response_format:
            public init(
                assistant_id: Swift.String,
                model: Components.Schemas.CreateRunRequest.modelPayload? = nil,
                reasoning_effort: Components.Schemas.ReasoningEffort? = nil,
                instructions: Swift.String? = nil,
                additional_instructions: Swift.String? = nil,
                additional_messages: [Components.Schemas.CreateMessageRequest]? = nil,
                tools: Components.Schemas.CreateRunRequest.toolsPayload? = nil,
                metadata: Components.Schemas.Metadata? = nil,
                temperature: Swift.Double? = nil,
                top_p: Swift.Double? = nil,
                stream: Swift.Bool? = nil,
                max_prompt_tokens: Swift.Int? = nil,
                max_completion_tokens: Swift.Int? = nil,
                truncation_strategy: Components.Schemas.CreateRunRequest.truncation_strategyPayload? = nil,
                tool_choice: Components.Schemas.CreateRunRequest.tool_choicePayload? = nil,
                parallel_tool_calls: Components.Schemas.ParallelToolCalls? = nil,
                response_format: Components.Schemas.AssistantsApiResponseFormatOption? = nil
            ) {
                self.assistant_id = assistant_id
                self.model = model
                self.reasoning_effort = reasoning_effort
                self.instructions = instructions
                self.additional_instructions = additional_instructions
                self.additional_messages = additional_messages
                self.tools = tools
                self.metadata = metadata
                self.temperature = temperature
                self.top_p = top_p
                self.stream = stream
                self.max_prompt_tokens = max_prompt_tokens
                self.max_completion_tokens = max_completion_tokens
                self.truncation_strategy = truncation_strategy
                self.tool_choice = tool_choice
                self.parallel_tool_calls = parallel_tool_calls
                self.response_format = response_format
            }
            public enum CodingKeys: String, CodingKey {
                case assistant_id
                case model
                case reasoning_effort
                case instructions
                case additional_instructions
                case additional_messages
                case tools
                case metadata
                case temperature
                case top_p
                case stream
                case max_prompt_tokens
                case max_completion_tokens
                case truncation_strategy
                case tool_choice
                case parallel_tool_calls
                case response_format
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                assistant_id = try container.decode(
                    Swift.String.self,
                    forKey: .assistant_id
                )
                model = try container.decodeIfPresent(
                    Components.Schemas.CreateRunRequest.modelPayload.self,
                    forKey: .model
                )
                reasoning_effort = try container.decodeIfPresent(
                    Components.Schemas.ReasoningEffort.self,
                    forKey: .reasoning_effort
                )
                instructions = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .instructions
                )
                additional_instructions = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .additional_instructions
                )
                additional_messages = try container.decodeIfPresent(
                    [Components.Schemas.CreateMessageRequest].self,
                    forKey: .additional_messages
                )
                tools = try container.decodeIfPresent(
                    Components.Schemas.CreateRunRequest.toolsPayload.self,
                    forKey: .tools
                )
                metadata = try container.decodeIfPresent(
                    Components.Schemas.Metadata.self,
                    forKey: .metadata
                )
                temperature = try container.decodeIfPresent(
                    Swift.Double.self,
                    forKey: .temperature
                )
                top_p = try container.decodeIfPresent(
                    Swift.Double.self,
                    forKey: .top_p
                )
                stream = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .stream
                )
                max_prompt_tokens = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .max_prompt_tokens
                )
                max_completion_tokens = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .max_completion_tokens
                )
                truncation_strategy = try container.decodeIfPresent(
                    Components.Schemas.CreateRunRequest.truncation_strategyPayload.self,
                    forKey: .truncation_strategy
                )
                tool_choice = try container.decodeIfPresent(
                    Components.Schemas.CreateRunRequest.tool_choicePayload.self,
                    forKey: .tool_choice
                )
                parallel_tool_calls = try container.decodeIfPresent(
                    Components.Schemas.ParallelToolCalls.self,
                    forKey: .parallel_tool_calls
                )
                response_format = try container.decodeIfPresent(
                    Components.Schemas.AssistantsApiResponseFormatOption.self,
                    forKey: .response_format
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "assistant_id",
                    "model",
                    "reasoning_effort",
                    "instructions",
                    "additional_instructions",
                    "additional_messages",
                    "tools",
                    "metadata",
                    "temperature",
                    "top_p",
                    "stream",
                    "max_prompt_tokens",
                    "max_completion_tokens",
                    "truncation_strategy",
                    "tool_choice",
                    "parallel_tool_calls",
                    "response_format"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest`.
        public struct CreateSpeechRequest: Codable, Hashable, Sendable {
            /// One of the available [TTS models](/docs/models#tts): `tts-1`, `tts-1-hd` or `gpt-4o-mini-tts`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/model`.
            public struct modelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/model/value1`.
                public var value1: Swift.String?
                /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/model/value2`.
                @frozen public enum Value2Payload: String, Codable, Hashable, Sendable {
                    case tts_hyphen_1 = "tts-1"
                    case tts_hyphen_1_hyphen_hd = "tts-1-hd"
                    case gpt_hyphen_4o_hyphen_mini_hyphen_tts = "gpt-4o-mini-tts"
                }
                /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/model/value2`.
                public var value2: Components.Schemas.CreateSpeechRequest.modelPayload.Value2Payload?
                /// Creates a new `modelPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Swift.String? = nil,
                    value2: Components.Schemas.CreateSpeechRequest.modelPayload.Value2Payload? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            value1,
                            value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        value1,
                        value2
                    ])
                }
            }
            /// One of the available [TTS models](/docs/models#tts): `tts-1`, `tts-1-hd` or `gpt-4o-mini-tts`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/model`.
            public var model: Components.Schemas.CreateSpeechRequest.modelPayload
            /// The text to generate audio for. The maximum length is 4096 characters.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/input`.
            public var input: Swift.String
            /// Control the voice of your generated audio with additional instructions. Does not work with `tts-1` or `tts-1-hd`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/instructions`.
            public var instructions: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/voice`.
            public var voice: Components.Schemas.VoiceIdsShared
            /// The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/response_format`.
            @frozen public enum response_formatPayload: String, Codable, Hashable, Sendable {
                case mp3 = "mp3"
                case opus = "opus"
                case aac = "aac"
                case flac = "flac"
                case wav = "wav"
                case pcm = "pcm"
            }
            /// The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/response_format`.
            public var response_format: Components.Schemas.CreateSpeechRequest.response_formatPayload?
            /// The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/speed`.
            public var speed: Swift.Double?
            /// Creates a new `CreateSpeechRequest`.
            ///
            /// - Parameters:
            ///   - model: One of the available [TTS models](/docs/models#tts): `tts-1`, `tts-1-hd` or `gpt-4o-mini-tts`.
            ///   - input: The text to generate audio for. The maximum length is 4096 characters.
            ///   - instructions: Control the voice of your generated audio with additional instructions. Does not work with `tts-1` or `tts-1-hd`.
            ///   - voice:
            ///   - response_format: The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.
            ///   - speed: The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.
            public init(
                model: Components.Schemas.CreateSpeechRequest.modelPayload,
                input: Swift.String,
                instructions: Swift.String? = nil,
                voice: Components.Schemas.VoiceIdsShared,
                response_format: Components.Schemas.CreateSpeechRequest.response_formatPayload? = nil,
                speed: Swift.Double? = nil
            ) {
                self.model = model
                self.input = input
                self.instructions = instructions
                self.voice = voice
                self.response_format = response_format
                self.speed = speed
            }
            public enum CodingKeys: String, CodingKey {
                case model
                case input
                case instructions
                case voice
                case response_format
                case speed
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                model = try container.decode(
                    Components.Schemas.CreateSpeechRequest.modelPayload.self,
                    forKey: .model
                )
                input = try container.decode(
                    Swift.String.self,
                    forKey: .input
                )
                instructions = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .instructions
                )
                voice = try container.decode(
                    Components.Schemas.VoiceIdsShared.self,
                    forKey: .voice
                )
                response_format = try container.decodeIfPresent(
                    Components.Schemas.CreateSpeechRequest.response_formatPayload.self,
                    forKey: .response_format
                )
                speed = try container.decodeIfPresent(
                    Swift.Double.self,
                    forKey: .speed
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "model",
                    "input",
                    "instructions",
                    "voice",
                    "response_format",
                    "speed"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest`.
        public struct CreateThreadAndRunRequest: Codable, Hashable, Sendable {
            /// The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/assistant_id`.
            public var assistant_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/thread`.
            public var thread: Components.Schemas.CreateThreadRequest?
            /// The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/model`.
            public struct modelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/model/value1`.
                public var value1: Swift.String?
                /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/model/value2`.
                @frozen public enum Value2Payload: String, Codable, Hashable, Sendable {
                    case gpt_hyphen_4_period_1 = "gpt-4.1"
                    case gpt_hyphen_4_period_1_hyphen_mini = "gpt-4.1-mini"
                    case gpt_hyphen_4_period_1_hyphen_nano = "gpt-4.1-nano"
                    case gpt_hyphen_4_period_1_hyphen_2025_hyphen_04_hyphen_14 = "gpt-4.1-2025-04-14"
                    case gpt_hyphen_4_period_1_hyphen_mini_hyphen_2025_hyphen_04_hyphen_14 = "gpt-4.1-mini-2025-04-14"
                    case gpt_hyphen_4_period_1_hyphen_nano_hyphen_2025_hyphen_04_hyphen_14 = "gpt-4.1-nano-2025-04-14"
                    case gpt_hyphen_4o = "gpt-4o"
                    case gpt_hyphen_4o_hyphen_2024_hyphen_11_hyphen_20 = "gpt-4o-2024-11-20"
                    case gpt_hyphen_4o_hyphen_2024_hyphen_08_hyphen_06 = "gpt-4o-2024-08-06"
                    case gpt_hyphen_4o_hyphen_2024_hyphen_05_hyphen_13 = "gpt-4o-2024-05-13"
                    case gpt_hyphen_4o_hyphen_mini = "gpt-4o-mini"
                    case gpt_hyphen_4o_hyphen_mini_hyphen_2024_hyphen_07_hyphen_18 = "gpt-4o-mini-2024-07-18"
                    case gpt_hyphen_4_period_5_hyphen_preview = "gpt-4.5-preview"
                    case gpt_hyphen_4_period_5_hyphen_preview_hyphen_2025_hyphen_02_hyphen_27 = "gpt-4.5-preview-2025-02-27"
                    case gpt_hyphen_4_hyphen_turbo = "gpt-4-turbo"
                    case gpt_hyphen_4_hyphen_turbo_hyphen_2024_hyphen_04_hyphen_09 = "gpt-4-turbo-2024-04-09"
                    case gpt_hyphen_4_hyphen_0125_hyphen_preview = "gpt-4-0125-preview"
                    case gpt_hyphen_4_hyphen_turbo_hyphen_preview = "gpt-4-turbo-preview"
                    case gpt_hyphen_4_hyphen_1106_hyphen_preview = "gpt-4-1106-preview"
                    case gpt_hyphen_4_hyphen_vision_hyphen_preview = "gpt-4-vision-preview"
                    case gpt_hyphen_4 = "gpt-4"
                    case gpt_hyphen_4_hyphen_0314 = "gpt-4-0314"
                    case gpt_hyphen_4_hyphen_0613 = "gpt-4-0613"
                    case gpt_hyphen_4_hyphen_32k = "gpt-4-32k"
                    case gpt_hyphen_4_hyphen_32k_hyphen_0314 = "gpt-4-32k-0314"
                    case gpt_hyphen_4_hyphen_32k_hyphen_0613 = "gpt-4-32k-0613"
                    case gpt_hyphen_3_period_5_hyphen_turbo = "gpt-3.5-turbo"
                    case gpt_hyphen_3_period_5_hyphen_turbo_hyphen_16k = "gpt-3.5-turbo-16k"
                    case gpt_hyphen_3_period_5_hyphen_turbo_hyphen_0613 = "gpt-3.5-turbo-0613"
                    case gpt_hyphen_3_period_5_hyphen_turbo_hyphen_1106 = "gpt-3.5-turbo-1106"
                    case gpt_hyphen_3_period_5_hyphen_turbo_hyphen_0125 = "gpt-3.5-turbo-0125"
                    case gpt_hyphen_3_period_5_hyphen_turbo_hyphen_16k_hyphen_0613 = "gpt-3.5-turbo-16k-0613"
                }
                /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/model/value2`.
                public var value2: Components.Schemas.CreateThreadAndRunRequest.modelPayload.Value2Payload?
                /// Creates a new `modelPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Swift.String? = nil,
                    value2: Components.Schemas.CreateThreadAndRunRequest.modelPayload.Value2Payload? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            value1,
                            value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        value1,
                        value2
                    ])
                }
            }
            /// The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/model`.
            public var model: Components.Schemas.CreateThreadAndRunRequest.modelPayload?
            /// Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/instructions`.
            public var instructions: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/toolsPayload`.
            @frozen public enum toolsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/toolsPayload/case1`.
                case AssistantToolsCode(Components.Schemas.AssistantToolsCode)
                /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/toolsPayload/case2`.
                case AssistantToolsFileSearch(Components.Schemas.AssistantToolsFileSearch)
                /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/toolsPayload/case3`.
                case AssistantToolsFunction(Components.Schemas.AssistantToolsFunction)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .AssistantToolsCode(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .AssistantToolsFileSearch(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .AssistantToolsFunction(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .AssistantToolsCode(value):
                        try value.encode(to: encoder)
                    case let .AssistantToolsFileSearch(value):
                        try value.encode(to: encoder)
                    case let .AssistantToolsFunction(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/tools`.
            public typealias toolsPayload = [Components.Schemas.CreateThreadAndRunRequest.toolsPayloadPayload]
            /// Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/tools`.
            public var tools: Components.Schemas.CreateThreadAndRunRequest.toolsPayload?
            /// A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/tool_resources`.
            public struct tool_resourcesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/tool_resources/code_interpreter`.
                public struct code_interpreterPayload: Codable, Hashable, Sendable {
                    /// A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/tool_resources/code_interpreter/file_ids`.
                    public var file_ids: [Swift.String]?
                    /// Creates a new `code_interpreterPayload`.
                    ///
                    /// - Parameters:
                    ///   - file_ids: A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                    public init(file_ids: [Swift.String]? = nil) {
                        self.file_ids = file_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case file_ids
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/tool_resources/code_interpreter`.
                public var code_interpreter: Components.Schemas.CreateThreadAndRunRequest.tool_resourcesPayload.code_interpreterPayload?
                /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/tool_resources/file_search`.
                public struct file_searchPayload: Codable, Hashable, Sendable {
                    /// The ID of the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/tool_resources/file_search/vector_store_ids`.
                    public var vector_store_ids: [Swift.String]?
                    /// Creates a new `file_searchPayload`.
                    ///
                    /// - Parameters:
                    ///   - vector_store_ids: The ID of the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
                    public init(vector_store_ids: [Swift.String]? = nil) {
                        self.vector_store_ids = vector_store_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case vector_store_ids
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/tool_resources/file_search`.
                public var file_search: Components.Schemas.CreateThreadAndRunRequest.tool_resourcesPayload.file_searchPayload?
                /// Creates a new `tool_resourcesPayload`.
                ///
                /// - Parameters:
                ///   - code_interpreter:
                ///   - file_search:
                public init(
                    code_interpreter: Components.Schemas.CreateThreadAndRunRequest.tool_resourcesPayload.code_interpreterPayload? = nil,
                    file_search: Components.Schemas.CreateThreadAndRunRequest.tool_resourcesPayload.file_searchPayload? = nil
                ) {
                    self.code_interpreter = code_interpreter
                    self.file_search = file_search
                }
                public enum CodingKeys: String, CodingKey {
                    case code_interpreter
                    case file_search
                }
            }
            /// A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/tool_resources`.
            public var tool_resources: Components.Schemas.CreateThreadAndRunRequest.tool_resourcesPayload?
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/temperature`.
            public var temperature: Swift.Double?
            /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            ///
            /// We generally recommend altering this or temperature but not both.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/top_p`.
            public var top_p: Swift.Double?
            /// If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/stream`.
            public var stream: Swift.Bool?
            /// The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/max_prompt_tokens`.
            public var max_prompt_tokens: Swift.Int?
            /// The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/max_completion_tokens`.
            public var max_completion_tokens: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/truncation_strategy`.
            public struct truncation_strategyPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/truncation_strategy/value1`.
                public var value1: Components.Schemas.TruncationObject
                /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/truncation_strategy/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer
                /// Creates a new `truncation_strategyPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.TruncationObject,
                    value2: OpenAPIRuntime.OpenAPIValueContainer
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/truncation_strategy`.
            public var truncation_strategy: Components.Schemas.CreateThreadAndRunRequest.truncation_strategyPayload?
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/tool_choice`.
            public struct tool_choicePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/tool_choice/value1`.
                public var value1: Components.Schemas.AssistantsApiToolChoiceOption
                /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/tool_choice/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer
                /// Creates a new `tool_choicePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.AssistantsApiToolChoiceOption,
                    value2: OpenAPIRuntime.OpenAPIValueContainer
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/tool_choice`.
            public var tool_choice: Components.Schemas.CreateThreadAndRunRequest.tool_choicePayload?
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/parallel_tool_calls`.
            public var parallel_tool_calls: Components.Schemas.ParallelToolCalls?
            /// - Remark: Generated from `#/components/schemas/CreateThreadAndRunRequest/response_format`.
            public var response_format: Components.Schemas.AssistantsApiResponseFormatOption?
            /// Creates a new `CreateThreadAndRunRequest`.
            ///
            /// - Parameters:
            ///   - assistant_id: The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
            ///   - thread:
            ///   - model: The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
            ///   - instructions: Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.
            ///   - tools: Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
            ///   - tool_resources: A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///   - metadata:
            ///   - temperature: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            ///   - top_p: An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            ///   - stream: If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
            ///   - max_prompt_tokens: The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
            ///   - max_completion_tokens: The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
            ///   - truncation_strategy:
            ///   - tool_choice:
            ///   - parallel_tool_calls:
            ///   - response_format:
            public init(
                assistant_id: Swift.String,
                thread: Components.Schemas.CreateThreadRequest? = nil,
                model: Components.Schemas.CreateThreadAndRunRequest.modelPayload? = nil,
                instructions: Swift.String? = nil,
                tools: Components.Schemas.CreateThreadAndRunRequest.toolsPayload? = nil,
                tool_resources: Components.Schemas.CreateThreadAndRunRequest.tool_resourcesPayload? = nil,
                metadata: Components.Schemas.Metadata? = nil,
                temperature: Swift.Double? = nil,
                top_p: Swift.Double? = nil,
                stream: Swift.Bool? = nil,
                max_prompt_tokens: Swift.Int? = nil,
                max_completion_tokens: Swift.Int? = nil,
                truncation_strategy: Components.Schemas.CreateThreadAndRunRequest.truncation_strategyPayload? = nil,
                tool_choice: Components.Schemas.CreateThreadAndRunRequest.tool_choicePayload? = nil,
                parallel_tool_calls: Components.Schemas.ParallelToolCalls? = nil,
                response_format: Components.Schemas.AssistantsApiResponseFormatOption? = nil
            ) {
                self.assistant_id = assistant_id
                self.thread = thread
                self.model = model
                self.instructions = instructions
                self.tools = tools
                self.tool_resources = tool_resources
                self.metadata = metadata
                self.temperature = temperature
                self.top_p = top_p
                self.stream = stream
                self.max_prompt_tokens = max_prompt_tokens
                self.max_completion_tokens = max_completion_tokens
                self.truncation_strategy = truncation_strategy
                self.tool_choice = tool_choice
                self.parallel_tool_calls = parallel_tool_calls
                self.response_format = response_format
            }
            public enum CodingKeys: String, CodingKey {
                case assistant_id
                case thread
                case model
                case instructions
                case tools
                case tool_resources
                case metadata
                case temperature
                case top_p
                case stream
                case max_prompt_tokens
                case max_completion_tokens
                case truncation_strategy
                case tool_choice
                case parallel_tool_calls
                case response_format
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                assistant_id = try container.decode(
                    Swift.String.self,
                    forKey: .assistant_id
                )
                thread = try container.decodeIfPresent(
                    Components.Schemas.CreateThreadRequest.self,
                    forKey: .thread
                )
                model = try container.decodeIfPresent(
                    Components.Schemas.CreateThreadAndRunRequest.modelPayload.self,
                    forKey: .model
                )
                instructions = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .instructions
                )
                tools = try container.decodeIfPresent(
                    Components.Schemas.CreateThreadAndRunRequest.toolsPayload.self,
                    forKey: .tools
                )
                tool_resources = try container.decodeIfPresent(
                    Components.Schemas.CreateThreadAndRunRequest.tool_resourcesPayload.self,
                    forKey: .tool_resources
                )
                metadata = try container.decodeIfPresent(
                    Components.Schemas.Metadata.self,
                    forKey: .metadata
                )
                temperature = try container.decodeIfPresent(
                    Swift.Double.self,
                    forKey: .temperature
                )
                top_p = try container.decodeIfPresent(
                    Swift.Double.self,
                    forKey: .top_p
                )
                stream = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .stream
                )
                max_prompt_tokens = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .max_prompt_tokens
                )
                max_completion_tokens = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .max_completion_tokens
                )
                truncation_strategy = try container.decodeIfPresent(
                    Components.Schemas.CreateThreadAndRunRequest.truncation_strategyPayload.self,
                    forKey: .truncation_strategy
                )
                tool_choice = try container.decodeIfPresent(
                    Components.Schemas.CreateThreadAndRunRequest.tool_choicePayload.self,
                    forKey: .tool_choice
                )
                parallel_tool_calls = try container.decodeIfPresent(
                    Components.Schemas.ParallelToolCalls.self,
                    forKey: .parallel_tool_calls
                )
                response_format = try container.decodeIfPresent(
                    Components.Schemas.AssistantsApiResponseFormatOption.self,
                    forKey: .response_format
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "assistant_id",
                    "thread",
                    "model",
                    "instructions",
                    "tools",
                    "tool_resources",
                    "metadata",
                    "temperature",
                    "top_p",
                    "stream",
                    "max_prompt_tokens",
                    "max_completion_tokens",
                    "truncation_strategy",
                    "tool_choice",
                    "parallel_tool_calls",
                    "response_format"
                ])
            }
        }
        /// Options to create a new thread. If no thread is provided when running a 
        /// request, an empty thread will be created.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/CreateThreadRequest`.
        public struct CreateThreadRequest: Codable, Hashable, Sendable {
            /// A list of [messages](/docs/api-reference/messages) to start the thread with.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadRequest/messages`.
            public var messages: [Components.Schemas.CreateMessageRequest]?
            /// A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadRequest/tool_resources`.
            public struct tool_resourcesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateThreadRequest/tool_resources/code_interpreter`.
                public struct code_interpreterPayload: Codable, Hashable, Sendable {
                    /// A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateThreadRequest/tool_resources/code_interpreter/file_ids`.
                    public var file_ids: [Swift.String]?
                    /// Creates a new `code_interpreterPayload`.
                    ///
                    /// - Parameters:
                    ///   - file_ids: A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                    public init(file_ids: [Swift.String]? = nil) {
                        self.file_ids = file_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case file_ids
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CreateThreadRequest/tool_resources/code_interpreter`.
                public var code_interpreter: Components.Schemas.CreateThreadRequest.tool_resourcesPayload.code_interpreterPayload?
                /// - Remark: Generated from `#/components/schemas/CreateThreadRequest/tool_resources/file_search`.
                @frozen public enum file_searchPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CreateThreadRequest/tool_resources/file_search/case1`.
                    public struct Case1Payload: Codable, Hashable, Sendable {
                        /// Creates a new `Case1Payload`.
                        public init() {}
                    }
                    /// - Remark: Generated from `#/components/schemas/CreateThreadRequest/tool_resources/file_search/case1`.
                    case case1(Components.Schemas.CreateThreadRequest.tool_resourcesPayload.file_searchPayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/CreateThreadRequest/tool_resources/file_search/case2`.
                    public struct Case2Payload: Codable, Hashable, Sendable {
                        /// Creates a new `Case2Payload`.
                        public init() {}
                    }
                    /// - Remark: Generated from `#/components/schemas/CreateThreadRequest/tool_resources/file_search/case2`.
                    case case2(Components.Schemas.CreateThreadRequest.tool_resourcesPayload.file_searchPayload.Case2Payload)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try value.encode(to: encoder)
                        case let .case2(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CreateThreadRequest/tool_resources/file_search`.
                public var file_search: Components.Schemas.CreateThreadRequest.tool_resourcesPayload.file_searchPayload?
                /// Creates a new `tool_resourcesPayload`.
                ///
                /// - Parameters:
                ///   - code_interpreter:
                ///   - file_search:
                public init(
                    code_interpreter: Components.Schemas.CreateThreadRequest.tool_resourcesPayload.code_interpreterPayload? = nil,
                    file_search: Components.Schemas.CreateThreadRequest.tool_resourcesPayload.file_searchPayload? = nil
                ) {
                    self.code_interpreter = code_interpreter
                    self.file_search = file_search
                }
                public enum CodingKeys: String, CodingKey {
                    case code_interpreter
                    case file_search
                }
            }
            /// A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateThreadRequest/tool_resources`.
            public var tool_resources: Components.Schemas.CreateThreadRequest.tool_resourcesPayload?
            /// - Remark: Generated from `#/components/schemas/CreateThreadRequest/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// Creates a new `CreateThreadRequest`.
            ///
            /// - Parameters:
            ///   - messages: A list of [messages](/docs/api-reference/messages) to start the thread with.
            ///   - tool_resources: A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///   - metadata:
            public init(
                messages: [Components.Schemas.CreateMessageRequest]? = nil,
                tool_resources: Components.Schemas.CreateThreadRequest.tool_resourcesPayload? = nil,
                metadata: Components.Schemas.Metadata? = nil
            ) {
                self.messages = messages
                self.tool_resources = tool_resources
                self.metadata = metadata
            }
            public enum CodingKeys: String, CodingKey {
                case messages
                case tool_resources
                case metadata
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                messages = try container.decodeIfPresent(
                    [Components.Schemas.CreateMessageRequest].self,
                    forKey: .messages
                )
                tool_resources = try container.decodeIfPresent(
                    Components.Schemas.CreateThreadRequest.tool_resourcesPayload.self,
                    forKey: .tool_resources
                )
                metadata = try container.decodeIfPresent(
                    Components.Schemas.Metadata.self,
                    forKey: .metadata
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "messages",
                    "tool_resources",
                    "metadata"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest`.
        @frozen public enum CreateTranscriptionRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/file`.
            public struct filePayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `filePayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case file(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.filePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/model`.
            public struct modelPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `modelPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case model(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.modelPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/language`.
            public struct languagePayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `languagePayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case language(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.languagePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/prompt`.
            public struct promptPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `promptPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case prompt(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.promptPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/response_format`.
            public struct response_formatPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `response_formatPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case response_format(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.response_formatPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/temperature`.
            public struct temperaturePayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `temperaturePayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case temperature(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.temperaturePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/include[]`.
            public struct include_lbrack__rbrack_Payload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `include_lbrack__rbrack_Payload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case include_lbrack__rbrack_(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.include_lbrack__rbrack_Payload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/timestamp_granularities[]`.
            public struct timestamp_granularities_lbrack__rbrack_Payload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `timestamp_granularities_lbrack__rbrack_Payload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case timestamp_granularities_lbrack__rbrack_(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.timestamp_granularities_lbrack__rbrack_Payload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/stream`.
            public struct streamPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `streamPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case stream(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.streamPayload>)
        }
        /// Represents a transcription response returned by model, based on the provided input.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseJson`.
        public struct CreateTranscriptionResponseJson: Codable, Hashable, Sendable {
            /// The transcribed text.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseJson/text`.
            public var text: Swift.String
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseJson/logprobsPayload`.
            public struct logprobsPayloadPayload: Codable, Hashable, Sendable {
                /// The token in the transcription.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseJson/logprobsPayload/token`.
                public var token: Swift.String?
                /// The log probability of the token.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseJson/logprobsPayload/logprob`.
                public var logprob: Swift.Double?
                /// The bytes of the token.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseJson/logprobsPayload/bytes`.
                public var bytes: [Swift.Double]?
                /// Creates a new `logprobsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - token: The token in the transcription.
                ///   - logprob: The log probability of the token.
                ///   - bytes: The bytes of the token.
                public init(
                    token: Swift.String? = nil,
                    logprob: Swift.Double? = nil,
                    bytes: [Swift.Double]? = nil
                ) {
                    self.token = token
                    self.logprob = logprob
                    self.bytes = bytes
                }
                public enum CodingKeys: String, CodingKey {
                    case token
                    case logprob
                    case bytes
                }
            }
            /// The log probabilities of the tokens in the transcription. Only returned with the models `gpt-4o-transcribe` and `gpt-4o-mini-transcribe` if `logprobs` is added to the `include` array.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseJson/logprobs`.
            public typealias logprobsPayload = [Components.Schemas.CreateTranscriptionResponseJson.logprobsPayloadPayload]
            /// The log probabilities of the tokens in the transcription. Only returned with the models `gpt-4o-transcribe` and `gpt-4o-mini-transcribe` if `logprobs` is added to the `include` array.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseJson/logprobs`.
            public var logprobs: Components.Schemas.CreateTranscriptionResponseJson.logprobsPayload?
            /// Creates a new `CreateTranscriptionResponseJson`.
            ///
            /// - Parameters:
            ///   - text: The transcribed text.
            ///   - logprobs: The log probabilities of the tokens in the transcription. Only returned with the models `gpt-4o-transcribe` and `gpt-4o-mini-transcribe` if `logprobs` is added to the `include` array.
            public init(
                text: Swift.String,
                logprobs: Components.Schemas.CreateTranscriptionResponseJson.logprobsPayload? = nil
            ) {
                self.text = text
                self.logprobs = logprobs
            }
            public enum CodingKeys: String, CodingKey {
                case text
                case logprobs
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseStreamEvent`.
        public struct CreateTranscriptionResponseStreamEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseStreamEvent/value1`.
            public var value1: Components.Schemas.TranscriptTextDeltaEvent?
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseStreamEvent/value2`.
            public var value2: Components.Schemas.TranscriptTextDoneEvent?
            /// Creates a new `CreateTranscriptionResponseStreamEvent`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.TranscriptTextDeltaEvent? = nil,
                value2: Components.Schemas.TranscriptTextDoneEvent? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    value1 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value2 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        value1,
                        value2
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try value1?.encode(to: encoder)
                try value2?.encode(to: encoder)
            }
        }
        /// Represents a verbose json transcription response returned by model, based on the provided input.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseVerboseJson`.
        public struct CreateTranscriptionResponseVerboseJson: Codable, Hashable, Sendable {
            /// The language of the input audio.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseVerboseJson/language`.
            public var language: Swift.String
            /// The duration of the input audio.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseVerboseJson/duration`.
            public var duration: Swift.Double
            /// The transcribed text.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseVerboseJson/text`.
            public var text: Swift.String
            /// Extracted words and their corresponding timestamps.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseVerboseJson/words`.
            public var words: [Components.Schemas.TranscriptionWord]?
            /// Segments of the transcribed text and their corresponding details.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseVerboseJson/segments`.
            public var segments: [Components.Schemas.TranscriptionSegment]?
            /// Creates a new `CreateTranscriptionResponseVerboseJson`.
            ///
            /// - Parameters:
            ///   - language: The language of the input audio.
            ///   - duration: The duration of the input audio.
            ///   - text: The transcribed text.
            ///   - words: Extracted words and their corresponding timestamps.
            ///   - segments: Segments of the transcribed text and their corresponding details.
            public init(
                language: Swift.String,
                duration: Swift.Double,
                text: Swift.String,
                words: [Components.Schemas.TranscriptionWord]? = nil,
                segments: [Components.Schemas.TranscriptionSegment]? = nil
            ) {
                self.language = language
                self.duration = duration
                self.text = text
                self.words = words
                self.segments = segments
            }
            public enum CodingKeys: String, CodingKey {
                case language
                case duration
                case text
                case words
                case segments
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateTranslationRequest`.
        @frozen public enum CreateTranslationRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/schemas/CreateTranslationRequest/file`.
            public struct filePayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `filePayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case file(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranslationRequest.filePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranslationRequest/model`.
            public struct modelPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `modelPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case model(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranslationRequest.modelPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranslationRequest/prompt`.
            public struct promptPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `promptPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case prompt(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranslationRequest.promptPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranslationRequest/response_format`.
            public struct response_formatPayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `response_formatPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case response_format(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranslationRequest.response_formatPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranslationRequest/temperature`.
            public struct temperaturePayload: Sendable, Hashable {
                public var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `temperaturePayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case temperature(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranslationRequest.temperaturePayload>)
        }
        /// - Remark: Generated from `#/components/schemas/CreateTranslationResponseJson`.
        public struct CreateTranslationResponseJson: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreateTranslationResponseJson/text`.
            public var text: Swift.String
            /// Creates a new `CreateTranslationResponseJson`.
            ///
            /// - Parameters:
            ///   - text:
            public init(text: Swift.String) {
                self.text = text
            }
            public enum CodingKeys: String, CodingKey {
                case text
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateTranslationResponseVerboseJson`.
        public struct CreateTranslationResponseVerboseJson: Codable, Hashable, Sendable {
            /// The language of the output translation (always `english`).
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranslationResponseVerboseJson/language`.
            public var language: Swift.String
            /// The duration of the input audio.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranslationResponseVerboseJson/duration`.
            public var duration: Swift.Double
            /// The translated text.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranslationResponseVerboseJson/text`.
            public var text: Swift.String
            /// Segments of the translated text and their corresponding details.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranslationResponseVerboseJson/segments`.
            public var segments: [Components.Schemas.TranscriptionSegment]?
            /// Creates a new `CreateTranslationResponseVerboseJson`.
            ///
            /// - Parameters:
            ///   - language: The language of the output translation (always `english`).
            ///   - duration: The duration of the input audio.
            ///   - text: The translated text.
            ///   - segments: Segments of the translated text and their corresponding details.
            public init(
                language: Swift.String,
                duration: Swift.Double,
                text: Swift.String,
                segments: [Components.Schemas.TranscriptionSegment]? = nil
            ) {
                self.language = language
                self.duration = duration
                self.text = text
                self.segments = segments
            }
            public enum CodingKeys: String, CodingKey {
                case language
                case duration
                case text
                case segments
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateUploadRequest`.
        public struct CreateUploadRequest: Codable, Hashable, Sendable {
            /// The name of the file to upload.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateUploadRequest/filename`.
            public var filename: Swift.String
            /// The intended purpose of the uploaded file.
            ///
            /// See the [documentation on File purposes](/docs/api-reference/files/create#files-create-purpose).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateUploadRequest/purpose`.
            @frozen public enum purposePayload: String, Codable, Hashable, Sendable {
                case assistants = "assistants"
                case batch = "batch"
                case fine_hyphen_tune = "fine-tune"
                case vision = "vision"
            }
            /// The intended purpose of the uploaded file.
            ///
            /// See the [documentation on File purposes](/docs/api-reference/files/create#files-create-purpose).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateUploadRequest/purpose`.
            public var purpose: Components.Schemas.CreateUploadRequest.purposePayload
            /// The number of bytes in the file you are uploading.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateUploadRequest/bytes`.
            public var bytes: Swift.Int
            /// The MIME type of the file.
            ///
            /// This must fall within the supported MIME types for your file purpose. See the supported MIME types for assistants and vision.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateUploadRequest/mime_type`.
            public var mime_type: Swift.String
            /// Creates a new `CreateUploadRequest`.
            ///
            /// - Parameters:
            ///   - filename: The name of the file to upload.
            ///   - purpose: The intended purpose of the uploaded file.
            ///   - bytes: The number of bytes in the file you are uploading.
            ///   - mime_type: The MIME type of the file.
            public init(
                filename: Swift.String,
                purpose: Components.Schemas.CreateUploadRequest.purposePayload,
                bytes: Swift.Int,
                mime_type: Swift.String
            ) {
                self.filename = filename
                self.purpose = purpose
                self.bytes = bytes
                self.mime_type = mime_type
            }
            public enum CodingKeys: String, CodingKey {
                case filename
                case purpose
                case bytes
                case mime_type
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                filename = try container.decode(
                    Swift.String.self,
                    forKey: .filename
                )
                purpose = try container.decode(
                    Components.Schemas.CreateUploadRequest.purposePayload.self,
                    forKey: .purpose
                )
                bytes = try container.decode(
                    Swift.Int.self,
                    forKey: .bytes
                )
                mime_type = try container.decode(
                    Swift.String.self,
                    forKey: .mime_type
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "filename",
                    "purpose",
                    "bytes",
                    "mime_type"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeleteAssistantResponse`.
        public struct DeleteAssistantResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeleteAssistantResponse/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/DeleteAssistantResponse/deleted`.
            public var deleted: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/DeleteAssistantResponse/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case assistant_period_deleted = "assistant.deleted"
            }
            /// - Remark: Generated from `#/components/schemas/DeleteAssistantResponse/object`.
            public var object: Components.Schemas.DeleteAssistantResponse.objectPayload
            /// Creates a new `DeleteAssistantResponse`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - deleted:
            ///   - object:
            public init(
                id: Swift.String,
                deleted: Swift.Bool,
                object: Components.Schemas.DeleteAssistantResponse.objectPayload
            ) {
                self.id = id
                self.deleted = deleted
                self.object = object
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case deleted
                case object
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeleteFileResponse`.
        public struct DeleteFileResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeleteFileResponse/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/DeleteFileResponse/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case file = "file"
            }
            /// - Remark: Generated from `#/components/schemas/DeleteFileResponse/object`.
            public var object: Components.Schemas.DeleteFileResponse.objectPayload
            /// - Remark: Generated from `#/components/schemas/DeleteFileResponse/deleted`.
            public var deleted: Swift.Bool
            /// Creates a new `DeleteFileResponse`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - object:
            ///   - deleted:
            public init(
                id: Swift.String,
                object: Components.Schemas.DeleteFileResponse.objectPayload,
                deleted: Swift.Bool
            ) {
                self.id = id
                self.object = object
                self.deleted = deleted
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case object
                case deleted
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeleteFineTuningCheckpointPermissionResponse`.
        public struct DeleteFineTuningCheckpointPermissionResponse: Codable, Hashable, Sendable {
            /// The ID of the fine-tuned model checkpoint permission that was deleted.
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteFineTuningCheckpointPermissionResponse/id`.
            public var id: Swift.String
            /// The object type, which is always "checkpoint.permission".
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteFineTuningCheckpointPermissionResponse/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case checkpoint_period_permission = "checkpoint.permission"
            }
            /// The object type, which is always "checkpoint.permission".
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteFineTuningCheckpointPermissionResponse/object`.
            public var object: Components.Schemas.DeleteFineTuningCheckpointPermissionResponse.objectPayload
            /// Whether the fine-tuned model checkpoint permission was successfully deleted.
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteFineTuningCheckpointPermissionResponse/deleted`.
            public var deleted: Swift.Bool
            /// Creates a new `DeleteFineTuningCheckpointPermissionResponse`.
            ///
            /// - Parameters:
            ///   - id: The ID of the fine-tuned model checkpoint permission that was deleted.
            ///   - object: The object type, which is always "checkpoint.permission".
            ///   - deleted: Whether the fine-tuned model checkpoint permission was successfully deleted.
            public init(
                id: Swift.String,
                object: Components.Schemas.DeleteFineTuningCheckpointPermissionResponse.objectPayload,
                deleted: Swift.Bool
            ) {
                self.id = id
                self.object = object
                self.deleted = deleted
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case object
                case deleted
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeleteMessageResponse`.
        public struct DeleteMessageResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeleteMessageResponse/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/DeleteMessageResponse/deleted`.
            public var deleted: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/DeleteMessageResponse/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case thread_period_message_period_deleted = "thread.message.deleted"
            }
            /// - Remark: Generated from `#/components/schemas/DeleteMessageResponse/object`.
            public var object: Components.Schemas.DeleteMessageResponse.objectPayload
            /// Creates a new `DeleteMessageResponse`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - deleted:
            ///   - object:
            public init(
                id: Swift.String,
                deleted: Swift.Bool,
                object: Components.Schemas.DeleteMessageResponse.objectPayload
            ) {
                self.id = id
                self.deleted = deleted
                self.object = object
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case deleted
                case object
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeleteModelResponse`.
        public struct DeleteModelResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeleteModelResponse/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/DeleteModelResponse/deleted`.
            public var deleted: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/DeleteModelResponse/object`.
            public var object: Swift.String
            /// Creates a new `DeleteModelResponse`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - deleted:
            ///   - object:
            public init(
                id: Swift.String,
                deleted: Swift.Bool,
                object: Swift.String
            ) {
                self.id = id
                self.deleted = deleted
                self.object = object
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case deleted
                case object
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeleteThreadResponse`.
        public struct DeleteThreadResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeleteThreadResponse/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/DeleteThreadResponse/deleted`.
            public var deleted: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/DeleteThreadResponse/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case thread_period_deleted = "thread.deleted"
            }
            /// - Remark: Generated from `#/components/schemas/DeleteThreadResponse/object`.
            public var object: Components.Schemas.DeleteThreadResponse.objectPayload
            /// Creates a new `DeleteThreadResponse`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - deleted:
            ///   - object:
            public init(
                id: Swift.String,
                deleted: Swift.Bool,
                object: Components.Schemas.DeleteThreadResponse.objectPayload
            ) {
                self.id = id
                self.deleted = deleted
                self.object = object
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case deleted
                case object
            }
        }
        /// A message input to the model with a role indicating instruction following
        /// hierarchy. Instructions given with the `developer` or `system` role take
        /// precedence over instructions given with the `user` role. Messages with the
        /// `assistant` role are presumed to have been generated by the model in previous
        /// interactions.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/EasyInputMessage`.
        public struct EasyInputMessage: Codable, Hashable, Sendable {
            /// The role of the message input. One of `user`, `assistant`, `system`, or
            /// `developer`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EasyInputMessage/role`.
            @frozen public enum rolePayload: String, Codable, Hashable, Sendable {
                case user = "user"
                case assistant = "assistant"
                case system = "system"
                case developer = "developer"
            }
            /// The role of the message input. One of `user`, `assistant`, `system`, or
            /// `developer`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EasyInputMessage/role`.
            public var role: Components.Schemas.EasyInputMessage.rolePayload
            /// Text, image, or audio input to the model, used to generate a response.
            /// Can also contain previous assistant responses.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EasyInputMessage/content`.
            @frozen public enum contentPayload: Codable, Hashable, Sendable {
                /// A text input to the model.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/EasyInputMessage/content/case1`.
                case case1(Swift.String)
                /// - Remark: Generated from `#/components/schemas/EasyInputMessage/content/case2`.
                case InputMessageContentList(Components.Schemas.InputMessageContentList)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .InputMessageContentList(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .InputMessageContentList(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// Text, image, or audio input to the model, used to generate a response.
            /// Can also contain previous assistant responses.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EasyInputMessage/content`.
            public var content: Components.Schemas.EasyInputMessage.contentPayload
            /// The type of the message input. Always `message`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EasyInputMessage/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case message = "message"
            }
            /// The type of the message input. Always `message`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EasyInputMessage/type`.
            public var _type: Components.Schemas.EasyInputMessage._typePayload?
            /// Creates a new `EasyInputMessage`.
            ///
            /// - Parameters:
            ///   - role: The role of the message input. One of `user`, `assistant`, `system`, or
            ///   - content: Text, image, or audio input to the model, used to generate a response.
            ///   - _type: The type of the message input. Always `message`.
            public init(
                role: Components.Schemas.EasyInputMessage.rolePayload,
                content: Components.Schemas.EasyInputMessage.contentPayload,
                _type: Components.Schemas.EasyInputMessage._typePayload? = nil
            ) {
                self.role = role
                self.content = content
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case role
                case content
                case _type = "type"
            }
        }
        /// Represents an embedding vector returned by embedding endpoint.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/Embedding`.
        public struct Embedding: Codable, Hashable, Sendable {
            /// The index of the embedding in the list of embeddings.
            ///
            /// - Remark: Generated from `#/components/schemas/Embedding/index`.
            public var index: Swift.Int
            /// The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/Embedding/embedding`.
            public var embedding: [Swift.Double]
            /// The object type, which is always "embedding".
            ///
            /// - Remark: Generated from `#/components/schemas/Embedding/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case embedding = "embedding"
            }
            /// The object type, which is always "embedding".
            ///
            /// - Remark: Generated from `#/components/schemas/Embedding/object`.
            public var object: Components.Schemas.Embedding.objectPayload
            /// Creates a new `Embedding`.
            ///
            /// - Parameters:
            ///   - index: The index of the embedding in the list of embeddings.
            ///   - embedding: The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).
            ///   - object: The object type, which is always "embedding".
            public init(
                index: Swift.Int,
                embedding: [Swift.Double],
                object: Components.Schemas.Embedding.objectPayload
            ) {
                self.index = index
                self.embedding = embedding
                self.object = object
            }
            public enum CodingKeys: String, CodingKey {
                case index
                case embedding
                case object
            }
        }
        /// - Remark: Generated from `#/components/schemas/Error`.
        public struct _Error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Error/code`.
            public var code: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Error/message`.
            public var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/Error/param`.
            public var param: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Error/type`.
            public var _type: Swift.String
            /// Creates a new `_Error`.
            ///
            /// - Parameters:
            ///   - code:
            ///   - message:
            ///   - param:
            ///   - _type:
            public init(
                code: Swift.String? = nil,
                message: Swift.String,
                param: Swift.String? = nil,
                _type: Swift.String
            ) {
                self.code = code
                self.message = message
                self.param = param
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case code
                case message
                case param
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ErrorResponse`.
        public struct ErrorResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/error`.
            public var error: Components.Schemas._Error
            /// Creates a new `ErrorResponse`.
            ///
            /// - Parameters:
            ///   - error:
            public init(error: Components.Schemas._Error) {
                self.error = error
            }
            public enum CodingKeys: String, CodingKey {
                case error
            }
        }
        /// An Eval object with a data source config and testing criteria.
        /// An Eval represents a task to be done for your LLM integration.
        /// Like:
        ///  - Improve the quality of my chatbot
        ///  - See how well my chatbot handles customer support
        ///  - Check if o3-mini is better at my usecase than gpt-4o
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/Eval`.
        public struct Eval: Codable, Hashable, Sendable {
            /// The object type.
            ///
            /// - Remark: Generated from `#/components/schemas/Eval/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case eval = "eval"
            }
            /// The object type.
            ///
            /// - Remark: Generated from `#/components/schemas/Eval/object`.
            public var object: Components.Schemas.Eval.objectPayload
            /// Unique identifier for the evaluation.
            ///
            /// - Remark: Generated from `#/components/schemas/Eval/id`.
            public var id: Swift.String
            /// The name of the evaluation.
            ///
            /// - Remark: Generated from `#/components/schemas/Eval/name`.
            public var name: Swift.String
            /// Configuration of data sources used in runs of the evaluation.
            ///
            /// - Remark: Generated from `#/components/schemas/Eval/data_source_config`.
            @frozen public enum data_source_configPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Eval/data_source_config/case1`.
                case EvalCustomDataSourceConfig(Components.Schemas.EvalCustomDataSourceConfig)
                /// - Remark: Generated from `#/components/schemas/Eval/data_source_config/case2`.
                case EvalStoredCompletionsDataSourceConfig(Components.Schemas.EvalStoredCompletionsDataSourceConfig)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .EvalCustomDataSourceConfig(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .EvalStoredCompletionsDataSourceConfig(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .EvalCustomDataSourceConfig(value):
                        try value.encode(to: encoder)
                    case let .EvalStoredCompletionsDataSourceConfig(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// Configuration of data sources used in runs of the evaluation.
            ///
            /// - Remark: Generated from `#/components/schemas/Eval/data_source_config`.
            public var data_source_config: Components.Schemas.Eval.data_source_configPayload
            /// - Remark: Generated from `#/components/schemas/Eval/testing_criteriaPayload`.
            @frozen public enum testing_criteriaPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Eval/testing_criteriaPayload/case1`.
                case EvalLabelModelGrader(Components.Schemas.EvalLabelModelGrader)
                /// - Remark: Generated from `#/components/schemas/Eval/testing_criteriaPayload/case2`.
                case EvalStringCheckGrader(Components.Schemas.EvalStringCheckGrader)
                /// - Remark: Generated from `#/components/schemas/Eval/testing_criteriaPayload/case3`.
                case EvalTextSimilarityGrader(Components.Schemas.EvalTextSimilarityGrader)
                /// - Remark: Generated from `#/components/schemas/Eval/testing_criteriaPayload/case4`.
                case EvalPythonGrader(Components.Schemas.EvalPythonGrader)
                /// - Remark: Generated from `#/components/schemas/Eval/testing_criteriaPayload/case5`.
                case EvalScoreModelGrader(Components.Schemas.EvalScoreModelGrader)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .EvalLabelModelGrader(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .EvalStringCheckGrader(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .EvalTextSimilarityGrader(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .EvalPythonGrader(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .EvalScoreModelGrader(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .EvalLabelModelGrader(value):
                        try value.encode(to: encoder)
                    case let .EvalStringCheckGrader(value):
                        try value.encode(to: encoder)
                    case let .EvalTextSimilarityGrader(value):
                        try value.encode(to: encoder)
                    case let .EvalPythonGrader(value):
                        try value.encode(to: encoder)
                    case let .EvalScoreModelGrader(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// A list of testing criteria.
            ///
            /// - Remark: Generated from `#/components/schemas/Eval/testing_criteria`.
            public typealias testing_criteriaPayload = [Components.Schemas.Eval.testing_criteriaPayloadPayload]
            /// A list of testing criteria.
            ///
            /// - Remark: Generated from `#/components/schemas/Eval/testing_criteria`.
            public var testing_criteria: Components.Schemas.Eval.testing_criteriaPayload
            /// The Unix timestamp (in seconds) for when the eval was created.
            ///
            /// - Remark: Generated from `#/components/schemas/Eval/created_at`.
            public var created_at: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Eval/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// Creates a new `Eval`.
            ///
            /// - Parameters:
            ///   - object: The object type.
            ///   - id: Unique identifier for the evaluation.
            ///   - name: The name of the evaluation.
            ///   - data_source_config: Configuration of data sources used in runs of the evaluation.
            ///   - testing_criteria: A list of testing criteria.
            ///   - created_at: The Unix timestamp (in seconds) for when the eval was created.
            ///   - metadata:
            public init(
                object: Components.Schemas.Eval.objectPayload,
                id: Swift.String,
                name: Swift.String,
                data_source_config: Components.Schemas.Eval.data_source_configPayload,
                testing_criteria: Components.Schemas.Eval.testing_criteriaPayload,
                created_at: Swift.Int,
                metadata: Components.Schemas.Metadata? = nil
            ) {
                self.object = object
                self.id = id
                self.name = name
                self.data_source_config = data_source_config
                self.testing_criteria = testing_criteria
                self.created_at = created_at
                self.metadata = metadata
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case id
                case name
                case data_source_config
                case testing_criteria
                case created_at
                case metadata
            }
        }
        /// An object representing an error response from the Eval API.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/EvalApiError`.
        public struct EvalApiError: Codable, Hashable, Sendable {
            /// The error code.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalApiError/code`.
            public var code: Swift.String
            /// The error message.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalApiError/message`.
            public var message: Swift.String
            /// Creates a new `EvalApiError`.
            ///
            /// - Parameters:
            ///   - code: The error code.
            ///   - message: The error message.
            public init(
                code: Swift.String,
                message: Swift.String
            ) {
                self.code = code
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case code
                case message
            }
        }
        /// A CustomDataSourceConfig which specifies the schema of your `item` and optionally `sample` namespaces.
        /// The response schema defines the shape of the data that will be:
        /// - Used to define your testing criteria and
        /// - What data is required when creating a run
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/EvalCustomDataSourceConfig`.
        public struct EvalCustomDataSourceConfig: Codable, Hashable, Sendable {
            /// The type of data source. Always `custom`.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalCustomDataSourceConfig/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case custom = "custom"
            }
            /// The type of data source. Always `custom`.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalCustomDataSourceConfig/type`.
            public var _type: Components.Schemas.EvalCustomDataSourceConfig._typePayload
            /// The json schema for the run data source items.
            /// Learn how to build JSON schemas [here](https://json-schema.org/).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EvalCustomDataSourceConfig/schema`.
            public struct schemaPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                /// Creates a new `schemaPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The json schema for the run data source items.
            /// Learn how to build JSON schemas [here](https://json-schema.org/).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EvalCustomDataSourceConfig/schema`.
            public var schema: Components.Schemas.EvalCustomDataSourceConfig.schemaPayload
            /// Creates a new `EvalCustomDataSourceConfig`.
            ///
            /// - Parameters:
            ///   - _type: The type of data source. Always `custom`.
            ///   - schema: The json schema for the run data source items.
            public init(
                _type: Components.Schemas.EvalCustomDataSourceConfig._typePayload,
                schema: Components.Schemas.EvalCustomDataSourceConfig.schemaPayload
            ) {
                self._type = _type
                self.schema = schema
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case schema
            }
        }
        /// A message input to the model with a role indicating instruction following
        /// hierarchy. Instructions given with the `developer` or `system` role take
        /// precedence over instructions given with the `user` role. Messages with the
        /// `assistant` role are presumed to have been generated by the model in previous
        /// interactions.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/EvalItem`.
        public struct EvalItem: Codable, Hashable, Sendable {
            /// The role of the message input. One of `user`, `assistant`, `system`, or
            /// `developer`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EvalItem/role`.
            @frozen public enum rolePayload: String, Codable, Hashable, Sendable {
                case user = "user"
                case assistant = "assistant"
                case system = "system"
                case developer = "developer"
            }
            /// The role of the message input. One of `user`, `assistant`, `system`, or
            /// `developer`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EvalItem/role`.
            public var role: Components.Schemas.EvalItem.rolePayload
            /// Text inputs to the model - can contain template strings.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EvalItem/content`.
            @frozen public enum contentPayload: Codable, Hashable, Sendable {
                /// A text input to the model.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/EvalItem/content/case1`.
                case case1(Swift.String)
                /// - Remark: Generated from `#/components/schemas/EvalItem/content/case2`.
                case InputTextContent(Components.Schemas.InputTextContent)
                /// A text output from the model.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/EvalItem/content/case3`.
                public struct Case3Payload: Codable, Hashable, Sendable {
                    /// The type of the output text. Always `output_text`.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/EvalItem/content/case3/type`.
                    @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                        case output_text = "output_text"
                    }
                    /// The type of the output text. Always `output_text`.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/EvalItem/content/case3/type`.
                    public var _type: Components.Schemas.EvalItem.contentPayload.Case3Payload._typePayload
                    /// The text output from the model.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/EvalItem/content/case3/text`.
                    public var text: Swift.String
                    /// Creates a new `Case3Payload`.
                    ///
                    /// - Parameters:
                    ///   - _type: The type of the output text. Always `output_text`.
                    ///   - text: The text output from the model.
                    public init(
                        _type: Components.Schemas.EvalItem.contentPayload.Case3Payload._typePayload,
                        text: Swift.String
                    ) {
                        self._type = _type
                        self.text = text
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _type = "type"
                        case text
                    }
                }
                /// A text output from the model.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/EvalItem/content/case3`.
                case case3(Components.Schemas.EvalItem.contentPayload.Case3Payload)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .InputTextContent(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case3(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .InputTextContent(value):
                        try value.encode(to: encoder)
                    case let .case3(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// Text inputs to the model - can contain template strings.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EvalItem/content`.
            public var content: Components.Schemas.EvalItem.contentPayload
            /// The type of the message input. Always `message`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EvalItem/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case message = "message"
            }
            /// The type of the message input. Always `message`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EvalItem/type`.
            public var _type: Components.Schemas.EvalItem._typePayload?
            /// Creates a new `EvalItem`.
            ///
            /// - Parameters:
            ///   - role: The role of the message input. One of `user`, `assistant`, `system`, or
            ///   - content: Text inputs to the model - can contain template strings.
            ///   - _type: The type of the message input. Always `message`.
            public init(
                role: Components.Schemas.EvalItem.rolePayload,
                content: Components.Schemas.EvalItem.contentPayload,
                _type: Components.Schemas.EvalItem._typePayload? = nil
            ) {
                self.role = role
                self.content = content
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case role
                case content
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/EvalJsonlFileContentSource`.
        public struct EvalJsonlFileContentSource: Codable, Hashable, Sendable {
            /// The type of jsonl source. Always `file_content`.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalJsonlFileContentSource/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case file_content = "file_content"
            }
            /// The type of jsonl source. Always `file_content`.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalJsonlFileContentSource/type`.
            public var _type: Components.Schemas.EvalJsonlFileContentSource._typePayload
            /// - Remark: Generated from `#/components/schemas/EvalJsonlFileContentSource/contentPayload`.
            public struct contentPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/EvalJsonlFileContentSource/contentPayload/item`.
                public struct itemPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                    /// Creates a new `itemPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// - Remark: Generated from `#/components/schemas/EvalJsonlFileContentSource/contentPayload/item`.
                public var item: Components.Schemas.EvalJsonlFileContentSource.contentPayloadPayload.itemPayload
                /// - Remark: Generated from `#/components/schemas/EvalJsonlFileContentSource/contentPayload/sample`.
                public struct samplePayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                    /// Creates a new `samplePayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// - Remark: Generated from `#/components/schemas/EvalJsonlFileContentSource/contentPayload/sample`.
                public var sample: Components.Schemas.EvalJsonlFileContentSource.contentPayloadPayload.samplePayload?
                /// Creates a new `contentPayloadPayload`.
                ///
                /// - Parameters:
                ///   - item:
                ///   - sample:
                public init(
                    item: Components.Schemas.EvalJsonlFileContentSource.contentPayloadPayload.itemPayload,
                    sample: Components.Schemas.EvalJsonlFileContentSource.contentPayloadPayload.samplePayload? = nil
                ) {
                    self.item = item
                    self.sample = sample
                }
                public enum CodingKeys: String, CodingKey {
                    case item
                    case sample
                }
            }
            /// The content of the jsonl file.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalJsonlFileContentSource/content`.
            public typealias contentPayload = [Components.Schemas.EvalJsonlFileContentSource.contentPayloadPayload]
            /// The content of the jsonl file.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalJsonlFileContentSource/content`.
            public var content: Components.Schemas.EvalJsonlFileContentSource.contentPayload
            /// Creates a new `EvalJsonlFileContentSource`.
            ///
            /// - Parameters:
            ///   - _type: The type of jsonl source. Always `file_content`.
            ///   - content: The content of the jsonl file.
            public init(
                _type: Components.Schemas.EvalJsonlFileContentSource._typePayload,
                content: Components.Schemas.EvalJsonlFileContentSource.contentPayload
            ) {
                self._type = _type
                self.content = content
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case content
            }
        }
        /// - Remark: Generated from `#/components/schemas/EvalJsonlFileIdSource`.
        public struct EvalJsonlFileIdSource: Codable, Hashable, Sendable {
            /// The type of jsonl source. Always `file_id`.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalJsonlFileIdSource/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case file_id = "file_id"
            }
            /// The type of jsonl source. Always `file_id`.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalJsonlFileIdSource/type`.
            public var _type: Components.Schemas.EvalJsonlFileIdSource._typePayload
            /// The identifier of the file.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalJsonlFileIdSource/id`.
            public var id: Swift.String
            /// Creates a new `EvalJsonlFileIdSource`.
            ///
            /// - Parameters:
            ///   - _type: The type of jsonl source. Always `file_id`.
            ///   - id: The identifier of the file.
            public init(
                _type: Components.Schemas.EvalJsonlFileIdSource._typePayload,
                id: Swift.String
            ) {
                self._type = _type
                self.id = id
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
            }
        }
        /// A LabelModelGrader object which uses a model to assign labels to each item
        /// in the evaluation.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/EvalLabelModelGrader`.
        public struct EvalLabelModelGrader: Codable, Hashable, Sendable {
            /// The object type, which is always `label_model`.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalLabelModelGrader/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case label_model = "label_model"
            }
            /// The object type, which is always `label_model`.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalLabelModelGrader/type`.
            public var _type: Components.Schemas.EvalLabelModelGrader._typePayload
            /// The name of the grader.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalLabelModelGrader/name`.
            public var name: Swift.String
            /// The model to use for the evaluation. Must support structured outputs.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalLabelModelGrader/model`.
            public var model: Swift.String
            /// - Remark: Generated from `#/components/schemas/EvalLabelModelGrader/input`.
            public var input: [Components.Schemas.EvalItem]
            /// The labels to assign to each item in the evaluation.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalLabelModelGrader/labels`.
            public var labels: [Swift.String]
            /// The labels that indicate a passing result. Must be a subset of labels.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalLabelModelGrader/passing_labels`.
            public var passing_labels: [Swift.String]
            /// Creates a new `EvalLabelModelGrader`.
            ///
            /// - Parameters:
            ///   - _type: The object type, which is always `label_model`.
            ///   - name: The name of the grader.
            ///   - model: The model to use for the evaluation. Must support structured outputs.
            ///   - input:
            ///   - labels: The labels to assign to each item in the evaluation.
            ///   - passing_labels: The labels that indicate a passing result. Must be a subset of labels.
            public init(
                _type: Components.Schemas.EvalLabelModelGrader._typePayload,
                name: Swift.String,
                model: Swift.String,
                input: [Components.Schemas.EvalItem],
                labels: [Swift.String],
                passing_labels: [Swift.String]
            ) {
                self._type = _type
                self.name = name
                self.model = model
                self.input = input
                self.labels = labels
                self.passing_labels = passing_labels
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case name
                case model
                case input
                case labels
                case passing_labels
            }
        }
        /// An object representing a list of evals.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/EvalList`.
        public struct EvalList: Codable, Hashable, Sendable {
            /// The type of this object. It is always set to "list".
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EvalList/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case list = "list"
            }
            /// The type of this object. It is always set to "list".
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EvalList/object`.
            public var object: Components.Schemas.EvalList.objectPayload
            /// An array of eval objects.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EvalList/data`.
            public var data: [Components.Schemas.Eval]
            /// The identifier of the first eval in the data array.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalList/first_id`.
            public var first_id: Swift.String
            /// The identifier of the last eval in the data array.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalList/last_id`.
            public var last_id: Swift.String
            /// Indicates whether there are more evals available.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalList/has_more`.
            public var has_more: Swift.Bool
            /// Creates a new `EvalList`.
            ///
            /// - Parameters:
            ///   - object: The type of this object. It is always set to "list".
            ///   - data: An array of eval objects.
            ///   - first_id: The identifier of the first eval in the data array.
            ///   - last_id: The identifier of the last eval in the data array.
            ///   - has_more: Indicates whether there are more evals available.
            public init(
                object: Components.Schemas.EvalList.objectPayload,
                data: [Components.Schemas.Eval],
                first_id: Swift.String,
                last_id: Swift.String,
                has_more: Swift.Bool
            ) {
                self.object = object
                self.data = data
                self.first_id = first_id
                self.last_id = last_id
                self.has_more = has_more
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
                case first_id
                case last_id
                case has_more
            }
        }
        /// A PythonGrader object that runs a python script on the input.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/EvalPythonGrader`.
        public struct EvalPythonGrader: Codable, Hashable, Sendable {
            /// The object type, which is always `python`.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalPythonGrader/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case python = "python"
            }
            /// The object type, which is always `python`.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalPythonGrader/type`.
            public var _type: Components.Schemas.EvalPythonGrader._typePayload
            /// The name of the grader.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalPythonGrader/name`.
            public var name: Swift.String
            /// The source code of the python script.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalPythonGrader/source`.
            public var source: Swift.String
            /// The threshold for the score.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalPythonGrader/pass_threshold`.
            public var pass_threshold: Swift.Double?
            /// The image tag to use for the python script.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalPythonGrader/image_tag`.
            public var image_tag: Swift.String?
            /// Creates a new `EvalPythonGrader`.
            ///
            /// - Parameters:
            ///   - _type: The object type, which is always `python`.
            ///   - name: The name of the grader.
            ///   - source: The source code of the python script.
            ///   - pass_threshold: The threshold for the score.
            ///   - image_tag: The image tag to use for the python script.
            public init(
                _type: Components.Schemas.EvalPythonGrader._typePayload,
                name: Swift.String,
                source: Swift.String,
                pass_threshold: Swift.Double? = nil,
                image_tag: Swift.String? = nil
            ) {
                self._type = _type
                self.name = name
                self.source = source
                self.pass_threshold = pass_threshold
                self.image_tag = image_tag
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case name
                case source
                case pass_threshold
                case image_tag
            }
        }
        /// A EvalResponsesSource object describing a run data source configuration.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/EvalResponsesSource`.
        public struct EvalResponsesSource: Codable, Hashable, Sendable {
            /// The type of run data source. Always `responses`.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalResponsesSource/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case responses = "responses"
            }
            /// The type of run data source. Always `responses`.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalResponsesSource/type`.
            public var _type: Components.Schemas.EvalResponsesSource._typePayload
            /// Metadata filter for the responses. This is a query parameter used to select responses.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalResponsesSource/metadata`.
            public var metadata: OpenAPIRuntime.OpenAPIObjectContainer?
            /// The name of the model to find responses for. This is a query parameter used to select responses.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalResponsesSource/model`.
            public var model: Swift.String?
            /// Optional search string for instructions. This is a query parameter used to select responses.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalResponsesSource/instructions_search`.
            public var instructions_search: Swift.String?
            /// Only include items created after this timestamp (inclusive). This is a query parameter used to select responses.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalResponsesSource/created_after`.
            public var created_after: Swift.Int?
            /// Only include items created before this timestamp (inclusive). This is a query parameter used to select responses.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalResponsesSource/created_before`.
            public var created_before: Swift.Int?
            /// Whether the response has tool calls. This is a query parameter used to select responses.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalResponsesSource/has_tool_calls`.
            public var has_tool_calls: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/EvalResponsesSource/reasoning_effort`.
            public var reasoning_effort: Components.Schemas.ReasoningEffort?
            /// Sampling temperature. This is a query parameter used to select responses.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalResponsesSource/temperature`.
            public var temperature: Swift.Double?
            /// Nucleus sampling parameter. This is a query parameter used to select responses.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalResponsesSource/top_p`.
            public var top_p: Swift.Double?
            /// List of user identifiers. This is a query parameter used to select responses.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalResponsesSource/users`.
            public var users: [Swift.String]?
            /// Whether to allow parallel tool calls. This is a query parameter used to select responses.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalResponsesSource/allow_parallel_tool_calls`.
            public var allow_parallel_tool_calls: Swift.Bool?
            /// Creates a new `EvalResponsesSource`.
            ///
            /// - Parameters:
            ///   - _type: The type of run data source. Always `responses`.
            ///   - metadata: Metadata filter for the responses. This is a query parameter used to select responses.
            ///   - model: The name of the model to find responses for. This is a query parameter used to select responses.
            ///   - instructions_search: Optional search string for instructions. This is a query parameter used to select responses.
            ///   - created_after: Only include items created after this timestamp (inclusive). This is a query parameter used to select responses.
            ///   - created_before: Only include items created before this timestamp (inclusive). This is a query parameter used to select responses.
            ///   - has_tool_calls: Whether the response has tool calls. This is a query parameter used to select responses.
            ///   - reasoning_effort:
            ///   - temperature: Sampling temperature. This is a query parameter used to select responses.
            ///   - top_p: Nucleus sampling parameter. This is a query parameter used to select responses.
            ///   - users: List of user identifiers. This is a query parameter used to select responses.
            ///   - allow_parallel_tool_calls: Whether to allow parallel tool calls. This is a query parameter used to select responses.
            public init(
                _type: Components.Schemas.EvalResponsesSource._typePayload,
                metadata: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                model: Swift.String? = nil,
                instructions_search: Swift.String? = nil,
                created_after: Swift.Int? = nil,
                created_before: Swift.Int? = nil,
                has_tool_calls: Swift.Bool? = nil,
                reasoning_effort: Components.Schemas.ReasoningEffort? = nil,
                temperature: Swift.Double? = nil,
                top_p: Swift.Double? = nil,
                users: [Swift.String]? = nil,
                allow_parallel_tool_calls: Swift.Bool? = nil
            ) {
                self._type = _type
                self.metadata = metadata
                self.model = model
                self.instructions_search = instructions_search
                self.created_after = created_after
                self.created_before = created_before
                self.has_tool_calls = has_tool_calls
                self.reasoning_effort = reasoning_effort
                self.temperature = temperature
                self.top_p = top_p
                self.users = users
                self.allow_parallel_tool_calls = allow_parallel_tool_calls
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case metadata
                case model
                case instructions_search
                case created_after
                case created_before
                case has_tool_calls
                case reasoning_effort
                case temperature
                case top_p
                case users
                case allow_parallel_tool_calls
            }
        }
        /// A schema representing an evaluation run.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/EvalRun`.
        public struct EvalRun: Codable, Hashable, Sendable {
            /// The type of the object. Always "eval.run".
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRun/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case eval_period_run = "eval.run"
            }
            /// The type of the object. Always "eval.run".
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRun/object`.
            public var object: Components.Schemas.EvalRun.objectPayload
            /// Unique identifier for the evaluation run.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRun/id`.
            public var id: Swift.String
            /// The identifier of the associated evaluation.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRun/eval_id`.
            public var eval_id: Swift.String
            /// The status of the evaluation run.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRun/status`.
            public var status: Swift.String
            /// The model that is evaluated, if applicable.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRun/model`.
            public var model: Swift.String
            /// The name of the evaluation run.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRun/name`.
            public var name: Swift.String
            /// Unix timestamp (in seconds) when the evaluation run was created.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRun/created_at`.
            public var created_at: Swift.Int
            /// The URL to the rendered evaluation run report on the UI dashboard.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRun/report_url`.
            public var report_url: Swift.String
            /// Counters summarizing the outcomes of the evaluation run.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRun/result_counts`.
            public struct result_countsPayload: Codable, Hashable, Sendable {
                /// Total number of executed output items.
                ///
                /// - Remark: Generated from `#/components/schemas/EvalRun/result_counts/total`.
                public var total: Swift.Int
                /// Number of output items that resulted in an error.
                ///
                /// - Remark: Generated from `#/components/schemas/EvalRun/result_counts/errored`.
                public var errored: Swift.Int
                /// Number of output items that failed to pass the evaluation.
                ///
                /// - Remark: Generated from `#/components/schemas/EvalRun/result_counts/failed`.
                public var failed: Swift.Int
                /// Number of output items that passed the evaluation.
                ///
                /// - Remark: Generated from `#/components/schemas/EvalRun/result_counts/passed`.
                public var passed: Swift.Int
                /// Creates a new `result_countsPayload`.
                ///
                /// - Parameters:
                ///   - total: Total number of executed output items.
                ///   - errored: Number of output items that resulted in an error.
                ///   - failed: Number of output items that failed to pass the evaluation.
                ///   - passed: Number of output items that passed the evaluation.
                public init(
                    total: Swift.Int,
                    errored: Swift.Int,
                    failed: Swift.Int,
                    passed: Swift.Int
                ) {
                    self.total = total
                    self.errored = errored
                    self.failed = failed
                    self.passed = passed
                }
                public enum CodingKeys: String, CodingKey {
                    case total
                    case errored
                    case failed
                    case passed
                }
            }
            /// Counters summarizing the outcomes of the evaluation run.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRun/result_counts`.
            public var result_counts: Components.Schemas.EvalRun.result_countsPayload
            /// - Remark: Generated from `#/components/schemas/EvalRun/per_model_usagePayload`.
            public struct per_model_usagePayloadPayload: Codable, Hashable, Sendable {
                /// The name of the model.
                ///
                /// - Remark: Generated from `#/components/schemas/EvalRun/per_model_usagePayload/model_name`.
                public var model_name: Swift.String
                /// The number of invocations.
                ///
                /// - Remark: Generated from `#/components/schemas/EvalRun/per_model_usagePayload/invocation_count`.
                public var invocation_count: Swift.Int
                /// The number of prompt tokens used.
                ///
                /// - Remark: Generated from `#/components/schemas/EvalRun/per_model_usagePayload/prompt_tokens`.
                public var prompt_tokens: Swift.Int
                /// The number of completion tokens generated.
                ///
                /// - Remark: Generated from `#/components/schemas/EvalRun/per_model_usagePayload/completion_tokens`.
                public var completion_tokens: Swift.Int
                /// The total number of tokens used.
                ///
                /// - Remark: Generated from `#/components/schemas/EvalRun/per_model_usagePayload/total_tokens`.
                public var total_tokens: Swift.Int
                /// The number of tokens retrieved from cache.
                ///
                /// - Remark: Generated from `#/components/schemas/EvalRun/per_model_usagePayload/cached_tokens`.
                public var cached_tokens: Swift.Int
                /// Creates a new `per_model_usagePayloadPayload`.
                ///
                /// - Parameters:
                ///   - model_name: The name of the model.
                ///   - invocation_count: The number of invocations.
                ///   - prompt_tokens: The number of prompt tokens used.
                ///   - completion_tokens: The number of completion tokens generated.
                ///   - total_tokens: The total number of tokens used.
                ///   - cached_tokens: The number of tokens retrieved from cache.
                public init(
                    model_name: Swift.String,
                    invocation_count: Swift.Int,
                    prompt_tokens: Swift.Int,
                    completion_tokens: Swift.Int,
                    total_tokens: Swift.Int,
                    cached_tokens: Swift.Int
                ) {
                    self.model_name = model_name
                    self.invocation_count = invocation_count
                    self.prompt_tokens = prompt_tokens
                    self.completion_tokens = completion_tokens
                    self.total_tokens = total_tokens
                    self.cached_tokens = cached_tokens
                }
                public enum CodingKeys: String, CodingKey {
                    case model_name
                    case invocation_count
                    case prompt_tokens
                    case completion_tokens
                    case total_tokens
                    case cached_tokens
                }
            }
            /// Usage statistics for each model during the evaluation run.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRun/per_model_usage`.
            public typealias per_model_usagePayload = [Components.Schemas.EvalRun.per_model_usagePayloadPayload]
            /// Usage statistics for each model during the evaluation run.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRun/per_model_usage`.
            public var per_model_usage: Components.Schemas.EvalRun.per_model_usagePayload
            /// - Remark: Generated from `#/components/schemas/EvalRun/per_testing_criteria_resultsPayload`.
            public struct per_testing_criteria_resultsPayloadPayload: Codable, Hashable, Sendable {
                /// A description of the testing criteria.
                ///
                /// - Remark: Generated from `#/components/schemas/EvalRun/per_testing_criteria_resultsPayload/testing_criteria`.
                public var testing_criteria: Swift.String
                /// Number of tests passed for this criteria.
                ///
                /// - Remark: Generated from `#/components/schemas/EvalRun/per_testing_criteria_resultsPayload/passed`.
                public var passed: Swift.Int
                /// Number of tests failed for this criteria.
                ///
                /// - Remark: Generated from `#/components/schemas/EvalRun/per_testing_criteria_resultsPayload/failed`.
                public var failed: Swift.Int
                /// Creates a new `per_testing_criteria_resultsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - testing_criteria: A description of the testing criteria.
                ///   - passed: Number of tests passed for this criteria.
                ///   - failed: Number of tests failed for this criteria.
                public init(
                    testing_criteria: Swift.String,
                    passed: Swift.Int,
                    failed: Swift.Int
                ) {
                    self.testing_criteria = testing_criteria
                    self.passed = passed
                    self.failed = failed
                }
                public enum CodingKeys: String, CodingKey {
                    case testing_criteria
                    case passed
                    case failed
                }
            }
            /// Results per testing criteria applied during the evaluation run.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRun/per_testing_criteria_results`.
            public typealias per_testing_criteria_resultsPayload = [Components.Schemas.EvalRun.per_testing_criteria_resultsPayloadPayload]
            /// Results per testing criteria applied during the evaluation run.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRun/per_testing_criteria_results`.
            public var per_testing_criteria_results: Components.Schemas.EvalRun.per_testing_criteria_resultsPayload
            /// Information about the run's data source.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRun/data_source`.
            @frozen public enum data_sourcePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/EvalRun/data_source/case1`.
                case CreateEvalJsonlRunDataSource(Components.Schemas.CreateEvalJsonlRunDataSource)
                /// - Remark: Generated from `#/components/schemas/EvalRun/data_source/case2`.
                case CreateEvalCompletionsRunDataSource(Components.Schemas.CreateEvalCompletionsRunDataSource)
                /// - Remark: Generated from `#/components/schemas/EvalRun/data_source/case3`.
                case CreateEvalResponsesRunDataSource(Components.Schemas.CreateEvalResponsesRunDataSource)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .CreateEvalJsonlRunDataSource(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .CreateEvalCompletionsRunDataSource(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .CreateEvalResponsesRunDataSource(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .CreateEvalJsonlRunDataSource(value):
                        try value.encode(to: encoder)
                    case let .CreateEvalCompletionsRunDataSource(value):
                        try value.encode(to: encoder)
                    case let .CreateEvalResponsesRunDataSource(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// Information about the run's data source.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRun/data_source`.
            public var data_source: Components.Schemas.EvalRun.data_sourcePayload
            /// - Remark: Generated from `#/components/schemas/EvalRun/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// - Remark: Generated from `#/components/schemas/EvalRun/error`.
            public var error: Components.Schemas.EvalApiError
            /// Creates a new `EvalRun`.
            ///
            /// - Parameters:
            ///   - object: The type of the object. Always "eval.run".
            ///   - id: Unique identifier for the evaluation run.
            ///   - eval_id: The identifier of the associated evaluation.
            ///   - status: The status of the evaluation run.
            ///   - model: The model that is evaluated, if applicable.
            ///   - name: The name of the evaluation run.
            ///   - created_at: Unix timestamp (in seconds) when the evaluation run was created.
            ///   - report_url: The URL to the rendered evaluation run report on the UI dashboard.
            ///   - result_counts: Counters summarizing the outcomes of the evaluation run.
            ///   - per_model_usage: Usage statistics for each model during the evaluation run.
            ///   - per_testing_criteria_results: Results per testing criteria applied during the evaluation run.
            ///   - data_source: Information about the run's data source.
            ///   - metadata:
            ///   - error:
            public init(
                object: Components.Schemas.EvalRun.objectPayload,
                id: Swift.String,
                eval_id: Swift.String,
                status: Swift.String,
                model: Swift.String,
                name: Swift.String,
                created_at: Swift.Int,
                report_url: Swift.String,
                result_counts: Components.Schemas.EvalRun.result_countsPayload,
                per_model_usage: Components.Schemas.EvalRun.per_model_usagePayload,
                per_testing_criteria_results: Components.Schemas.EvalRun.per_testing_criteria_resultsPayload,
                data_source: Components.Schemas.EvalRun.data_sourcePayload,
                metadata: Components.Schemas.Metadata? = nil,
                error: Components.Schemas.EvalApiError
            ) {
                self.object = object
                self.id = id
                self.eval_id = eval_id
                self.status = status
                self.model = model
                self.name = name
                self.created_at = created_at
                self.report_url = report_url
                self.result_counts = result_counts
                self.per_model_usage = per_model_usage
                self.per_testing_criteria_results = per_testing_criteria_results
                self.data_source = data_source
                self.metadata = metadata
                self.error = error
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case id
                case eval_id
                case status
                case model
                case name
                case created_at
                case report_url
                case result_counts
                case per_model_usage
                case per_testing_criteria_results
                case data_source
                case metadata
                case error
            }
        }
        /// An object representing a list of runs for an evaluation.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/EvalRunList`.
        public struct EvalRunList: Codable, Hashable, Sendable {
            /// The type of this object. It is always set to "list".
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRunList/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case list = "list"
            }
            /// The type of this object. It is always set to "list".
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRunList/object`.
            public var object: Components.Schemas.EvalRunList.objectPayload
            /// An array of eval run objects.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRunList/data`.
            public var data: [Components.Schemas.EvalRun]
            /// The identifier of the first eval run in the data array.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRunList/first_id`.
            public var first_id: Swift.String
            /// The identifier of the last eval run in the data array.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRunList/last_id`.
            public var last_id: Swift.String
            /// Indicates whether there are more evals available.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRunList/has_more`.
            public var has_more: Swift.Bool
            /// Creates a new `EvalRunList`.
            ///
            /// - Parameters:
            ///   - object: The type of this object. It is always set to "list".
            ///   - data: An array of eval run objects.
            ///   - first_id: The identifier of the first eval run in the data array.
            ///   - last_id: The identifier of the last eval run in the data array.
            ///   - has_more: Indicates whether there are more evals available.
            public init(
                object: Components.Schemas.EvalRunList.objectPayload,
                data: [Components.Schemas.EvalRun],
                first_id: Swift.String,
                last_id: Swift.String,
                has_more: Swift.Bool
            ) {
                self.object = object
                self.data = data
                self.first_id = first_id
                self.last_id = last_id
                self.has_more = has_more
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
                case first_id
                case last_id
                case has_more
            }
        }
        /// A schema representing an evaluation run output item.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem`.
        public struct EvalRunOutputItem: Codable, Hashable, Sendable {
            /// The type of the object. Always "eval.run.output_item".
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case eval_period_run_period_output_item = "eval.run.output_item"
            }
            /// The type of the object. Always "eval.run.output_item".
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/object`.
            public var object: Components.Schemas.EvalRunOutputItem.objectPayload
            /// Unique identifier for the evaluation run output item.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/id`.
            public var id: Swift.String
            /// The identifier of the evaluation run associated with this output item.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/run_id`.
            public var run_id: Swift.String
            /// The identifier of the evaluation group.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/eval_id`.
            public var eval_id: Swift.String
            /// Unix timestamp (in seconds) when the evaluation run was created.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/created_at`.
            public var created_at: Swift.Int
            /// The status of the evaluation run.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/status`.
            public var status: Swift.String
            /// The identifier for the data source item.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/datasource_item_id`.
            public var datasource_item_id: Swift.Int
            /// Details of the input data source item.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/datasource_item`.
            public struct datasource_itemPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                /// Creates a new `datasource_itemPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Details of the input data source item.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/datasource_item`.
            public var datasource_item: Components.Schemas.EvalRunOutputItem.datasource_itemPayload
            /// A result object.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/resultsPayload`.
            public struct resultsPayloadPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                /// Creates a new `resultsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// A list of results from the evaluation run.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/results`.
            public typealias resultsPayload = [Components.Schemas.EvalRunOutputItem.resultsPayloadPayload]
            /// A list of results from the evaluation run.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/results`.
            public var results: Components.Schemas.EvalRunOutputItem.resultsPayload
            /// A sample containing the input and output of the evaluation run.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/sample`.
            public struct samplePayload: Codable, Hashable, Sendable {
                /// An input message.
                ///
                /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/sample/inputPayload`.
                public struct inputPayloadPayload: Codable, Hashable, Sendable {
                    /// The role of the message sender (e.g., system, user, developer).
                    ///
                    /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/sample/inputPayload/role`.
                    public var role: Swift.String
                    /// The content of the message.
                    ///
                    /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/sample/inputPayload/content`.
                    public var content: Swift.String
                    /// Creates a new `inputPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - role: The role of the message sender (e.g., system, user, developer).
                    ///   - content: The content of the message.
                    public init(
                        role: Swift.String,
                        content: Swift.String
                    ) {
                        self.role = role
                        self.content = content
                    }
                    public enum CodingKeys: String, CodingKey {
                        case role
                        case content
                    }
                }
                /// An array of input messages.
                ///
                /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/sample/input`.
                public typealias inputPayload = [Components.Schemas.EvalRunOutputItem.samplePayload.inputPayloadPayload]
                /// An array of input messages.
                ///
                /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/sample/input`.
                public var input: Components.Schemas.EvalRunOutputItem.samplePayload.inputPayload
                /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/sample/outputPayload`.
                public struct outputPayloadPayload: Codable, Hashable, Sendable {
                    /// The role of the message (e.g. "system", "assistant", "user").
                    ///
                    /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/sample/outputPayload/role`.
                    public var role: Swift.String?
                    /// The content of the message.
                    ///
                    /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/sample/outputPayload/content`.
                    public var content: Swift.String?
                    /// Creates a new `outputPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - role: The role of the message (e.g. "system", "assistant", "user").
                    ///   - content: The content of the message.
                    public init(
                        role: Swift.String? = nil,
                        content: Swift.String? = nil
                    ) {
                        self.role = role
                        self.content = content
                    }
                    public enum CodingKeys: String, CodingKey {
                        case role
                        case content
                    }
                }
                /// An array of output messages.
                ///
                /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/sample/output`.
                public typealias outputPayload = [Components.Schemas.EvalRunOutputItem.samplePayload.outputPayloadPayload]
                /// An array of output messages.
                ///
                /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/sample/output`.
                public var output: Components.Schemas.EvalRunOutputItem.samplePayload.outputPayload
                /// The reason why the sample generation was finished.
                ///
                /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/sample/finish_reason`.
                public var finish_reason: Swift.String
                /// The model used for generating the sample.
                ///
                /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/sample/model`.
                public var model: Swift.String
                /// Token usage details for the sample.
                ///
                /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/sample/usage`.
                public struct usagePayload: Codable, Hashable, Sendable {
                    /// The total number of tokens used.
                    ///
                    /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/sample/usage/total_tokens`.
                    public var total_tokens: Swift.Int
                    /// The number of completion tokens generated.
                    ///
                    /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/sample/usage/completion_tokens`.
                    public var completion_tokens: Swift.Int
                    /// The number of prompt tokens used.
                    ///
                    /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/sample/usage/prompt_tokens`.
                    public var prompt_tokens: Swift.Int
                    /// The number of tokens retrieved from cache.
                    ///
                    /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/sample/usage/cached_tokens`.
                    public var cached_tokens: Swift.Int
                    /// Creates a new `usagePayload`.
                    ///
                    /// - Parameters:
                    ///   - total_tokens: The total number of tokens used.
                    ///   - completion_tokens: The number of completion tokens generated.
                    ///   - prompt_tokens: The number of prompt tokens used.
                    ///   - cached_tokens: The number of tokens retrieved from cache.
                    public init(
                        total_tokens: Swift.Int,
                        completion_tokens: Swift.Int,
                        prompt_tokens: Swift.Int,
                        cached_tokens: Swift.Int
                    ) {
                        self.total_tokens = total_tokens
                        self.completion_tokens = completion_tokens
                        self.prompt_tokens = prompt_tokens
                        self.cached_tokens = cached_tokens
                    }
                    public enum CodingKeys: String, CodingKey {
                        case total_tokens
                        case completion_tokens
                        case prompt_tokens
                        case cached_tokens
                    }
                }
                /// Token usage details for the sample.
                ///
                /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/sample/usage`.
                public var usage: Components.Schemas.EvalRunOutputItem.samplePayload.usagePayload
                /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/sample/error`.
                public var error: Components.Schemas.EvalApiError
                /// The sampling temperature used.
                ///
                /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/sample/temperature`.
                public var temperature: Swift.Double
                /// The maximum number of tokens allowed for completion.
                ///
                /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/sample/max_completion_tokens`.
                public var max_completion_tokens: Swift.Int
                /// The top_p value used for sampling.
                ///
                /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/sample/top_p`.
                public var top_p: Swift.Double
                /// The seed used for generating the sample.
                ///
                /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/sample/seed`.
                public var seed: Swift.Int
                /// Creates a new `samplePayload`.
                ///
                /// - Parameters:
                ///   - input: An array of input messages.
                ///   - output: An array of output messages.
                ///   - finish_reason: The reason why the sample generation was finished.
                ///   - model: The model used for generating the sample.
                ///   - usage: Token usage details for the sample.
                ///   - error:
                ///   - temperature: The sampling temperature used.
                ///   - max_completion_tokens: The maximum number of tokens allowed for completion.
                ///   - top_p: The top_p value used for sampling.
                ///   - seed: The seed used for generating the sample.
                public init(
                    input: Components.Schemas.EvalRunOutputItem.samplePayload.inputPayload,
                    output: Components.Schemas.EvalRunOutputItem.samplePayload.outputPayload,
                    finish_reason: Swift.String,
                    model: Swift.String,
                    usage: Components.Schemas.EvalRunOutputItem.samplePayload.usagePayload,
                    error: Components.Schemas.EvalApiError,
                    temperature: Swift.Double,
                    max_completion_tokens: Swift.Int,
                    top_p: Swift.Double,
                    seed: Swift.Int
                ) {
                    self.input = input
                    self.output = output
                    self.finish_reason = finish_reason
                    self.model = model
                    self.usage = usage
                    self.error = error
                    self.temperature = temperature
                    self.max_completion_tokens = max_completion_tokens
                    self.top_p = top_p
                    self.seed = seed
                }
                public enum CodingKeys: String, CodingKey {
                    case input
                    case output
                    case finish_reason
                    case model
                    case usage
                    case error
                    case temperature
                    case max_completion_tokens
                    case top_p
                    case seed
                }
            }
            /// A sample containing the input and output of the evaluation run.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRunOutputItem/sample`.
            public var sample: Components.Schemas.EvalRunOutputItem.samplePayload
            /// Creates a new `EvalRunOutputItem`.
            ///
            /// - Parameters:
            ///   - object: The type of the object. Always "eval.run.output_item".
            ///   - id: Unique identifier for the evaluation run output item.
            ///   - run_id: The identifier of the evaluation run associated with this output item.
            ///   - eval_id: The identifier of the evaluation group.
            ///   - created_at: Unix timestamp (in seconds) when the evaluation run was created.
            ///   - status: The status of the evaluation run.
            ///   - datasource_item_id: The identifier for the data source item.
            ///   - datasource_item: Details of the input data source item.
            ///   - results: A list of results from the evaluation run.
            ///   - sample: A sample containing the input and output of the evaluation run.
            public init(
                object: Components.Schemas.EvalRunOutputItem.objectPayload,
                id: Swift.String,
                run_id: Swift.String,
                eval_id: Swift.String,
                created_at: Swift.Int,
                status: Swift.String,
                datasource_item_id: Swift.Int,
                datasource_item: Components.Schemas.EvalRunOutputItem.datasource_itemPayload,
                results: Components.Schemas.EvalRunOutputItem.resultsPayload,
                sample: Components.Schemas.EvalRunOutputItem.samplePayload
            ) {
                self.object = object
                self.id = id
                self.run_id = run_id
                self.eval_id = eval_id
                self.created_at = created_at
                self.status = status
                self.datasource_item_id = datasource_item_id
                self.datasource_item = datasource_item
                self.results = results
                self.sample = sample
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case id
                case run_id
                case eval_id
                case created_at
                case status
                case datasource_item_id
                case datasource_item
                case results
                case sample
            }
        }
        /// An object representing a list of output items for an evaluation run.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/EvalRunOutputItemList`.
        public struct EvalRunOutputItemList: Codable, Hashable, Sendable {
            /// The type of this object. It is always set to "list".
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRunOutputItemList/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case list = "list"
            }
            /// The type of this object. It is always set to "list".
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRunOutputItemList/object`.
            public var object: Components.Schemas.EvalRunOutputItemList.objectPayload
            /// An array of eval run output item objects.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRunOutputItemList/data`.
            public var data: [Components.Schemas.EvalRunOutputItem]
            /// The identifier of the first eval run output item in the data array.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRunOutputItemList/first_id`.
            public var first_id: Swift.String
            /// The identifier of the last eval run output item in the data array.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRunOutputItemList/last_id`.
            public var last_id: Swift.String
            /// Indicates whether there are more eval run output items available.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalRunOutputItemList/has_more`.
            public var has_more: Swift.Bool
            /// Creates a new `EvalRunOutputItemList`.
            ///
            /// - Parameters:
            ///   - object: The type of this object. It is always set to "list".
            ///   - data: An array of eval run output item objects.
            ///   - first_id: The identifier of the first eval run output item in the data array.
            ///   - last_id: The identifier of the last eval run output item in the data array.
            ///   - has_more: Indicates whether there are more eval run output items available.
            public init(
                object: Components.Schemas.EvalRunOutputItemList.objectPayload,
                data: [Components.Schemas.EvalRunOutputItem],
                first_id: Swift.String,
                last_id: Swift.String,
                has_more: Swift.Bool
            ) {
                self.object = object
                self.data = data
                self.first_id = first_id
                self.last_id = last_id
                self.has_more = has_more
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
                case first_id
                case last_id
                case has_more
            }
        }
        /// A ScoreModelGrader object that uses a model to assign a score to the input.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/EvalScoreModelGrader`.
        public struct EvalScoreModelGrader: Codable, Hashable, Sendable {
            /// The object type, which is always `score_model`.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalScoreModelGrader/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case score_model = "score_model"
            }
            /// The object type, which is always `score_model`.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalScoreModelGrader/type`.
            public var _type: Components.Schemas.EvalScoreModelGrader._typePayload
            /// The name of the grader.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalScoreModelGrader/name`.
            public var name: Swift.String
            /// The model to use for the evaluation.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalScoreModelGrader/model`.
            public var model: Swift.String
            /// The sampling parameters for the model.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalScoreModelGrader/sampling_params`.
            public var sampling_params: OpenAPIRuntime.OpenAPIObjectContainer?
            /// The input text. This may include template strings.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalScoreModelGrader/input`.
            public var input: [Components.Schemas.EvalItem]
            /// The threshold for the score.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalScoreModelGrader/pass_threshold`.
            public var pass_threshold: Swift.Double?
            /// The range of the score. Defaults to `[0, 1]`.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalScoreModelGrader/range`.
            public var range: [Swift.Double]?
            /// Creates a new `EvalScoreModelGrader`.
            ///
            /// - Parameters:
            ///   - _type: The object type, which is always `score_model`.
            ///   - name: The name of the grader.
            ///   - model: The model to use for the evaluation.
            ///   - sampling_params: The sampling parameters for the model.
            ///   - input: The input text. This may include template strings.
            ///   - pass_threshold: The threshold for the score.
            ///   - range: The range of the score. Defaults to `[0, 1]`.
            public init(
                _type: Components.Schemas.EvalScoreModelGrader._typePayload,
                name: Swift.String,
                model: Swift.String,
                sampling_params: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                input: [Components.Schemas.EvalItem],
                pass_threshold: Swift.Double? = nil,
                range: [Swift.Double]? = nil
            ) {
                self._type = _type
                self.name = name
                self.model = model
                self.sampling_params = sampling_params
                self.input = input
                self.pass_threshold = pass_threshold
                self.range = range
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case name
                case model
                case sampling_params
                case input
                case pass_threshold
                case range
            }
        }
        /// A StoredCompletionsDataSourceConfig which specifies the metadata property of your stored completions query.
        /// This is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc.
        /// The schema returned by this data source config is used to defined what variables are available in your evals.
        /// `item` and `sample` are both defined when using this data source config.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/EvalStoredCompletionsDataSourceConfig`.
        public struct EvalStoredCompletionsDataSourceConfig: Codable, Hashable, Sendable {
            /// The type of data source. Always `stored_completions`.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalStoredCompletionsDataSourceConfig/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case stored_completions = "stored_completions"
            }
            /// The type of data source. Always `stored_completions`.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalStoredCompletionsDataSourceConfig/type`.
            public var _type: Components.Schemas.EvalStoredCompletionsDataSourceConfig._typePayload
            /// - Remark: Generated from `#/components/schemas/EvalStoredCompletionsDataSourceConfig/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// The json schema for the run data source items.
            /// Learn how to build JSON schemas [here](https://json-schema.org/).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EvalStoredCompletionsDataSourceConfig/schema`.
            public struct schemaPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                /// Creates a new `schemaPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The json schema for the run data source items.
            /// Learn how to build JSON schemas [here](https://json-schema.org/).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/EvalStoredCompletionsDataSourceConfig/schema`.
            public var schema: Components.Schemas.EvalStoredCompletionsDataSourceConfig.schemaPayload
            /// Creates a new `EvalStoredCompletionsDataSourceConfig`.
            ///
            /// - Parameters:
            ///   - _type: The type of data source. Always `stored_completions`.
            ///   - metadata:
            ///   - schema: The json schema for the run data source items.
            public init(
                _type: Components.Schemas.EvalStoredCompletionsDataSourceConfig._typePayload,
                metadata: Components.Schemas.Metadata? = nil,
                schema: Components.Schemas.EvalStoredCompletionsDataSourceConfig.schemaPayload
            ) {
                self._type = _type
                self.metadata = metadata
                self.schema = schema
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case metadata
                case schema
            }
        }
        /// A StoredCompletionsRunDataSource configuration describing a set of filters
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/EvalStoredCompletionsSource`.
        public struct EvalStoredCompletionsSource: Codable, Hashable, Sendable {
            /// The type of source. Always `stored_completions`.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalStoredCompletionsSource/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case stored_completions = "stored_completions"
            }
            /// The type of source. Always `stored_completions`.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalStoredCompletionsSource/type`.
            public var _type: Components.Schemas.EvalStoredCompletionsSource._typePayload
            /// - Remark: Generated from `#/components/schemas/EvalStoredCompletionsSource/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// An optional model to filter by (e.g., 'gpt-4o').
            ///
            /// - Remark: Generated from `#/components/schemas/EvalStoredCompletionsSource/model`.
            public var model: Swift.String?
            /// An optional Unix timestamp to filter items created after this time.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalStoredCompletionsSource/created_after`.
            public var created_after: Swift.Int?
            /// An optional Unix timestamp to filter items created before this time.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalStoredCompletionsSource/created_before`.
            public var created_before: Swift.Int?
            /// An optional maximum number of items to return.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalStoredCompletionsSource/limit`.
            public var limit: Swift.Int?
            /// Creates a new `EvalStoredCompletionsSource`.
            ///
            /// - Parameters:
            ///   - _type: The type of source. Always `stored_completions`.
            ///   - metadata:
            ///   - model: An optional model to filter by (e.g., 'gpt-4o').
            ///   - created_after: An optional Unix timestamp to filter items created after this time.
            ///   - created_before: An optional Unix timestamp to filter items created before this time.
            ///   - limit: An optional maximum number of items to return.
            public init(
                _type: Components.Schemas.EvalStoredCompletionsSource._typePayload,
                metadata: Components.Schemas.Metadata? = nil,
                model: Swift.String? = nil,
                created_after: Swift.Int? = nil,
                created_before: Swift.Int? = nil,
                limit: Swift.Int? = nil
            ) {
                self._type = _type
                self.metadata = metadata
                self.model = model
                self.created_after = created_after
                self.created_before = created_before
                self.limit = limit
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case metadata
                case model
                case created_after
                case created_before
                case limit
            }
        }
        /// A StringCheckGrader object that performs a string comparison between input and reference using a specified operation.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/EvalStringCheckGrader`.
        public struct EvalStringCheckGrader: Codable, Hashable, Sendable {
            /// The object type, which is always `string_check`.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalStringCheckGrader/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case string_check = "string_check"
            }
            /// The object type, which is always `string_check`.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalStringCheckGrader/type`.
            public var _type: Components.Schemas.EvalStringCheckGrader._typePayload
            /// The name of the grader.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalStringCheckGrader/name`.
            public var name: Swift.String
            /// The input text. This may include template strings.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalStringCheckGrader/input`.
            public var input: Swift.String
            /// The reference text. This may include template strings.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalStringCheckGrader/reference`.
            public var reference: Swift.String
            /// The string check operation to perform. One of `eq`, `ne`, `like`, or `ilike`.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalStringCheckGrader/operation`.
            @frozen public enum operationPayload: String, Codable, Hashable, Sendable {
                case eq = "eq"
                case ne = "ne"
                case like = "like"
                case ilike = "ilike"
            }
            /// The string check operation to perform. One of `eq`, `ne`, `like`, or `ilike`.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalStringCheckGrader/operation`.
            public var operation: Components.Schemas.EvalStringCheckGrader.operationPayload
            /// Creates a new `EvalStringCheckGrader`.
            ///
            /// - Parameters:
            ///   - _type: The object type, which is always `string_check`.
            ///   - name: The name of the grader.
            ///   - input: The input text. This may include template strings.
            ///   - reference: The reference text. This may include template strings.
            ///   - operation: The string check operation to perform. One of `eq`, `ne`, `like`, or `ilike`.
            public init(
                _type: Components.Schemas.EvalStringCheckGrader._typePayload,
                name: Swift.String,
                input: Swift.String,
                reference: Swift.String,
                operation: Components.Schemas.EvalStringCheckGrader.operationPayload
            ) {
                self._type = _type
                self.name = name
                self.input = input
                self.reference = reference
                self.operation = operation
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case name
                case input
                case reference
                case operation
            }
        }
        /// A TextSimilarityGrader object which grades text based on similarity metrics.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/EvalTextSimilarityGrader`.
        public struct EvalTextSimilarityGrader: Codable, Hashable, Sendable {
            /// The type of grader.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalTextSimilarityGrader/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case text_similarity = "text_similarity"
            }
            /// The type of grader.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalTextSimilarityGrader/type`.
            public var _type: Components.Schemas.EvalTextSimilarityGrader._typePayload
            /// The name of the grader.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalTextSimilarityGrader/name`.
            public var name: Swift.String?
            /// The text being graded.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalTextSimilarityGrader/input`.
            public var input: Swift.String
            /// The text being graded against.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalTextSimilarityGrader/reference`.
            public var reference: Swift.String
            /// A float score where a value greater than or equal indicates a passing grade.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalTextSimilarityGrader/pass_threshold`.
            public var pass_threshold: Swift.Double
            /// The evaluation metric to use. One of `fuzzy_match`, `bleu`, `gleu`, `meteor`, `rouge_1`, `rouge_2`, `rouge_3`, `rouge_4`, `rouge_5`, or `rouge_l`.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalTextSimilarityGrader/evaluation_metric`.
            @frozen public enum evaluation_metricPayload: String, Codable, Hashable, Sendable {
                case fuzzy_match = "fuzzy_match"
                case bleu = "bleu"
                case gleu = "gleu"
                case meteor = "meteor"
                case rouge_1 = "rouge_1"
                case rouge_2 = "rouge_2"
                case rouge_3 = "rouge_3"
                case rouge_4 = "rouge_4"
                case rouge_5 = "rouge_5"
                case rouge_l = "rouge_l"
            }
            /// The evaluation metric to use. One of `fuzzy_match`, `bleu`, `gleu`, `meteor`, `rouge_1`, `rouge_2`, `rouge_3`, `rouge_4`, `rouge_5`, or `rouge_l`.
            ///
            /// - Remark: Generated from `#/components/schemas/EvalTextSimilarityGrader/evaluation_metric`.
            public var evaluation_metric: Components.Schemas.EvalTextSimilarityGrader.evaluation_metricPayload
            /// Creates a new `EvalTextSimilarityGrader`.
            ///
            /// - Parameters:
            ///   - _type: The type of grader.
            ///   - name: The name of the grader.
            ///   - input: The text being graded.
            ///   - reference: The text being graded against.
            ///   - pass_threshold: A float score where a value greater than or equal indicates a passing grade.
            ///   - evaluation_metric: The evaluation metric to use. One of `fuzzy_match`, `bleu`, `gleu`, `meteor`, `rouge_1`, `rouge_2`, `rouge_3`, `rouge_4`, `rouge_5`, or `rouge_l`.
            public init(
                _type: Components.Schemas.EvalTextSimilarityGrader._typePayload,
                name: Swift.String? = nil,
                input: Swift.String,
                reference: Swift.String,
                pass_threshold: Swift.Double,
                evaluation_metric: Components.Schemas.EvalTextSimilarityGrader.evaluation_metricPayload
            ) {
                self._type = _type
                self.name = name
                self.input = input
                self.reference = reference
                self.pass_threshold = pass_threshold
                self.evaluation_metric = evaluation_metric
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case name
                case input
                case reference
                case pass_threshold
                case evaluation_metric
            }
        }
        /// The ranker to use for the file search. If not specified will use the `auto` ranker.
        ///
        /// - Remark: Generated from `#/components/schemas/FileSearchRanker`.
        @frozen public enum FileSearchRanker: String, Codable, Hashable, Sendable {
            case auto = "auto"
            case default_2024_08_21 = "default_2024_08_21"
        }
        /// The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.
        ///
        /// See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/FileSearchRankingOptions`.
        public struct FileSearchRankingOptions: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FileSearchRankingOptions/ranker`.
            public var ranker: Components.Schemas.FileSearchRanker?
            /// The score threshold for the file search. All values must be a floating point number between 0 and 1.
            ///
            /// - Remark: Generated from `#/components/schemas/FileSearchRankingOptions/score_threshold`.
            public var score_threshold: Swift.Double
            /// Creates a new `FileSearchRankingOptions`.
            ///
            /// - Parameters:
            ///   - ranker:
            ///   - score_threshold: The score threshold for the file search. All values must be a floating point number between 0 and 1.
            public init(
                ranker: Components.Schemas.FileSearchRanker? = nil,
                score_threshold: Swift.Double
            ) {
                self.ranker = ranker
                self.score_threshold = score_threshold
            }
            public enum CodingKeys: String, CodingKey {
                case ranker
                case score_threshold
            }
        }
        /// Configuration for the DPO fine-tuning method.
        ///
        /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod`.
        public struct FineTuneDPOMethod: Codable, Hashable, Sendable {
            /// The hyperparameters used for the fine-tuning job.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters`.
            public struct hyperparametersPayload: Codable, Hashable, Sendable {
                /// The beta value for the DPO method. A higher beta value will increase the weight of the penalty between the policy and reference model.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/beta`.
                @frozen public enum betaPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/beta/case1`.
                    @frozen public enum Case1Payload: String, Codable, Hashable, Sendable {
                        case auto = "auto"
                    }
                    /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/beta/case1`.
                    case case1(Components.Schemas.FineTuneDPOMethod.hyperparametersPayload.betaPayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/beta/case2`.
                    case case2(Swift.Double)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// The beta value for the DPO method. A higher beta value will increase the weight of the penalty between the policy and reference model.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/beta`.
                public var beta: Components.Schemas.FineTuneDPOMethod.hyperparametersPayload.betaPayload?
                /// Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/batch_size`.
                @frozen public enum batch_sizePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/batch_size/case1`.
                    @frozen public enum Case1Payload: String, Codable, Hashable, Sendable {
                        case auto = "auto"
                    }
                    /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/batch_size/case1`.
                    case case1(Components.Schemas.FineTuneDPOMethod.hyperparametersPayload.batch_sizePayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/batch_size/case2`.
                    case case2(Swift.Int)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/batch_size`.
                public var batch_size: Components.Schemas.FineTuneDPOMethod.hyperparametersPayload.batch_sizePayload?
                /// Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/learning_rate_multiplier`.
                @frozen public enum learning_rate_multiplierPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/learning_rate_multiplier/case1`.
                    @frozen public enum Case1Payload: String, Codable, Hashable, Sendable {
                        case auto = "auto"
                    }
                    /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/learning_rate_multiplier/case1`.
                    case case1(Components.Schemas.FineTuneDPOMethod.hyperparametersPayload.learning_rate_multiplierPayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/learning_rate_multiplier/case2`.
                    case case2(Swift.Double)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/learning_rate_multiplier`.
                public var learning_rate_multiplier: Components.Schemas.FineTuneDPOMethod.hyperparametersPayload.learning_rate_multiplierPayload?
                /// The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/n_epochs`.
                @frozen public enum n_epochsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/n_epochs/case1`.
                    @frozen public enum Case1Payload: String, Codable, Hashable, Sendable {
                        case auto = "auto"
                    }
                    /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/n_epochs/case1`.
                    case case1(Components.Schemas.FineTuneDPOMethod.hyperparametersPayload.n_epochsPayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/n_epochs/case2`.
                    case case2(Swift.Int)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters/n_epochs`.
                public var n_epochs: Components.Schemas.FineTuneDPOMethod.hyperparametersPayload.n_epochsPayload?
                /// Creates a new `hyperparametersPayload`.
                ///
                /// - Parameters:
                ///   - beta: The beta value for the DPO method. A higher beta value will increase the weight of the penalty between the policy and reference model.
                ///   - batch_size: Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.
                ///   - learning_rate_multiplier: Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.
                ///   - n_epochs: The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
                public init(
                    beta: Components.Schemas.FineTuneDPOMethod.hyperparametersPayload.betaPayload? = nil,
                    batch_size: Components.Schemas.FineTuneDPOMethod.hyperparametersPayload.batch_sizePayload? = nil,
                    learning_rate_multiplier: Components.Schemas.FineTuneDPOMethod.hyperparametersPayload.learning_rate_multiplierPayload? = nil,
                    n_epochs: Components.Schemas.FineTuneDPOMethod.hyperparametersPayload.n_epochsPayload? = nil
                ) {
                    self.beta = beta
                    self.batch_size = batch_size
                    self.learning_rate_multiplier = learning_rate_multiplier
                    self.n_epochs = n_epochs
                }
                public enum CodingKeys: String, CodingKey {
                    case beta
                    case batch_size
                    case learning_rate_multiplier
                    case n_epochs
                }
            }
            /// The hyperparameters used for the fine-tuning job.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuneDPOMethod/hyperparameters`.
            public var hyperparameters: Components.Schemas.FineTuneDPOMethod.hyperparametersPayload?
            /// Creates a new `FineTuneDPOMethod`.
            ///
            /// - Parameters:
            ///   - hyperparameters: The hyperparameters used for the fine-tuning job.
            public init(hyperparameters: Components.Schemas.FineTuneDPOMethod.hyperparametersPayload? = nil) {
                self.hyperparameters = hyperparameters
            }
            public enum CodingKeys: String, CodingKey {
                case hyperparameters
            }
        }
        /// The method used for fine-tuning.
        ///
        /// - Remark: Generated from `#/components/schemas/FineTuneMethod`.
        public struct FineTuneMethod: Codable, Hashable, Sendable {
            /// The type of method. Is either `supervised` or `dpo`.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuneMethod/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case supervised = "supervised"
                case dpo = "dpo"
            }
            /// The type of method. Is either `supervised` or `dpo`.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuneMethod/type`.
            public var _type: Components.Schemas.FineTuneMethod._typePayload?
            /// - Remark: Generated from `#/components/schemas/FineTuneMethod/supervised`.
            public var supervised: Components.Schemas.FineTuneSupervisedMethod?
            /// - Remark: Generated from `#/components/schemas/FineTuneMethod/dpo`.
            public var dpo: Components.Schemas.FineTuneDPOMethod?
            /// Creates a new `FineTuneMethod`.
            ///
            /// - Parameters:
            ///   - _type: The type of method. Is either `supervised` or `dpo`.
            ///   - supervised:
            ///   - dpo:
            public init(
                _type: Components.Schemas.FineTuneMethod._typePayload? = nil,
                supervised: Components.Schemas.FineTuneSupervisedMethod? = nil,
                dpo: Components.Schemas.FineTuneDPOMethod? = nil
            ) {
                self._type = _type
                self.supervised = supervised
                self.dpo = dpo
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case supervised
                case dpo
            }
        }
        /// Configuration for the supervised fine-tuning method.
        ///
        /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod`.
        public struct FineTuneSupervisedMethod: Codable, Hashable, Sendable {
            /// The hyperparameters used for the fine-tuning job.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters`.
            public struct hyperparametersPayload: Codable, Hashable, Sendable {
                /// Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters/batch_size`.
                @frozen public enum batch_sizePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters/batch_size/case1`.
                    @frozen public enum Case1Payload: String, Codable, Hashable, Sendable {
                        case auto = "auto"
                    }
                    /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters/batch_size/case1`.
                    case case1(Components.Schemas.FineTuneSupervisedMethod.hyperparametersPayload.batch_sizePayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters/batch_size/case2`.
                    case case2(Swift.Int)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters/batch_size`.
                public var batch_size: Components.Schemas.FineTuneSupervisedMethod.hyperparametersPayload.batch_sizePayload?
                /// Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters/learning_rate_multiplier`.
                @frozen public enum learning_rate_multiplierPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters/learning_rate_multiplier/case1`.
                    @frozen public enum Case1Payload: String, Codable, Hashable, Sendable {
                        case auto = "auto"
                    }
                    /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters/learning_rate_multiplier/case1`.
                    case case1(Components.Schemas.FineTuneSupervisedMethod.hyperparametersPayload.learning_rate_multiplierPayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters/learning_rate_multiplier/case2`.
                    case case2(Swift.Double)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters/learning_rate_multiplier`.
                public var learning_rate_multiplier: Components.Schemas.FineTuneSupervisedMethod.hyperparametersPayload.learning_rate_multiplierPayload?
                /// The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters/n_epochs`.
                @frozen public enum n_epochsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters/n_epochs/case1`.
                    @frozen public enum Case1Payload: String, Codable, Hashable, Sendable {
                        case auto = "auto"
                    }
                    /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters/n_epochs/case1`.
                    case case1(Components.Schemas.FineTuneSupervisedMethod.hyperparametersPayload.n_epochsPayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters/n_epochs/case2`.
                    case case2(Swift.Int)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters/n_epochs`.
                public var n_epochs: Components.Schemas.FineTuneSupervisedMethod.hyperparametersPayload.n_epochsPayload?
                /// Creates a new `hyperparametersPayload`.
                ///
                /// - Parameters:
                ///   - batch_size: Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.
                ///   - learning_rate_multiplier: Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.
                ///   - n_epochs: The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
                public init(
                    batch_size: Components.Schemas.FineTuneSupervisedMethod.hyperparametersPayload.batch_sizePayload? = nil,
                    learning_rate_multiplier: Components.Schemas.FineTuneSupervisedMethod.hyperparametersPayload.learning_rate_multiplierPayload? = nil,
                    n_epochs: Components.Schemas.FineTuneSupervisedMethod.hyperparametersPayload.n_epochsPayload? = nil
                ) {
                    self.batch_size = batch_size
                    self.learning_rate_multiplier = learning_rate_multiplier
                    self.n_epochs = n_epochs
                }
                public enum CodingKeys: String, CodingKey {
                    case batch_size
                    case learning_rate_multiplier
                    case n_epochs
                }
            }
            /// The hyperparameters used for the fine-tuning job.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuneSupervisedMethod/hyperparameters`.
            public var hyperparameters: Components.Schemas.FineTuneSupervisedMethod.hyperparametersPayload?
            /// Creates a new `FineTuneSupervisedMethod`.
            ///
            /// - Parameters:
            ///   - hyperparameters: The hyperparameters used for the fine-tuning job.
            public init(hyperparameters: Components.Schemas.FineTuneSupervisedMethod.hyperparametersPayload? = nil) {
                self.hyperparameters = hyperparameters
            }
            public enum CodingKeys: String, CodingKey {
                case hyperparameters
            }
        }
        /// The `checkpoint.permission` object represents a permission for a fine-tuned model checkpoint.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/FineTuningCheckpointPermission`.
        public struct FineTuningCheckpointPermission: Codable, Hashable, Sendable {
            /// The permission identifier, which can be referenced in the API endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningCheckpointPermission/id`.
            public var id: Swift.String
            /// The Unix timestamp (in seconds) for when the permission was created.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningCheckpointPermission/created_at`.
            public var created_at: Swift.Int
            /// The project identifier that the permission is for.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningCheckpointPermission/project_id`.
            public var project_id: Swift.String
            /// The object type, which is always "checkpoint.permission".
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningCheckpointPermission/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case checkpoint_period_permission = "checkpoint.permission"
            }
            /// The object type, which is always "checkpoint.permission".
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningCheckpointPermission/object`.
            public var object: Components.Schemas.FineTuningCheckpointPermission.objectPayload
            /// Creates a new `FineTuningCheckpointPermission`.
            ///
            /// - Parameters:
            ///   - id: The permission identifier, which can be referenced in the API endpoints.
            ///   - created_at: The Unix timestamp (in seconds) for when the permission was created.
            ///   - project_id: The project identifier that the permission is for.
            ///   - object: The object type, which is always "checkpoint.permission".
            public init(
                id: Swift.String,
                created_at: Swift.Int,
                project_id: Swift.String,
                object: Components.Schemas.FineTuningCheckpointPermission.objectPayload
            ) {
                self.id = id
                self.created_at = created_at
                self.project_id = project_id
                self.object = object
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case created_at
                case project_id
                case object
            }
        }
        /// - Remark: Generated from `#/components/schemas/FineTuningIntegration`.
        public struct FineTuningIntegration: Codable, Hashable, Sendable {
            /// The type of the integration being enabled for the fine-tuning job
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningIntegration/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case wandb = "wandb"
            }
            /// The type of the integration being enabled for the fine-tuning job
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningIntegration/type`.
            public var _type: Components.Schemas.FineTuningIntegration._typePayload
            /// The settings for your integration with Weights and Biases. This payload specifies the project that
            /// metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags
            /// to your run, and set a default entity (team, username, etc) to be associated with your run.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningIntegration/wandb`.
            public struct wandbPayload: Codable, Hashable, Sendable {
                /// The name of the project that the new run will be created under.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuningIntegration/wandb/project`.
                public var project: Swift.String
                /// A display name to set for the run. If not set, we will use the Job ID as the name.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuningIntegration/wandb/name`.
                public var name: Swift.String?
                /// The entity to use for the run. This allows you to set the team or username of the WandB user that you would
                /// like associated with the run. If not set, the default entity for the registered WandB API key is used.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuningIntegration/wandb/entity`.
                public var entity: Swift.String?
                /// A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some
                /// default tags are generated by OpenAI: "openai/finetune", "openai/{base-model}", "openai/{ftjob-abcdef}".
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuningIntegration/wandb/tags`.
                public var tags: [Swift.String]?
                /// Creates a new `wandbPayload`.
                ///
                /// - Parameters:
                ///   - project: The name of the project that the new run will be created under.
                ///   - name: A display name to set for the run. If not set, we will use the Job ID as the name.
                ///   - entity: The entity to use for the run. This allows you to set the team or username of the WandB user that you would
                ///   - tags: A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some
                public init(
                    project: Swift.String,
                    name: Swift.String? = nil,
                    entity: Swift.String? = nil,
                    tags: [Swift.String]? = nil
                ) {
                    self.project = project
                    self.name = name
                    self.entity = entity
                    self.tags = tags
                }
                public enum CodingKeys: String, CodingKey {
                    case project
                    case name
                    case entity
                    case tags
                }
            }
            /// The settings for your integration with Weights and Biases. This payload specifies the project that
            /// metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags
            /// to your run, and set a default entity (team, username, etc) to be associated with your run.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningIntegration/wandb`.
            public var wandb: Components.Schemas.FineTuningIntegration.wandbPayload
            /// Creates a new `FineTuningIntegration`.
            ///
            /// - Parameters:
            ///   - _type: The type of the integration being enabled for the fine-tuning job
            ///   - wandb: The settings for your integration with Weights and Biases. This payload specifies the project that
            public init(
                _type: Components.Schemas.FineTuningIntegration._typePayload,
                wandb: Components.Schemas.FineTuningIntegration.wandbPayload
            ) {
                self._type = _type
                self.wandb = wandb
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case wandb
            }
        }
        /// The `fine_tuning.job` object represents a fine-tuning job that has been created through the API.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/FineTuningJob`.
        public struct FineTuningJob: Codable, Hashable, Sendable {
            /// The object identifier, which can be referenced in the API endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/id`.
            public var id: Swift.String
            /// The Unix timestamp (in seconds) for when the fine-tuning job was created.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/created_at`.
            public var created_at: Swift.Int
            /// For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/error`.
            public struct errorPayload: Codable, Hashable, Sendable {
                /// A machine-readable error code.
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuningJob/error/code`.
                public var code: Swift.String
                /// A human-readable error message.
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuningJob/error/message`.
                public var message: Swift.String
                /// The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific.
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuningJob/error/param`.
                public var param: Swift.String?
                /// Creates a new `errorPayload`.
                ///
                /// - Parameters:
                ///   - code: A machine-readable error code.
                ///   - message: A human-readable error message.
                ///   - param: The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific.
                public init(
                    code: Swift.String,
                    message: Swift.String,
                    param: Swift.String? = nil
                ) {
                    self.code = code
                    self.message = message
                    self.param = param
                }
                public enum CodingKeys: String, CodingKey {
                    case code
                    case message
                    case param
                }
            }
            /// For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/error`.
            public var error: Components.Schemas.FineTuningJob.errorPayload?
            /// The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/fine_tuned_model`.
            public var fine_tuned_model: Swift.String?
            /// The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/finished_at`.
            public var finished_at: Swift.Int?
            /// The hyperparameters used for the fine-tuning job. This value will only be returned when running `supervised` jobs.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters`.
            public struct hyperparametersPayload: Codable, Hashable, Sendable {
                /// Number of examples in each batch. A larger batch size means that model parameters
                /// are updated less frequently, but with lower variance.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters/batch_size`.
                @frozen public enum batch_sizePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters/batch_size/case1`.
                    @frozen public enum Case1Payload: String, Codable, Hashable, Sendable {
                        case auto = "auto"
                    }
                    /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters/batch_size/case1`.
                    case case1(Components.Schemas.FineTuningJob.hyperparametersPayload.batch_sizePayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters/batch_size/case2`.
                    case case2(Swift.Int)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// Number of examples in each batch. A larger batch size means that model parameters
                /// are updated less frequently, but with lower variance.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters/batch_size`.
                public var batch_size: Components.Schemas.FineTuningJob.hyperparametersPayload.batch_sizePayload?
                /// Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
                /// overfitting.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters/learning_rate_multiplier`.
                @frozen public enum learning_rate_multiplierPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters/learning_rate_multiplier/case1`.
                    @frozen public enum Case1Payload: String, Codable, Hashable, Sendable {
                        case auto = "auto"
                    }
                    /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters/learning_rate_multiplier/case1`.
                    case case1(Components.Schemas.FineTuningJob.hyperparametersPayload.learning_rate_multiplierPayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters/learning_rate_multiplier/case2`.
                    case case2(Swift.Double)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
                /// overfitting.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters/learning_rate_multiplier`.
                public var learning_rate_multiplier: Components.Schemas.FineTuningJob.hyperparametersPayload.learning_rate_multiplierPayload?
                /// The number of epochs to train the model for. An epoch refers to one full cycle
                /// through the training dataset.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters/n_epochs`.
                @frozen public enum n_epochsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters/n_epochs/case1`.
                    @frozen public enum Case1Payload: String, Codable, Hashable, Sendable {
                        case auto = "auto"
                    }
                    /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters/n_epochs/case1`.
                    case case1(Components.Schemas.FineTuningJob.hyperparametersPayload.n_epochsPayload.Case1Payload)
                    /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters/n_epochs/case2`.
                    case case2(Swift.Int)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// The number of epochs to train the model for. An epoch refers to one full cycle
                /// through the training dataset.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters/n_epochs`.
                public var n_epochs: Components.Schemas.FineTuningJob.hyperparametersPayload.n_epochsPayload?
                /// Creates a new `hyperparametersPayload`.
                ///
                /// - Parameters:
                ///   - batch_size: Number of examples in each batch. A larger batch size means that model parameters
                ///   - learning_rate_multiplier: Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
                ///   - n_epochs: The number of epochs to train the model for. An epoch refers to one full cycle
                public init(
                    batch_size: Components.Schemas.FineTuningJob.hyperparametersPayload.batch_sizePayload? = nil,
                    learning_rate_multiplier: Components.Schemas.FineTuningJob.hyperparametersPayload.learning_rate_multiplierPayload? = nil,
                    n_epochs: Components.Schemas.FineTuningJob.hyperparametersPayload.n_epochsPayload? = nil
                ) {
                    self.batch_size = batch_size
                    self.learning_rate_multiplier = learning_rate_multiplier
                    self.n_epochs = n_epochs
                }
                public enum CodingKeys: String, CodingKey {
                    case batch_size
                    case learning_rate_multiplier
                    case n_epochs
                }
            }
            /// The hyperparameters used for the fine-tuning job. This value will only be returned when running `supervised` jobs.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/hyperparameters`.
            public var hyperparameters: Components.Schemas.FineTuningJob.hyperparametersPayload
            /// The base model that is being fine-tuned.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/model`.
            public var model: Swift.String
            /// The object type, which is always "fine_tuning.job".
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case fine_tuning_period_job = "fine_tuning.job"
            }
            /// The object type, which is always "fine_tuning.job".
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/object`.
            public var object: Components.Schemas.FineTuningJob.objectPayload
            /// The organization that owns the fine-tuning job.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/organization_id`.
            public var organization_id: Swift.String
            /// The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/result_files`.
            public var result_files: [Swift.String]
            /// The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                case validating_files = "validating_files"
                case queued = "queued"
                case running = "running"
                case succeeded = "succeeded"
                case failed = "failed"
                case cancelled = "cancelled"
            }
            /// The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/status`.
            public var status: Components.Schemas.FineTuningJob.statusPayload
            /// The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/trained_tokens`.
            public var trained_tokens: Swift.Int?
            /// The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/training_file`.
            public var training_file: Swift.String
            /// The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/validation_file`.
            public var validation_file: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/integrationsPayload`.
            @frozen public enum integrationsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/FineTuningJob/integrationsPayload/case1`.
                case FineTuningIntegration(Components.Schemas.FineTuningIntegration)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .FineTuningIntegration(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .FineTuningIntegration(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// A list of integrations to enable for this fine-tuning job.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/integrations`.
            public typealias integrationsPayload = [Components.Schemas.FineTuningJob.integrationsPayloadPayload]
            /// A list of integrations to enable for this fine-tuning job.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/integrations`.
            public var integrations: Components.Schemas.FineTuningJob.integrationsPayload?
            /// The seed used for the fine-tuning job.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/seed`.
            public var seed: Swift.Int
            /// The Unix timestamp (in seconds) for when the fine-tuning job is estimated to finish. The value will be null if the fine-tuning job is not running.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/estimated_finish`.
            public var estimated_finish: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/method`.
            public var method: Components.Schemas.FineTuneMethod?
            /// - Remark: Generated from `#/components/schemas/FineTuningJob/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// Creates a new `FineTuningJob`.
            ///
            /// - Parameters:
            ///   - id: The object identifier, which can be referenced in the API endpoints.
            ///   - created_at: The Unix timestamp (in seconds) for when the fine-tuning job was created.
            ///   - error: For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.
            ///   - fine_tuned_model: The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.
            ///   - finished_at: The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.
            ///   - hyperparameters: The hyperparameters used for the fine-tuning job. This value will only be returned when running `supervised` jobs.
            ///   - model: The base model that is being fine-tuned.
            ///   - object: The object type, which is always "fine_tuning.job".
            ///   - organization_id: The organization that owns the fine-tuning job.
            ///   - result_files: The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).
            ///   - status: The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
            ///   - trained_tokens: The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.
            ///   - training_file: The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).
            ///   - validation_file: The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).
            ///   - integrations: A list of integrations to enable for this fine-tuning job.
            ///   - seed: The seed used for the fine-tuning job.
            ///   - estimated_finish: The Unix timestamp (in seconds) for when the fine-tuning job is estimated to finish. The value will be null if the fine-tuning job is not running.
            ///   - method:
            ///   - metadata:
            public init(
                id: Swift.String,
                created_at: Swift.Int,
                error: Components.Schemas.FineTuningJob.errorPayload? = nil,
                fine_tuned_model: Swift.String? = nil,
                finished_at: Swift.Int? = nil,
                hyperparameters: Components.Schemas.FineTuningJob.hyperparametersPayload,
                model: Swift.String,
                object: Components.Schemas.FineTuningJob.objectPayload,
                organization_id: Swift.String,
                result_files: [Swift.String],
                status: Components.Schemas.FineTuningJob.statusPayload,
                trained_tokens: Swift.Int? = nil,
                training_file: Swift.String,
                validation_file: Swift.String? = nil,
                integrations: Components.Schemas.FineTuningJob.integrationsPayload? = nil,
                seed: Swift.Int,
                estimated_finish: Swift.Int? = nil,
                method: Components.Schemas.FineTuneMethod? = nil,
                metadata: Components.Schemas.Metadata? = nil
            ) {
                self.id = id
                self.created_at = created_at
                self.error = error
                self.fine_tuned_model = fine_tuned_model
                self.finished_at = finished_at
                self.hyperparameters = hyperparameters
                self.model = model
                self.object = object
                self.organization_id = organization_id
                self.result_files = result_files
                self.status = status
                self.trained_tokens = trained_tokens
                self.training_file = training_file
                self.validation_file = validation_file
                self.integrations = integrations
                self.seed = seed
                self.estimated_finish = estimated_finish
                self.method = method
                self.metadata = metadata
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case created_at
                case error
                case fine_tuned_model
                case finished_at
                case hyperparameters
                case model
                case object
                case organization_id
                case result_files
                case status
                case trained_tokens
                case training_file
                case validation_file
                case integrations
                case seed
                case estimated_finish
                case method
                case metadata
            }
        }
        /// The `fine_tuning.job.checkpoint` object represents a model checkpoint for a fine-tuning job that is ready to use.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint`.
        public struct FineTuningJobCheckpoint: Codable, Hashable, Sendable {
            /// The checkpoint identifier, which can be referenced in the API endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/id`.
            public var id: Swift.String
            /// The Unix timestamp (in seconds) for when the checkpoint was created.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/created_at`.
            public var created_at: Swift.Int
            /// The name of the fine-tuned checkpoint model that is created.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/fine_tuned_model_checkpoint`.
            public var fine_tuned_model_checkpoint: Swift.String
            /// The step number that the checkpoint was created at.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/step_number`.
            public var step_number: Swift.Int
            /// Metrics at the step number during the fine-tuning job.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/metrics`.
            public struct metricsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/metrics/step`.
                public var step: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/metrics/train_loss`.
                public var train_loss: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/metrics/train_mean_token_accuracy`.
                public var train_mean_token_accuracy: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/metrics/valid_loss`.
                public var valid_loss: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/metrics/valid_mean_token_accuracy`.
                public var valid_mean_token_accuracy: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/metrics/full_valid_loss`.
                public var full_valid_loss: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/metrics/full_valid_mean_token_accuracy`.
                public var full_valid_mean_token_accuracy: Swift.Double?
                /// Creates a new `metricsPayload`.
                ///
                /// - Parameters:
                ///   - step:
                ///   - train_loss:
                ///   - train_mean_token_accuracy:
                ///   - valid_loss:
                ///   - valid_mean_token_accuracy:
                ///   - full_valid_loss:
                ///   - full_valid_mean_token_accuracy:
                public init(
                    step: Swift.Double? = nil,
                    train_loss: Swift.Double? = nil,
                    train_mean_token_accuracy: Swift.Double? = nil,
                    valid_loss: Swift.Double? = nil,
                    valid_mean_token_accuracy: Swift.Double? = nil,
                    full_valid_loss: Swift.Double? = nil,
                    full_valid_mean_token_accuracy: Swift.Double? = nil
                ) {
                    self.step = step
                    self.train_loss = train_loss
                    self.train_mean_token_accuracy = train_mean_token_accuracy
                    self.valid_loss = valid_loss
                    self.valid_mean_token_accuracy = valid_mean_token_accuracy
                    self.full_valid_loss = full_valid_loss
                    self.full_valid_mean_token_accuracy = full_valid_mean_token_accuracy
                }
                public enum CodingKeys: String, CodingKey {
                    case step
                    case train_loss
                    case train_mean_token_accuracy
                    case valid_loss
                    case valid_mean_token_accuracy
                    case full_valid_loss
                    case full_valid_mean_token_accuracy
                }
            }
            /// Metrics at the step number during the fine-tuning job.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/metrics`.
            public var metrics: Components.Schemas.FineTuningJobCheckpoint.metricsPayload
            /// The name of the fine-tuning job that this checkpoint was created from.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/fine_tuning_job_id`.
            public var fine_tuning_job_id: Swift.String
            /// The object type, which is always "fine_tuning.job.checkpoint".
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case fine_tuning_period_job_period_checkpoint = "fine_tuning.job.checkpoint"
            }
            /// The object type, which is always "fine_tuning.job.checkpoint".
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobCheckpoint/object`.
            public var object: Components.Schemas.FineTuningJobCheckpoint.objectPayload
            /// Creates a new `FineTuningJobCheckpoint`.
            ///
            /// - Parameters:
            ///   - id: The checkpoint identifier, which can be referenced in the API endpoints.
            ///   - created_at: The Unix timestamp (in seconds) for when the checkpoint was created.
            ///   - fine_tuned_model_checkpoint: The name of the fine-tuned checkpoint model that is created.
            ///   - step_number: The step number that the checkpoint was created at.
            ///   - metrics: Metrics at the step number during the fine-tuning job.
            ///   - fine_tuning_job_id: The name of the fine-tuning job that this checkpoint was created from.
            ///   - object: The object type, which is always "fine_tuning.job.checkpoint".
            public init(
                id: Swift.String,
                created_at: Swift.Int,
                fine_tuned_model_checkpoint: Swift.String,
                step_number: Swift.Int,
                metrics: Components.Schemas.FineTuningJobCheckpoint.metricsPayload,
                fine_tuning_job_id: Swift.String,
                object: Components.Schemas.FineTuningJobCheckpoint.objectPayload
            ) {
                self.id = id
                self.created_at = created_at
                self.fine_tuned_model_checkpoint = fine_tuned_model_checkpoint
                self.step_number = step_number
                self.metrics = metrics
                self.fine_tuning_job_id = fine_tuning_job_id
                self.object = object
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case created_at
                case fine_tuned_model_checkpoint
                case step_number
                case metrics
                case fine_tuning_job_id
                case object
            }
        }
        /// Fine-tuning job event object
        ///
        /// - Remark: Generated from `#/components/schemas/FineTuningJobEvent`.
        public struct FineTuningJobEvent: Codable, Hashable, Sendable {
            /// The object type, which is always "fine_tuning.job.event".
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobEvent/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case fine_tuning_period_job_period_event = "fine_tuning.job.event"
            }
            /// The object type, which is always "fine_tuning.job.event".
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobEvent/object`.
            public var object: Components.Schemas.FineTuningJobEvent.objectPayload
            /// The object identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobEvent/id`.
            public var id: Swift.String
            /// The Unix timestamp (in seconds) for when the fine-tuning job was created.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobEvent/created_at`.
            public var created_at: Swift.Int
            /// The log level of the event.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobEvent/level`.
            @frozen public enum levelPayload: String, Codable, Hashable, Sendable {
                case info = "info"
                case warn = "warn"
                case error = "error"
            }
            /// The log level of the event.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobEvent/level`.
            public var level: Components.Schemas.FineTuningJobEvent.levelPayload
            /// The message of the event.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobEvent/message`.
            public var message: Swift.String
            /// The type of event.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobEvent/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case message = "message"
                case metrics = "metrics"
            }
            /// The type of event.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobEvent/type`.
            public var _type: Components.Schemas.FineTuningJobEvent._typePayload?
            /// The data associated with the event.
            ///
            /// - Remark: Generated from `#/components/schemas/FineTuningJobEvent/data`.
            public var data: OpenAPIRuntime.OpenAPIObjectContainer?
            /// Creates a new `FineTuningJobEvent`.
            ///
            /// - Parameters:
            ///   - object: The object type, which is always "fine_tuning.job.event".
            ///   - id: The object identifier.
            ///   - created_at: The Unix timestamp (in seconds) for when the fine-tuning job was created.
            ///   - level: The log level of the event.
            ///   - message: The message of the event.
            ///   - _type: The type of event.
            ///   - data: The data associated with the event.
            public init(
                object: Components.Schemas.FineTuningJobEvent.objectPayload,
                id: Swift.String,
                created_at: Swift.Int,
                level: Components.Schemas.FineTuningJobEvent.levelPayload,
                message: Swift.String,
                _type: Components.Schemas.FineTuningJobEvent._typePayload? = nil,
                data: OpenAPIRuntime.OpenAPIObjectContainer? = nil
            ) {
                self.object = object
                self.id = id
                self.created_at = created_at
                self.level = level
                self.message = message
                self._type = _type
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case id
                case created_at
                case level
                case message
                case _type = "type"
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/FunctionObject`.
        public struct FunctionObject: Codable, Hashable, Sendable {
            /// A description of what the function does, used by the model to choose when and how to call the function.
            ///
            /// - Remark: Generated from `#/components/schemas/FunctionObject/description`.
            public var description: Swift.String?
            /// The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
            ///
            /// - Remark: Generated from `#/components/schemas/FunctionObject/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/FunctionObject/parameters`.
            public var parameters: Components.Schemas.FunctionParameters?
            /// Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling).
            ///
            /// - Remark: Generated from `#/components/schemas/FunctionObject/strict`.
            public var strict: Swift.Bool?
            /// Creates a new `FunctionObject`.
            ///
            /// - Parameters:
            ///   - description: A description of what the function does, used by the model to choose when and how to call the function.
            ///   - name: The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
            ///   - parameters:
            ///   - strict: Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling).
            public init(
                description: Swift.String? = nil,
                name: Swift.String,
                parameters: Components.Schemas.FunctionParameters? = nil,
                strict: Swift.Bool? = nil
            ) {
                self.description = description
                self.name = name
                self.parameters = parameters
                self.strict = strict
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case name
                case parameters
                case strict
            }
        }
        /// The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. 
        ///
        /// Omitting `parameters` defines a function with an empty parameter list.
        ///
        /// - Remark: Generated from `#/components/schemas/FunctionParameters`.
        public struct FunctionParameters: Codable, Hashable, Sendable {
            /// A container of undocumented properties.
            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `FunctionParameters`.
            ///
            /// - Parameters:
            ///   - additionalProperties: A container of undocumented properties.
            public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                self.additionalProperties = additionalProperties
            }
            public init(from decoder: any Decoder) throws {
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
            }
            public func encode(to encoder: any Encoder) throws {
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// Represents the content or the URL of an image generated by the OpenAI API.
        ///
        /// - Remark: Generated from `#/components/schemas/Image`.
        public struct Image: Codable, Hashable, Sendable {
            /// The base64-encoded JSON of the generated image. Default value for `gpt-image-1`, and only present if `response_format` is set to `b64_json` for `dall-e-2` and `dall-e-3`.
            ///
            /// - Remark: Generated from `#/components/schemas/Image/b64_json`.
            public var b64_json: Swift.String?
            /// When using `dall-e-2` or `dall-e-3`, the URL of the generated image if `response_format` is set to `url` (default value). Unsupported for `gpt-image-1`.
            ///
            /// - Remark: Generated from `#/components/schemas/Image/url`.
            public var url: Swift.String?
            /// For `dall-e-3` only, the revised prompt that was used to generate the image.
            ///
            /// - Remark: Generated from `#/components/schemas/Image/revised_prompt`.
            public var revised_prompt: Swift.String?
            /// Creates a new `Image`.
            ///
            /// - Parameters:
            ///   - b64_json: The base64-encoded JSON of the generated image. Default value for `gpt-image-1`, and only present if `response_format` is set to `b64_json` for `dall-e-2` and `dall-e-3`.
            ///   - url: When using `dall-e-2` or `dall-e-3`, the URL of the generated image if `response_format` is set to `url` (default value). Unsupported for `gpt-image-1`.
            ///   - revised_prompt: For `dall-e-3` only, the revised prompt that was used to generate the image.
            public init(
                b64_json: Swift.String? = nil,
                url: Swift.String? = nil,
                revised_prompt: Swift.String? = nil
            ) {
                self.b64_json = b64_json
                self.url = url
                self.revised_prompt = revised_prompt
            }
            public enum CodingKeys: String, CodingKey {
                case b64_json
                case url
                case revised_prompt
            }
        }
        /// The response from the image generation endpoint.
        ///
        /// - Remark: Generated from `#/components/schemas/ImagesResponse`.
        public struct ImagesResponse: Codable, Hashable, Sendable {
            /// The Unix timestamp (in seconds) of when the image was created.
            ///
            /// - Remark: Generated from `#/components/schemas/ImagesResponse/created`.
            public var created: Swift.Int
            /// The list of generated images.
            ///
            /// - Remark: Generated from `#/components/schemas/ImagesResponse/data`.
            public var data: [Components.Schemas.Image]?
            /// For `gpt-image-1` only, the token usage information for the image generation.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImagesResponse/usage`.
            public struct usagePayload: Codable, Hashable, Sendable {
                /// The total number of tokens (images and text) used for the image generation.
                ///
                /// - Remark: Generated from `#/components/schemas/ImagesResponse/usage/total_tokens`.
                public var total_tokens: Swift.Int
                /// The number of tokens (images and text) in the input prompt.
                ///
                /// - Remark: Generated from `#/components/schemas/ImagesResponse/usage/input_tokens`.
                public var input_tokens: Swift.Int
                /// The number of image tokens in the output image.
                ///
                /// - Remark: Generated from `#/components/schemas/ImagesResponse/usage/output_tokens`.
                public var output_tokens: Swift.Int
                /// The input tokens detailed information for the image generation.
                ///
                /// - Remark: Generated from `#/components/schemas/ImagesResponse/usage/input_tokens_details`.
                public struct input_tokens_detailsPayload: Codable, Hashable, Sendable {
                    /// The number of text tokens in the input prompt.
                    ///
                    /// - Remark: Generated from `#/components/schemas/ImagesResponse/usage/input_tokens_details/text_tokens`.
                    public var text_tokens: Swift.Int
                    /// The number of image tokens in the input prompt.
                    ///
                    /// - Remark: Generated from `#/components/schemas/ImagesResponse/usage/input_tokens_details/image_tokens`.
                    public var image_tokens: Swift.Int
                    /// Creates a new `input_tokens_detailsPayload`.
                    ///
                    /// - Parameters:
                    ///   - text_tokens: The number of text tokens in the input prompt.
                    ///   - image_tokens: The number of image tokens in the input prompt.
                    public init(
                        text_tokens: Swift.Int,
                        image_tokens: Swift.Int
                    ) {
                        self.text_tokens = text_tokens
                        self.image_tokens = image_tokens
                    }
                    public enum CodingKeys: String, CodingKey {
                        case text_tokens
                        case image_tokens
                    }
                }
                /// The input tokens detailed information for the image generation.
                ///
                /// - Remark: Generated from `#/components/schemas/ImagesResponse/usage/input_tokens_details`.
                public var input_tokens_details: Components.Schemas.ImagesResponse.usagePayload.input_tokens_detailsPayload
                /// Creates a new `usagePayload`.
                ///
                /// - Parameters:
                ///   - total_tokens: The total number of tokens (images and text) used for the image generation.
                ///   - input_tokens: The number of tokens (images and text) in the input prompt.
                ///   - output_tokens: The number of image tokens in the output image.
                ///   - input_tokens_details: The input tokens detailed information for the image generation.
                public init(
                    total_tokens: Swift.Int,
                    input_tokens: Swift.Int,
                    output_tokens: Swift.Int,
                    input_tokens_details: Components.Schemas.ImagesResponse.usagePayload.input_tokens_detailsPayload
                ) {
                    self.total_tokens = total_tokens
                    self.input_tokens = input_tokens
                    self.output_tokens = output_tokens
                    self.input_tokens_details = input_tokens_details
                }
                public enum CodingKeys: String, CodingKey {
                    case total_tokens
                    case input_tokens
                    case output_tokens
                    case input_tokens_details
                }
            }
            /// For `gpt-image-1` only, the token usage information for the image generation.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ImagesResponse/usage`.
            public var usage: Components.Schemas.ImagesResponse.usagePayload?
            /// Creates a new `ImagesResponse`.
            ///
            /// - Parameters:
            ///   - created: The Unix timestamp (in seconds) of when the image was created.
            ///   - data: The list of generated images.
            ///   - usage: For `gpt-image-1` only, the token usage information for the image generation.
            public init(
                created: Swift.Int,
                data: [Components.Schemas.Image]? = nil,
                usage: Components.Schemas.ImagesResponse.usagePayload? = nil
            ) {
                self.created = created
                self.data = data
                self.usage = usage
            }
            public enum CodingKeys: String, CodingKey {
                case created
                case data
                case usage
            }
        }
        /// - Remark: Generated from `#/components/schemas/InputContent`.
        @frozen public enum InputContent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InputContent/case1`.
            case InputTextContent(Components.Schemas.InputTextContent)
            /// - Remark: Generated from `#/components/schemas/InputContent/case2`.
            case InputImageContent(Components.Schemas.InputImageContent)
            /// - Remark: Generated from `#/components/schemas/InputContent/case3`.
            case InputFileContent(Components.Schemas.InputFileContent)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .InputTextContent(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .InputImageContent(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .InputFileContent(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .InputTextContent(value):
                    try value.encode(to: encoder)
                case let .InputImageContent(value):
                    try value.encode(to: encoder)
                case let .InputFileContent(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// A list of one or many input items to the model, containing different content 
        /// types.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/InputMessageContentList`.
        public typealias InputMessageContentList = [Components.Schemas.InputContent]
        /// - Remark: Generated from `#/components/schemas/ListAssistantsResponse`.
        public struct ListAssistantsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListAssistantsResponse/object`.
            public var object: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListAssistantsResponse/data`.
            public var data: [Components.Schemas.AssistantObject]
            /// - Remark: Generated from `#/components/schemas/ListAssistantsResponse/first_id`.
            public var first_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListAssistantsResponse/last_id`.
            public var last_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListAssistantsResponse/has_more`.
            public var has_more: Swift.Bool
            /// Creates a new `ListAssistantsResponse`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - data:
            ///   - first_id:
            ///   - last_id:
            ///   - has_more:
            public init(
                object: Swift.String,
                data: [Components.Schemas.AssistantObject],
                first_id: Swift.String,
                last_id: Swift.String,
                has_more: Swift.Bool
            ) {
                self.object = object
                self.data = data
                self.first_id = first_id
                self.last_id = last_id
                self.has_more = has_more
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
                case first_id
                case last_id
                case has_more
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListAuditLogsResponse`.
        public struct ListAuditLogsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListAuditLogsResponse/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case list = "list"
            }
            /// - Remark: Generated from `#/components/schemas/ListAuditLogsResponse/object`.
            public var object: Components.Schemas.ListAuditLogsResponse.objectPayload
            /// - Remark: Generated from `#/components/schemas/ListAuditLogsResponse/data`.
            public var data: [Components.Schemas.AuditLog]
            /// - Remark: Generated from `#/components/schemas/ListAuditLogsResponse/first_id`.
            public var first_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListAuditLogsResponse/last_id`.
            public var last_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListAuditLogsResponse/has_more`.
            public var has_more: Swift.Bool
            /// Creates a new `ListAuditLogsResponse`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - data:
            ///   - first_id:
            ///   - last_id:
            ///   - has_more:
            public init(
                object: Components.Schemas.ListAuditLogsResponse.objectPayload,
                data: [Components.Schemas.AuditLog],
                first_id: Swift.String,
                last_id: Swift.String,
                has_more: Swift.Bool
            ) {
                self.object = object
                self.data = data
                self.first_id = first_id
                self.last_id = last_id
                self.has_more = has_more
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
                case first_id
                case last_id
                case has_more
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListBatchesResponse`.
        public struct ListBatchesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListBatchesResponse/data`.
            public var data: [Components.Schemas.Batch]
            /// - Remark: Generated from `#/components/schemas/ListBatchesResponse/first_id`.
            public var first_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListBatchesResponse/last_id`.
            public var last_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListBatchesResponse/has_more`.
            public var has_more: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ListBatchesResponse/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case list = "list"
            }
            /// - Remark: Generated from `#/components/schemas/ListBatchesResponse/object`.
            public var object: Components.Schemas.ListBatchesResponse.objectPayload
            /// Creates a new `ListBatchesResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - first_id:
            ///   - last_id:
            ///   - has_more:
            ///   - object:
            public init(
                data: [Components.Schemas.Batch],
                first_id: Swift.String? = nil,
                last_id: Swift.String? = nil,
                has_more: Swift.Bool,
                object: Components.Schemas.ListBatchesResponse.objectPayload
            ) {
                self.data = data
                self.first_id = first_id
                self.last_id = last_id
                self.has_more = has_more
                self.object = object
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case first_id
                case last_id
                case has_more
                case object
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListFilesResponse`.
        public struct ListFilesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListFilesResponse/object`.
            public var object: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListFilesResponse/data`.
            public var data: [Components.Schemas.OpenAIFile]
            /// - Remark: Generated from `#/components/schemas/ListFilesResponse/first_id`.
            public var first_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListFilesResponse/last_id`.
            public var last_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListFilesResponse/has_more`.
            public var has_more: Swift.Bool
            /// Creates a new `ListFilesResponse`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - data:
            ///   - first_id:
            ///   - last_id:
            ///   - has_more:
            public init(
                object: Swift.String,
                data: [Components.Schemas.OpenAIFile],
                first_id: Swift.String,
                last_id: Swift.String,
                has_more: Swift.Bool
            ) {
                self.object = object
                self.data = data
                self.first_id = first_id
                self.last_id = last_id
                self.has_more = has_more
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
                case first_id
                case last_id
                case has_more
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListFineTuningCheckpointPermissionResponse`.
        public struct ListFineTuningCheckpointPermissionResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListFineTuningCheckpointPermissionResponse/data`.
            public var data: [Components.Schemas.FineTuningCheckpointPermission]
            /// - Remark: Generated from `#/components/schemas/ListFineTuningCheckpointPermissionResponse/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case list = "list"
            }
            /// - Remark: Generated from `#/components/schemas/ListFineTuningCheckpointPermissionResponse/object`.
            public var object: Components.Schemas.ListFineTuningCheckpointPermissionResponse.objectPayload
            /// - Remark: Generated from `#/components/schemas/ListFineTuningCheckpointPermissionResponse/first_id`.
            public var first_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListFineTuningCheckpointPermissionResponse/last_id`.
            public var last_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListFineTuningCheckpointPermissionResponse/has_more`.
            public var has_more: Swift.Bool
            /// Creates a new `ListFineTuningCheckpointPermissionResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - object:
            ///   - first_id:
            ///   - last_id:
            ///   - has_more:
            public init(
                data: [Components.Schemas.FineTuningCheckpointPermission],
                object: Components.Schemas.ListFineTuningCheckpointPermissionResponse.objectPayload,
                first_id: Swift.String? = nil,
                last_id: Swift.String? = nil,
                has_more: Swift.Bool
            ) {
                self.data = data
                self.object = object
                self.first_id = first_id
                self.last_id = last_id
                self.has_more = has_more
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case object
                case first_id
                case last_id
                case has_more
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListFineTuningJobCheckpointsResponse`.
        public struct ListFineTuningJobCheckpointsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListFineTuningJobCheckpointsResponse/data`.
            public var data: [Components.Schemas.FineTuningJobCheckpoint]
            /// - Remark: Generated from `#/components/schemas/ListFineTuningJobCheckpointsResponse/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case list = "list"
            }
            /// - Remark: Generated from `#/components/schemas/ListFineTuningJobCheckpointsResponse/object`.
            public var object: Components.Schemas.ListFineTuningJobCheckpointsResponse.objectPayload
            /// - Remark: Generated from `#/components/schemas/ListFineTuningJobCheckpointsResponse/first_id`.
            public var first_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListFineTuningJobCheckpointsResponse/last_id`.
            public var last_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ListFineTuningJobCheckpointsResponse/has_more`.
            public var has_more: Swift.Bool
            /// Creates a new `ListFineTuningJobCheckpointsResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - object:
            ///   - first_id:
            ///   - last_id:
            ///   - has_more:
            public init(
                data: [Components.Schemas.FineTuningJobCheckpoint],
                object: Components.Schemas.ListFineTuningJobCheckpointsResponse.objectPayload,
                first_id: Swift.String? = nil,
                last_id: Swift.String? = nil,
                has_more: Swift.Bool
            ) {
                self.data = data
                self.object = object
                self.first_id = first_id
                self.last_id = last_id
                self.has_more = has_more
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case object
                case first_id
                case last_id
                case has_more
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListFineTuningJobEventsResponse`.
        public struct ListFineTuningJobEventsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListFineTuningJobEventsResponse/data`.
            public var data: [Components.Schemas.FineTuningJobEvent]
            /// - Remark: Generated from `#/components/schemas/ListFineTuningJobEventsResponse/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case list = "list"
            }
            /// - Remark: Generated from `#/components/schemas/ListFineTuningJobEventsResponse/object`.
            public var object: Components.Schemas.ListFineTuningJobEventsResponse.objectPayload
            /// - Remark: Generated from `#/components/schemas/ListFineTuningJobEventsResponse/has_more`.
            public var has_more: Swift.Bool
            /// Creates a new `ListFineTuningJobEventsResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - object:
            ///   - has_more:
            public init(
                data: [Components.Schemas.FineTuningJobEvent],
                object: Components.Schemas.ListFineTuningJobEventsResponse.objectPayload,
                has_more: Swift.Bool
            ) {
                self.data = data
                self.object = object
                self.has_more = has_more
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case object
                case has_more
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListMessagesResponse`.
        public struct ListMessagesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListMessagesResponse/object`.
            public var object: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListMessagesResponse/data`.
            public var data: [Components.Schemas.MessageObject]
            /// - Remark: Generated from `#/components/schemas/ListMessagesResponse/first_id`.
            public var first_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListMessagesResponse/last_id`.
            public var last_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListMessagesResponse/has_more`.
            public var has_more: Swift.Bool
            /// Creates a new `ListMessagesResponse`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - data:
            ///   - first_id:
            ///   - last_id:
            ///   - has_more:
            public init(
                object: Swift.String,
                data: [Components.Schemas.MessageObject],
                first_id: Swift.String,
                last_id: Swift.String,
                has_more: Swift.Bool
            ) {
                self.object = object
                self.data = data
                self.first_id = first_id
                self.last_id = last_id
                self.has_more = has_more
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
                case first_id
                case last_id
                case has_more
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListModelsResponse`.
        public struct ListModelsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListModelsResponse/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case list = "list"
            }
            /// - Remark: Generated from `#/components/schemas/ListModelsResponse/object`.
            public var object: Components.Schemas.ListModelsResponse.objectPayload
            /// - Remark: Generated from `#/components/schemas/ListModelsResponse/data`.
            public var data: [Components.Schemas.Model]
            /// Creates a new `ListModelsResponse`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - data:
            public init(
                object: Components.Schemas.ListModelsResponse.objectPayload,
                data: [Components.Schemas.Model]
            ) {
                self.object = object
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListPaginatedFineTuningJobsResponse`.
        public struct ListPaginatedFineTuningJobsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListPaginatedFineTuningJobsResponse/data`.
            public var data: [Components.Schemas.FineTuningJob]
            /// - Remark: Generated from `#/components/schemas/ListPaginatedFineTuningJobsResponse/has_more`.
            public var has_more: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ListPaginatedFineTuningJobsResponse/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case list = "list"
            }
            /// - Remark: Generated from `#/components/schemas/ListPaginatedFineTuningJobsResponse/object`.
            public var object: Components.Schemas.ListPaginatedFineTuningJobsResponse.objectPayload
            /// Creates a new `ListPaginatedFineTuningJobsResponse`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - has_more:
            ///   - object:
            public init(
                data: [Components.Schemas.FineTuningJob],
                has_more: Swift.Bool,
                object: Components.Schemas.ListPaginatedFineTuningJobsResponse.objectPayload
            ) {
                self.data = data
                self.has_more = has_more
                self.object = object
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case has_more
                case object
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListRunStepsResponse`.
        public struct ListRunStepsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListRunStepsResponse/object`.
            public var object: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListRunStepsResponse/data`.
            public var data: [Components.Schemas.RunStepObject]
            /// - Remark: Generated from `#/components/schemas/ListRunStepsResponse/first_id`.
            public var first_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListRunStepsResponse/last_id`.
            public var last_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListRunStepsResponse/has_more`.
            public var has_more: Swift.Bool
            /// Creates a new `ListRunStepsResponse`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - data:
            ///   - first_id:
            ///   - last_id:
            ///   - has_more:
            public init(
                object: Swift.String,
                data: [Components.Schemas.RunStepObject],
                first_id: Swift.String,
                last_id: Swift.String,
                has_more: Swift.Bool
            ) {
                self.object = object
                self.data = data
                self.first_id = first_id
                self.last_id = last_id
                self.has_more = has_more
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
                case first_id
                case last_id
                case has_more
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListRunsResponse`.
        public struct ListRunsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListRunsResponse/object`.
            public var object: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListRunsResponse/data`.
            public var data: [Components.Schemas.RunObject]
            /// - Remark: Generated from `#/components/schemas/ListRunsResponse/first_id`.
            public var first_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListRunsResponse/last_id`.
            public var last_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/ListRunsResponse/has_more`.
            public var has_more: Swift.Bool
            /// Creates a new `ListRunsResponse`.
            ///
            /// - Parameters:
            ///   - object:
            ///   - data:
            ///   - first_id:
            ///   - last_id:
            ///   - has_more:
            public init(
                object: Swift.String,
                data: [Components.Schemas.RunObject],
                first_id: Swift.String,
                last_id: Swift.String,
                has_more: Swift.Bool
            ) {
                self.object = object
                self.data = data
                self.first_id = first_id
                self.last_id = last_id
                self.has_more = has_more
            }
            public enum CodingKeys: String, CodingKey {
                case object
                case data
                case first_id
                case last_id
                case has_more
            }
        }
        /// References an image [File](/docs/api-reference/files) in the content of a message.
        ///
        /// - Remark: Generated from `#/components/schemas/MessageContentImageFileObject`.
        public struct MessageContentImageFileObject: Codable, Hashable, Sendable {
            /// Always `image_file`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageContentImageFileObject/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case image_file = "image_file"
            }
            /// Always `image_file`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageContentImageFileObject/type`.
            public var _type: Components.Schemas.MessageContentImageFileObject._typePayload
            /// - Remark: Generated from `#/components/schemas/MessageContentImageFileObject/image_file`.
            public struct image_filePayload: Codable, Hashable, Sendable {
                /// The [File](/docs/api-reference/files) ID of the image in the message content. Set `purpose="vision"` when uploading the File if you need to later display the file content.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageContentImageFileObject/image_file/file_id`.
                public var file_id: Swift.String
                /// Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageContentImageFileObject/image_file/detail`.
                @frozen public enum detailPayload: String, Codable, Hashable, Sendable {
                    case auto = "auto"
                    case low = "low"
                    case high = "high"
                }
                /// Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageContentImageFileObject/image_file/detail`.
                public var detail: Components.Schemas.MessageContentImageFileObject.image_filePayload.detailPayload?
                /// Creates a new `image_filePayload`.
                ///
                /// - Parameters:
                ///   - file_id: The [File](/docs/api-reference/files) ID of the image in the message content. Set `purpose="vision"` when uploading the File if you need to later display the file content.
                ///   - detail: Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.
                public init(
                    file_id: Swift.String,
                    detail: Components.Schemas.MessageContentImageFileObject.image_filePayload.detailPayload? = nil
                ) {
                    self.file_id = file_id
                    self.detail = detail
                }
                public enum CodingKeys: String, CodingKey {
                    case file_id
                    case detail
                }
            }
            /// - Remark: Generated from `#/components/schemas/MessageContentImageFileObject/image_file`.
            public var image_file: Components.Schemas.MessageContentImageFileObject.image_filePayload
            /// Creates a new `MessageContentImageFileObject`.
            ///
            /// - Parameters:
            ///   - _type: Always `image_file`.
            ///   - image_file:
            public init(
                _type: Components.Schemas.MessageContentImageFileObject._typePayload,
                image_file: Components.Schemas.MessageContentImageFileObject.image_filePayload
            ) {
                self._type = _type
                self.image_file = image_file
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case image_file
            }
        }
        /// References an image URL in the content of a message.
        ///
        /// - Remark: Generated from `#/components/schemas/MessageContentImageUrlObject`.
        public struct MessageContentImageUrlObject: Codable, Hashable, Sendable {
            /// The type of the content part.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageContentImageUrlObject/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case image_url = "image_url"
            }
            /// The type of the content part.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageContentImageUrlObject/type`.
            public var _type: Components.Schemas.MessageContentImageUrlObject._typePayload
            /// - Remark: Generated from `#/components/schemas/MessageContentImageUrlObject/image_url`.
            public struct image_urlPayload: Codable, Hashable, Sendable {
                /// The external URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageContentImageUrlObject/image_url/url`.
                public var url: Swift.String
                /// Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`. Default value is `auto`
                ///
                /// - Remark: Generated from `#/components/schemas/MessageContentImageUrlObject/image_url/detail`.
                @frozen public enum detailPayload: String, Codable, Hashable, Sendable {
                    case auto = "auto"
                    case low = "low"
                    case high = "high"
                }
                /// Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`. Default value is `auto`
                ///
                /// - Remark: Generated from `#/components/schemas/MessageContentImageUrlObject/image_url/detail`.
                public var detail: Components.Schemas.MessageContentImageUrlObject.image_urlPayload.detailPayload?
                /// Creates a new `image_urlPayload`.
                ///
                /// - Parameters:
                ///   - url: The external URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.
                ///   - detail: Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`. Default value is `auto`
                public init(
                    url: Swift.String,
                    detail: Components.Schemas.MessageContentImageUrlObject.image_urlPayload.detailPayload? = nil
                ) {
                    self.url = url
                    self.detail = detail
                }
                public enum CodingKeys: String, CodingKey {
                    case url
                    case detail
                }
            }
            /// - Remark: Generated from `#/components/schemas/MessageContentImageUrlObject/image_url`.
            public var image_url: Components.Schemas.MessageContentImageUrlObject.image_urlPayload
            /// Creates a new `MessageContentImageUrlObject`.
            ///
            /// - Parameters:
            ///   - _type: The type of the content part.
            ///   - image_url:
            public init(
                _type: Components.Schemas.MessageContentImageUrlObject._typePayload,
                image_url: Components.Schemas.MessageContentImageUrlObject.image_urlPayload
            ) {
                self._type = _type
                self.image_url = image_url
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case image_url
            }
        }
        /// The refusal content generated by the assistant.
        ///
        /// - Remark: Generated from `#/components/schemas/MessageContentRefusalObject`.
        public struct MessageContentRefusalObject: Codable, Hashable, Sendable {
            /// Always `refusal`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageContentRefusalObject/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case refusal = "refusal"
            }
            /// Always `refusal`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageContentRefusalObject/type`.
            public var _type: Components.Schemas.MessageContentRefusalObject._typePayload
            /// - Remark: Generated from `#/components/schemas/MessageContentRefusalObject/refusal`.
            public var refusal: Swift.String
            /// Creates a new `MessageContentRefusalObject`.
            ///
            /// - Parameters:
            ///   - _type: Always `refusal`.
            ///   - refusal:
            public init(
                _type: Components.Schemas.MessageContentRefusalObject._typePayload,
                refusal: Swift.String
            ) {
                self._type = _type
                self.refusal = refusal
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case refusal
            }
        }
        /// A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the "file_search" tool to search files.
        ///
        /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFileCitationObject`.
        public struct MessageContentTextAnnotationsFileCitationObject: Codable, Hashable, Sendable {
            /// Always `file_citation`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFileCitationObject/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case file_citation = "file_citation"
            }
            /// Always `file_citation`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFileCitationObject/type`.
            public var _type: Components.Schemas.MessageContentTextAnnotationsFileCitationObject._typePayload
            /// The text in the message content that needs to be replaced.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFileCitationObject/text`.
            public var text: Swift.String
            /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFileCitationObject/file_citation`.
            public struct file_citationPayload: Codable, Hashable, Sendable {
                /// The ID of the specific File the citation is from.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFileCitationObject/file_citation/file_id`.
                public var file_id: Swift.String
                /// Creates a new `file_citationPayload`.
                ///
                /// - Parameters:
                ///   - file_id: The ID of the specific File the citation is from.
                public init(file_id: Swift.String) {
                    self.file_id = file_id
                }
                public enum CodingKeys: String, CodingKey {
                    case file_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFileCitationObject/file_citation`.
            public var file_citation: Components.Schemas.MessageContentTextAnnotationsFileCitationObject.file_citationPayload
            /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFileCitationObject/start_index`.
            public var start_index: Swift.Int
            /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFileCitationObject/end_index`.
            public var end_index: Swift.Int
            /// Creates a new `MessageContentTextAnnotationsFileCitationObject`.
            ///
            /// - Parameters:
            ///   - _type: Always `file_citation`.
            ///   - text: The text in the message content that needs to be replaced.
            ///   - file_citation:
            ///   - start_index:
            ///   - end_index:
            public init(
                _type: Components.Schemas.MessageContentTextAnnotationsFileCitationObject._typePayload,
                text: Swift.String,
                file_citation: Components.Schemas.MessageContentTextAnnotationsFileCitationObject.file_citationPayload,
                start_index: Swift.Int,
                end_index: Swift.Int
            ) {
                self._type = _type
                self.text = text
                self.file_citation = file_citation
                self.start_index = start_index
                self.end_index = end_index
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case text
                case file_citation
                case start_index
                case end_index
            }
        }
        /// A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
        ///
        /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFilePathObject`.
        public struct MessageContentTextAnnotationsFilePathObject: Codable, Hashable, Sendable {
            /// Always `file_path`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFilePathObject/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case file_path = "file_path"
            }
            /// Always `file_path`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFilePathObject/type`.
            public var _type: Components.Schemas.MessageContentTextAnnotationsFilePathObject._typePayload
            /// The text in the message content that needs to be replaced.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFilePathObject/text`.
            public var text: Swift.String
            /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFilePathObject/file_path`.
            public struct file_pathPayload: Codable, Hashable, Sendable {
                /// The ID of the file that was generated.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFilePathObject/file_path/file_id`.
                public var file_id: Swift.String
                /// Creates a new `file_pathPayload`.
                ///
                /// - Parameters:
                ///   - file_id: The ID of the file that was generated.
                public init(file_id: Swift.String) {
                    self.file_id = file_id
                }
                public enum CodingKeys: String, CodingKey {
                    case file_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFilePathObject/file_path`.
            public var file_path: Components.Schemas.MessageContentTextAnnotationsFilePathObject.file_pathPayload
            /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFilePathObject/start_index`.
            public var start_index: Swift.Int
            /// - Remark: Generated from `#/components/schemas/MessageContentTextAnnotationsFilePathObject/end_index`.
            public var end_index: Swift.Int
            /// Creates a new `MessageContentTextAnnotationsFilePathObject`.
            ///
            /// - Parameters:
            ///   - _type: Always `file_path`.
            ///   - text: The text in the message content that needs to be replaced.
            ///   - file_path:
            ///   - start_index:
            ///   - end_index:
            public init(
                _type: Components.Schemas.MessageContentTextAnnotationsFilePathObject._typePayload,
                text: Swift.String,
                file_path: Components.Schemas.MessageContentTextAnnotationsFilePathObject.file_pathPayload,
                start_index: Swift.Int,
                end_index: Swift.Int
            ) {
                self._type = _type
                self.text = text
                self.file_path = file_path
                self.start_index = start_index
                self.end_index = end_index
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case text
                case file_path
                case start_index
                case end_index
            }
        }
        /// The text content that is part of a message.
        ///
        /// - Remark: Generated from `#/components/schemas/MessageContentTextObject`.
        public struct MessageContentTextObject: Codable, Hashable, Sendable {
            /// Always `text`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageContentTextObject/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case text = "text"
            }
            /// Always `text`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageContentTextObject/type`.
            public var _type: Components.Schemas.MessageContentTextObject._typePayload
            /// - Remark: Generated from `#/components/schemas/MessageContentTextObject/text`.
            public struct textPayload: Codable, Hashable, Sendable {
                /// The data that makes up the text.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageContentTextObject/text/value`.
                public var value: Swift.String
                /// - Remark: Generated from `#/components/schemas/MessageContentTextObject/text/annotationsPayload`.
                @frozen public enum annotationsPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/MessageContentTextObject/text/annotationsPayload/case1`.
                    case MessageContentTextAnnotationsFileCitationObject(Components.Schemas.MessageContentTextAnnotationsFileCitationObject)
                    /// - Remark: Generated from `#/components/schemas/MessageContentTextObject/text/annotationsPayload/case2`.
                    case MessageContentTextAnnotationsFilePathObject(Components.Schemas.MessageContentTextAnnotationsFilePathObject)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .MessageContentTextAnnotationsFileCitationObject(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .MessageContentTextAnnotationsFilePathObject(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .MessageContentTextAnnotationsFileCitationObject(value):
                            try value.encode(to: encoder)
                        case let .MessageContentTextAnnotationsFilePathObject(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/MessageContentTextObject/text/annotations`.
                public typealias annotationsPayload = [Components.Schemas.MessageContentTextObject.textPayload.annotationsPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/MessageContentTextObject/text/annotations`.
                public var annotations: Components.Schemas.MessageContentTextObject.textPayload.annotationsPayload
                /// Creates a new `textPayload`.
                ///
                /// - Parameters:
                ///   - value: The data that makes up the text.
                ///   - annotations:
                public init(
                    value: Swift.String,
                    annotations: Components.Schemas.MessageContentTextObject.textPayload.annotationsPayload
                ) {
                    self.value = value
                    self.annotations = annotations
                }
                public enum CodingKeys: String, CodingKey {
                    case value
                    case annotations
                }
            }
            /// - Remark: Generated from `#/components/schemas/MessageContentTextObject/text`.
            public var text: Components.Schemas.MessageContentTextObject.textPayload
            /// Creates a new `MessageContentTextObject`.
            ///
            /// - Parameters:
            ///   - _type: Always `text`.
            ///   - text:
            public init(
                _type: Components.Schemas.MessageContentTextObject._typePayload,
                text: Components.Schemas.MessageContentTextObject.textPayload
            ) {
                self._type = _type
                self.text = text
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case text
            }
        }
        /// Represents a message within a [thread](/docs/api-reference/threads).
        ///
        /// - Remark: Generated from `#/components/schemas/MessageObject`.
        public struct MessageObject: Codable, Hashable, Sendable {
            /// The identifier, which can be referenced in API endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/id`.
            public var id: Swift.String
            /// The object type, which is always `thread.message`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case thread_period_message = "thread.message"
            }
            /// The object type, which is always `thread.message`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/object`.
            public var object: Components.Schemas.MessageObject.objectPayload
            /// The Unix timestamp (in seconds) for when the message was created.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/created_at`.
            public var created_at: Swift.Int
            /// The [thread](/docs/api-reference/threads) ID that this message belongs to.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/thread_id`.
            public var thread_id: Swift.String
            /// The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                case in_progress = "in_progress"
                case incomplete = "incomplete"
                case completed = "completed"
            }
            /// The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/status`.
            public var status: Components.Schemas.MessageObject.statusPayload
            /// On an incomplete message, details about why the message is incomplete.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/incomplete_details`.
            public struct incomplete_detailsPayload: Codable, Hashable, Sendable {
                /// The reason the message is incomplete.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageObject/incomplete_details/reason`.
                @frozen public enum reasonPayload: String, Codable, Hashable, Sendable {
                    case content_filter = "content_filter"
                    case max_tokens = "max_tokens"
                    case run_cancelled = "run_cancelled"
                    case run_expired = "run_expired"
                    case run_failed = "run_failed"
                }
                /// The reason the message is incomplete.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageObject/incomplete_details/reason`.
                public var reason: Components.Schemas.MessageObject.incomplete_detailsPayload.reasonPayload
                /// Creates a new `incomplete_detailsPayload`.
                ///
                /// - Parameters:
                ///   - reason: The reason the message is incomplete.
                public init(reason: Components.Schemas.MessageObject.incomplete_detailsPayload.reasonPayload) {
                    self.reason = reason
                }
                public enum CodingKeys: String, CodingKey {
                    case reason
                }
            }
            /// On an incomplete message, details about why the message is incomplete.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/incomplete_details`.
            public var incomplete_details: Components.Schemas.MessageObject.incomplete_detailsPayload?
            /// The Unix timestamp (in seconds) for when the message was completed.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/completed_at`.
            public var completed_at: Swift.Int?
            /// The Unix timestamp (in seconds) for when the message was marked as incomplete.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/incomplete_at`.
            public var incomplete_at: Swift.Int?
            /// The entity that produced the message. One of `user` or `assistant`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/role`.
            @frozen public enum rolePayload: String, Codable, Hashable, Sendable {
                case user = "user"
                case assistant = "assistant"
            }
            /// The entity that produced the message. One of `user` or `assistant`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/role`.
            public var role: Components.Schemas.MessageObject.rolePayload
            /// - Remark: Generated from `#/components/schemas/MessageObject/contentPayload`.
            @frozen public enum contentPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/MessageObject/contentPayload/case1`.
                case MessageContentImageFileObject(Components.Schemas.MessageContentImageFileObject)
                /// - Remark: Generated from `#/components/schemas/MessageObject/contentPayload/case2`.
                case MessageContentImageUrlObject(Components.Schemas.MessageContentImageUrlObject)
                /// - Remark: Generated from `#/components/schemas/MessageObject/contentPayload/case3`.
                case MessageContentTextObject(Components.Schemas.MessageContentTextObject)
                /// - Remark: Generated from `#/components/schemas/MessageObject/contentPayload/case4`.
                case MessageContentRefusalObject(Components.Schemas.MessageContentRefusalObject)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .MessageContentImageFileObject(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .MessageContentImageUrlObject(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .MessageContentTextObject(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .MessageContentRefusalObject(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .MessageContentImageFileObject(value):
                        try value.encode(to: encoder)
                    case let .MessageContentImageUrlObject(value):
                        try value.encode(to: encoder)
                    case let .MessageContentTextObject(value):
                        try value.encode(to: encoder)
                    case let .MessageContentRefusalObject(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// The content of the message in array of text and/or images.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/content`.
            public typealias contentPayload = [Components.Schemas.MessageObject.contentPayloadPayload]
            /// The content of the message in array of text and/or images.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/content`.
            public var content: Components.Schemas.MessageObject.contentPayload
            /// If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/assistant_id`.
            public var assistant_id: Swift.String?
            /// The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/run_id`.
            public var run_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MessageObject/attachmentsPayload`.
            public struct attachmentsPayloadPayload: Codable, Hashable, Sendable {
                /// The ID of the file to attach to the message.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageObject/attachmentsPayload/file_id`.
                public var file_id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/MessageObject/attachmentsPayload/toolsPayload`.
                @frozen public enum toolsPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/MessageObject/attachmentsPayload/toolsPayload/case1`.
                    case AssistantToolsCode(Components.Schemas.AssistantToolsCode)
                    /// - Remark: Generated from `#/components/schemas/MessageObject/attachmentsPayload/toolsPayload/case2`.
                    case AssistantToolsFileSearchTypeOnly(Components.Schemas.AssistantToolsFileSearchTypeOnly)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .AssistantToolsCode(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .AssistantToolsFileSearchTypeOnly(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .AssistantToolsCode(value):
                            try value.encode(to: encoder)
                        case let .AssistantToolsFileSearchTypeOnly(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// The tools to add this file to.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageObject/attachmentsPayload/tools`.
                public typealias toolsPayload = [Components.Schemas.MessageObject.attachmentsPayloadPayload.toolsPayloadPayload]
                /// The tools to add this file to.
                ///
                /// - Remark: Generated from `#/components/schemas/MessageObject/attachmentsPayload/tools`.
                public var tools: Components.Schemas.MessageObject.attachmentsPayloadPayload.toolsPayload?
                /// Creates a new `attachmentsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - file_id: The ID of the file to attach to the message.
                ///   - tools: The tools to add this file to.
                public init(
                    file_id: Swift.String? = nil,
                    tools: Components.Schemas.MessageObject.attachmentsPayloadPayload.toolsPayload? = nil
                ) {
                    self.file_id = file_id
                    self.tools = tools
                }
                public enum CodingKeys: String, CodingKey {
                    case file_id
                    case tools
                }
            }
            /// A list of files attached to the message, and the tools they were added to.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/attachments`.
            public typealias attachmentsPayload = [Components.Schemas.MessageObject.attachmentsPayloadPayload]
            /// A list of files attached to the message, and the tools they were added to.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageObject/attachments`.
            public var attachments: Components.Schemas.MessageObject.attachmentsPayload?
            /// - Remark: Generated from `#/components/schemas/MessageObject/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// Creates a new `MessageObject`.
            ///
            /// - Parameters:
            ///   - id: The identifier, which can be referenced in API endpoints.
            ///   - object: The object type, which is always `thread.message`.
            ///   - created_at: The Unix timestamp (in seconds) for when the message was created.
            ///   - thread_id: The [thread](/docs/api-reference/threads) ID that this message belongs to.
            ///   - status: The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
            ///   - incomplete_details: On an incomplete message, details about why the message is incomplete.
            ///   - completed_at: The Unix timestamp (in seconds) for when the message was completed.
            ///   - incomplete_at: The Unix timestamp (in seconds) for when the message was marked as incomplete.
            ///   - role: The entity that produced the message. One of `user` or `assistant`.
            ///   - content: The content of the message in array of text and/or images.
            ///   - assistant_id: If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.
            ///   - run_id: The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints.
            ///   - attachments: A list of files attached to the message, and the tools they were added to.
            ///   - metadata:
            public init(
                id: Swift.String,
                object: Components.Schemas.MessageObject.objectPayload,
                created_at: Swift.Int,
                thread_id: Swift.String,
                status: Components.Schemas.MessageObject.statusPayload,
                incomplete_details: Components.Schemas.MessageObject.incomplete_detailsPayload? = nil,
                completed_at: Swift.Int? = nil,
                incomplete_at: Swift.Int? = nil,
                role: Components.Schemas.MessageObject.rolePayload,
                content: Components.Schemas.MessageObject.contentPayload,
                assistant_id: Swift.String? = nil,
                run_id: Swift.String? = nil,
                attachments: Components.Schemas.MessageObject.attachmentsPayload? = nil,
                metadata: Components.Schemas.Metadata? = nil
            ) {
                self.id = id
                self.object = object
                self.created_at = created_at
                self.thread_id = thread_id
                self.status = status
                self.incomplete_details = incomplete_details
                self.completed_at = completed_at
                self.incomplete_at = incomplete_at
                self.role = role
                self.content = content
                self.assistant_id = assistant_id
                self.run_id = run_id
                self.attachments = attachments
                self.metadata = metadata
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case object
                case created_at
                case thread_id
                case status
                case incomplete_details
                case completed_at
                case incomplete_at
                case role
                case content
                case assistant_id
                case run_id
                case attachments
                case metadata
            }
        }
        /// The text content that is part of a message.
        ///
        /// - Remark: Generated from `#/components/schemas/MessageRequestContentTextObject`.
        public struct MessageRequestContentTextObject: Codable, Hashable, Sendable {
            /// Always `text`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageRequestContentTextObject/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case text = "text"
            }
            /// Always `text`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessageRequestContentTextObject/type`.
            public var _type: Components.Schemas.MessageRequestContentTextObject._typePayload
            /// Text content to be sent to the model
            ///
            /// - Remark: Generated from `#/components/schemas/MessageRequestContentTextObject/text`.
            public var text: Swift.String
            /// Creates a new `MessageRequestContentTextObject`.
            ///
            /// - Parameters:
            ///   - _type: Always `text`.
            ///   - text: Text content to be sent to the model
            public init(
                _type: Components.Schemas.MessageRequestContentTextObject._typePayload,
                text: Swift.String
            ) {
                self._type = _type
                self.text = text
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case text
            }
        }
        /// Set of 16 key-value pairs that can be attached to an object. This can be
        /// useful for storing additional information about the object in a structured
        /// format, and querying for objects via API or the dashboard. 
        ///
        /// Keys are strings with a maximum length of 64 characters. Values are strings
        /// with a maximum length of 512 characters.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/Metadata`.
        public struct Metadata: Codable, Hashable, Sendable {
            /// A container of undocumented properties.
            public var additionalProperties: [String: Swift.String]
            /// Creates a new `Metadata`.
            ///
            /// - Parameters:
            ///   - additionalProperties: A container of undocumented properties.
            public init(additionalProperties: [String: Swift.String] = .init()) {
                self.additionalProperties = additionalProperties
            }
            public init(from decoder: any Decoder) throws {
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
            }
            public func encode(to encoder: any Encoder) throws {
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// Describes an OpenAI model offering that can be used with the API.
        ///
        /// - Remark: Generated from `#/components/schemas/Model`.
        public struct Model: Codable, Hashable, Sendable {
            /// The model identifier, which can be referenced in the API endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/Model/id`.
            public var id: Swift.String
            /// The Unix timestamp (in seconds) when the model was created.
            ///
            /// - Remark: Generated from `#/components/schemas/Model/created`.
            public var created: Swift.Int
            /// The object type, which is always "model".
            ///
            /// - Remark: Generated from `#/components/schemas/Model/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case model = "model"
            }
            /// The object type, which is always "model".
            ///
            /// - Remark: Generated from `#/components/schemas/Model/object`.
            public var object: Components.Schemas.Model.objectPayload
            /// The organization that owns the model.
            ///
            /// - Remark: Generated from `#/components/schemas/Model/owned_by`.
            public var owned_by: Swift.String
            /// Creates a new `Model`.
            ///
            /// - Parameters:
            ///   - id: The model identifier, which can be referenced in the API endpoints.
            ///   - created: The Unix timestamp (in seconds) when the model was created.
            ///   - object: The object type, which is always "model".
            ///   - owned_by: The organization that owns the model.
            public init(
                id: Swift.String,
                created: Swift.Int,
                object: Components.Schemas.Model.objectPayload,
                owned_by: Swift.String
            ) {
                self.id = id
                self.created = created
                self.object = object
                self.owned_by = owned_by
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case created
                case object
                case owned_by
            }
        }
        /// - Remark: Generated from `#/components/schemas/ModelIdsShared`.
        public struct ModelIdsShared: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ModelIdsShared/value1`.
            public var value1: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ModelIdsShared/value2`.
            @frozen public enum Value2Payload: String, Codable, Hashable, Sendable {
                case gpt_hyphen_4_period_1 = "gpt-4.1"
                case gpt_hyphen_4_period_1_hyphen_mini = "gpt-4.1-mini"
                case gpt_hyphen_4_period_1_hyphen_nano = "gpt-4.1-nano"
                case gpt_hyphen_4_period_1_hyphen_2025_hyphen_04_hyphen_14 = "gpt-4.1-2025-04-14"
                case gpt_hyphen_4_period_1_hyphen_mini_hyphen_2025_hyphen_04_hyphen_14 = "gpt-4.1-mini-2025-04-14"
                case gpt_hyphen_4_period_1_hyphen_nano_hyphen_2025_hyphen_04_hyphen_14 = "gpt-4.1-nano-2025-04-14"
                case o4_hyphen_mini = "o4-mini"
                case o4_hyphen_mini_hyphen_2025_hyphen_04_hyphen_16 = "o4-mini-2025-04-16"
                case o3 = "o3"
                case o3_hyphen_2025_hyphen_04_hyphen_16 = "o3-2025-04-16"
                case o3_hyphen_mini = "o3-mini"
                case o3_hyphen_mini_hyphen_2025_hyphen_01_hyphen_31 = "o3-mini-2025-01-31"
                case o1 = "o1"
                case o1_hyphen_2024_hyphen_12_hyphen_17 = "o1-2024-12-17"
                case o1_hyphen_preview = "o1-preview"
                case o1_hyphen_preview_hyphen_2024_hyphen_09_hyphen_12 = "o1-preview-2024-09-12"
                case o1_hyphen_mini = "o1-mini"
                case o1_hyphen_mini_hyphen_2024_hyphen_09_hyphen_12 = "o1-mini-2024-09-12"
                case gpt_hyphen_4o = "gpt-4o"
                case gpt_hyphen_4o_hyphen_2024_hyphen_11_hyphen_20 = "gpt-4o-2024-11-20"
                case gpt_hyphen_4o_hyphen_2024_hyphen_08_hyphen_06 = "gpt-4o-2024-08-06"
                case gpt_hyphen_4o_hyphen_2024_hyphen_05_hyphen_13 = "gpt-4o-2024-05-13"
                case gpt_hyphen_4o_hyphen_audio_hyphen_preview = "gpt-4o-audio-preview"
                case gpt_hyphen_4o_hyphen_audio_hyphen_preview_hyphen_2024_hyphen_10_hyphen_01 = "gpt-4o-audio-preview-2024-10-01"
                case gpt_hyphen_4o_hyphen_audio_hyphen_preview_hyphen_2024_hyphen_12_hyphen_17 = "gpt-4o-audio-preview-2024-12-17"
                case gpt_hyphen_4o_hyphen_mini_hyphen_audio_hyphen_preview = "gpt-4o-mini-audio-preview"
                case gpt_hyphen_4o_hyphen_mini_hyphen_audio_hyphen_preview_hyphen_2024_hyphen_12_hyphen_17 = "gpt-4o-mini-audio-preview-2024-12-17"
                case gpt_hyphen_4o_hyphen_search_hyphen_preview = "gpt-4o-search-preview"
                case gpt_hyphen_4o_hyphen_mini_hyphen_search_hyphen_preview = "gpt-4o-mini-search-preview"
                case gpt_hyphen_4o_hyphen_search_hyphen_preview_hyphen_2025_hyphen_03_hyphen_11 = "gpt-4o-search-preview-2025-03-11"
                case gpt_hyphen_4o_hyphen_mini_hyphen_search_hyphen_preview_hyphen_2025_hyphen_03_hyphen_11 = "gpt-4o-mini-search-preview-2025-03-11"
                case chatgpt_hyphen_4o_hyphen_latest = "chatgpt-4o-latest"
                case gpt_hyphen_4o_hyphen_mini = "gpt-4o-mini"
                case gpt_hyphen_4o_hyphen_mini_hyphen_2024_hyphen_07_hyphen_18 = "gpt-4o-mini-2024-07-18"
                case gpt_hyphen_4_hyphen_turbo = "gpt-4-turbo"
                case gpt_hyphen_4_hyphen_turbo_hyphen_2024_hyphen_04_hyphen_09 = "gpt-4-turbo-2024-04-09"
                case gpt_hyphen_4_hyphen_0125_hyphen_preview = "gpt-4-0125-preview"
                case gpt_hyphen_4_hyphen_turbo_hyphen_preview = "gpt-4-turbo-preview"
                case gpt_hyphen_4_hyphen_1106_hyphen_preview = "gpt-4-1106-preview"
                case gpt_hyphen_4_hyphen_vision_hyphen_preview = "gpt-4-vision-preview"
                case gpt_hyphen_4 = "gpt-4"
                case gpt_hyphen_4_hyphen_0314 = "gpt-4-0314"
                case gpt_hyphen_4_hyphen_0613 = "gpt-4-0613"
                case gpt_hyphen_4_hyphen_32k = "gpt-4-32k"
                case gpt_hyphen_4_hyphen_32k_hyphen_0314 = "gpt-4-32k-0314"
                case gpt_hyphen_4_hyphen_32k_hyphen_0613 = "gpt-4-32k-0613"
                case gpt_hyphen_3_period_5_hyphen_turbo = "gpt-3.5-turbo"
                case gpt_hyphen_3_period_5_hyphen_turbo_hyphen_16k = "gpt-3.5-turbo-16k"
                case gpt_hyphen_3_period_5_hyphen_turbo_hyphen_0301 = "gpt-3.5-turbo-0301"
                case gpt_hyphen_3_period_5_hyphen_turbo_hyphen_0613 = "gpt-3.5-turbo-0613"
                case gpt_hyphen_3_period_5_hyphen_turbo_hyphen_1106 = "gpt-3.5-turbo-1106"
                case gpt_hyphen_3_period_5_hyphen_turbo_hyphen_0125 = "gpt-3.5-turbo-0125"
                case gpt_hyphen_3_period_5_hyphen_turbo_hyphen_16k_hyphen_0613 = "gpt-3.5-turbo-16k-0613"
            }
            /// - Remark: Generated from `#/components/schemas/ModelIdsShared/value2`.
            public var value2: Components.Schemas.ModelIdsShared.Value2Payload?
            /// Creates a new `ModelIdsShared`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Swift.String? = nil,
                value2: Components.Schemas.ModelIdsShared.Value2Payload? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    value1 = try decoder.decodeFromSingleValueContainer()
                } catch {
                    errors.append(error)
                }
                do {
                    value2 = try decoder.decodeFromSingleValueContainer()
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        value1,
                        value2
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                    value1,
                    value2
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/ModelResponseProperties`.
        public struct ModelResponseProperties: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ModelResponseProperties/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            /// We generally recommend altering this or `top_p` but not both.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ModelResponseProperties/temperature`.
            public var temperature: Swift.Double?
            /// An alternative to sampling with temperature, called nucleus sampling,
            /// where the model considers the results of the tokens with top_p probability
            /// mass. So 0.1 means only the tokens comprising the top 10% probability mass
            /// are considered.
            ///
            /// We generally recommend altering this or `temperature` but not both.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ModelResponseProperties/top_p`.
            public var top_p: Swift.Double?
            /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ModelResponseProperties/user`.
            public var user: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ModelResponseProperties/service_tier`.
            public var service_tier: Components.Schemas.ServiceTier?
            /// Creates a new `ModelResponseProperties`.
            ///
            /// - Parameters:
            ///   - metadata:
            ///   - temperature: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            ///   - top_p: An alternative to sampling with temperature, called nucleus sampling,
            ///   - user: A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
            ///   - service_tier:
            public init(
                metadata: Components.Schemas.Metadata? = nil,
                temperature: Swift.Double? = nil,
                top_p: Swift.Double? = nil,
                user: Swift.String? = nil,
                service_tier: Components.Schemas.ServiceTier? = nil
            ) {
                self.metadata = metadata
                self.temperature = temperature
                self.top_p = top_p
                self.user = user
                self.service_tier = service_tier
            }
            public enum CodingKeys: String, CodingKey {
                case metadata
                case temperature
                case top_p
                case user
                case service_tier
            }
        }
        /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest`.
        public struct ModifyAssistantRequest: Codable, Hashable, Sendable {
            /// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/model`.
            public struct modelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/model/value1`.
                public var value1: Swift.String?
                /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/model/value2`.
                public var value2: Components.Schemas.AssistantSupportedModels?
                /// Creates a new `modelPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Swift.String? = nil,
                    value2: Components.Schemas.AssistantSupportedModels? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            value1,
                            value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        value1,
                        value2
                    ])
                }
            }
            /// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/model`.
            public var model: Components.Schemas.ModifyAssistantRequest.modelPayload?
            /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/reasoning_effort`.
            public var reasoning_effort: Components.Schemas.ReasoningEffort?
            /// The name of the assistant. The maximum length is 256 characters.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/name`.
            public var name: Swift.String?
            /// The description of the assistant. The maximum length is 512 characters.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/description`.
            public var description: Swift.String?
            /// The system instructions that the assistant uses. The maximum length is 256,000 characters.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/instructions`.
            public var instructions: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/toolsPayload`.
            @frozen public enum toolsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/toolsPayload/case1`.
                case AssistantToolsCode(Components.Schemas.AssistantToolsCode)
                /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/toolsPayload/case2`.
                case AssistantToolsFileSearch(Components.Schemas.AssistantToolsFileSearch)
                /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/toolsPayload/case3`.
                case AssistantToolsFunction(Components.Schemas.AssistantToolsFunction)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .AssistantToolsCode(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .AssistantToolsFileSearch(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .AssistantToolsFunction(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .AssistantToolsCode(value):
                        try value.encode(to: encoder)
                    case let .AssistantToolsFileSearch(value):
                        try value.encode(to: encoder)
                    case let .AssistantToolsFunction(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/tools`.
            public typealias toolsPayload = [Components.Schemas.ModifyAssistantRequest.toolsPayloadPayload]
            /// A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/tools`.
            public var tools: Components.Schemas.ModifyAssistantRequest.toolsPayload?
            /// A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/tool_resources`.
            public struct tool_resourcesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/tool_resources/code_interpreter`.
                public struct code_interpreterPayload: Codable, Hashable, Sendable {
                    /// Overrides the list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/tool_resources/code_interpreter/file_ids`.
                    public var file_ids: [Swift.String]?
                    /// Creates a new `code_interpreterPayload`.
                    ///
                    /// - Parameters:
                    ///   - file_ids: Overrides the list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                    public init(file_ids: [Swift.String]? = nil) {
                        self.file_ids = file_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case file_ids
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/tool_resources/code_interpreter`.
                public var code_interpreter: Components.Schemas.ModifyAssistantRequest.tool_resourcesPayload.code_interpreterPayload?
                /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/tool_resources/file_search`.
                public struct file_searchPayload: Codable, Hashable, Sendable {
                    /// Overrides the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/tool_resources/file_search/vector_store_ids`.
                    public var vector_store_ids: [Swift.String]?
                    /// Creates a new `file_searchPayload`.
                    ///
                    /// - Parameters:
                    ///   - vector_store_ids: Overrides the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
                    public init(vector_store_ids: [Swift.String]? = nil) {
                        self.vector_store_ids = vector_store_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case vector_store_ids
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/tool_resources/file_search`.
                public var file_search: Components.Schemas.ModifyAssistantRequest.tool_resourcesPayload.file_searchPayload?
                /// Creates a new `tool_resourcesPayload`.
                ///
                /// - Parameters:
                ///   - code_interpreter:
                ///   - file_search:
                public init(
                    code_interpreter: Components.Schemas.ModifyAssistantRequest.tool_resourcesPayload.code_interpreterPayload? = nil,
                    file_search: Components.Schemas.ModifyAssistantRequest.tool_resourcesPayload.file_searchPayload? = nil
                ) {
                    self.code_interpreter = code_interpreter
                    self.file_search = file_search
                }
                public enum CodingKeys: String, CodingKey {
                    case code_interpreter
                    case file_search
                }
            }
            /// A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/tool_resources`.
            public var tool_resources: Components.Schemas.ModifyAssistantRequest.tool_resourcesPayload?
            /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/temperature`.
            public var temperature: Swift.Double?
            /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            ///
            /// We generally recommend altering this or temperature but not both.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/top_p`.
            public var top_p: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/ModifyAssistantRequest/response_format`.
            public var response_format: Components.Schemas.AssistantsApiResponseFormatOption?
            /// Creates a new `ModifyAssistantRequest`.
            ///
            /// - Parameters:
            ///   - model: ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
            ///   - reasoning_effort:
            ///   - name: The name of the assistant. The maximum length is 256 characters.
            ///   - description: The description of the assistant. The maximum length is 512 characters.
            ///   - instructions: The system instructions that the assistant uses. The maximum length is 256,000 characters.
            ///   - tools: A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
            ///   - tool_resources: A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///   - metadata:
            ///   - temperature: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            ///   - top_p: An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            ///   - response_format:
            public init(
                model: Components.Schemas.ModifyAssistantRequest.modelPayload? = nil,
                reasoning_effort: Components.Schemas.ReasoningEffort? = nil,
                name: Swift.String? = nil,
                description: Swift.String? = nil,
                instructions: Swift.String? = nil,
                tools: Components.Schemas.ModifyAssistantRequest.toolsPayload? = nil,
                tool_resources: Components.Schemas.ModifyAssistantRequest.tool_resourcesPayload? = nil,
                metadata: Components.Schemas.Metadata? = nil,
                temperature: Swift.Double? = nil,
                top_p: Swift.Double? = nil,
                response_format: Components.Schemas.AssistantsApiResponseFormatOption? = nil
            ) {
                self.model = model
                self.reasoning_effort = reasoning_effort
                self.name = name
                self.description = description
                self.instructions = instructions
                self.tools = tools
                self.tool_resources = tool_resources
                self.metadata = metadata
                self.temperature = temperature
                self.top_p = top_p
                self.response_format = response_format
            }
            public enum CodingKeys: String, CodingKey {
                case model
                case reasoning_effort
                case name
                case description
                case instructions
                case tools
                case tool_resources
                case metadata
                case temperature
                case top_p
                case response_format
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                model = try container.decodeIfPresent(
                    Components.Schemas.ModifyAssistantRequest.modelPayload.self,
                    forKey: .model
                )
                reasoning_effort = try container.decodeIfPresent(
                    Components.Schemas.ReasoningEffort.self,
                    forKey: .reasoning_effort
                )
                name = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .name
                )
                description = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .description
                )
                instructions = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .instructions
                )
                tools = try container.decodeIfPresent(
                    Components.Schemas.ModifyAssistantRequest.toolsPayload.self,
                    forKey: .tools
                )
                tool_resources = try container.decodeIfPresent(
                    Components.Schemas.ModifyAssistantRequest.tool_resourcesPayload.self,
                    forKey: .tool_resources
                )
                metadata = try container.decodeIfPresent(
                    Components.Schemas.Metadata.self,
                    forKey: .metadata
                )
                temperature = try container.decodeIfPresent(
                    Swift.Double.self,
                    forKey: .temperature
                )
                top_p = try container.decodeIfPresent(
                    Swift.Double.self,
                    forKey: .top_p
                )
                response_format = try container.decodeIfPresent(
                    Components.Schemas.AssistantsApiResponseFormatOption.self,
                    forKey: .response_format
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "model",
                    "reasoning_effort",
                    "name",
                    "description",
                    "instructions",
                    "tools",
                    "tool_resources",
                    "metadata",
                    "temperature",
                    "top_p",
                    "response_format"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/ModifyMessageRequest`.
        public struct ModifyMessageRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ModifyMessageRequest/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// Creates a new `ModifyMessageRequest`.
            ///
            /// - Parameters:
            ///   - metadata:
            public init(metadata: Components.Schemas.Metadata? = nil) {
                self.metadata = metadata
            }
            public enum CodingKeys: String, CodingKey {
                case metadata
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                metadata = try container.decodeIfPresent(
                    Components.Schemas.Metadata.self,
                    forKey: .metadata
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "metadata"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/ModifyRunRequest`.
        public struct ModifyRunRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ModifyRunRequest/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// Creates a new `ModifyRunRequest`.
            ///
            /// - Parameters:
            ///   - metadata:
            public init(metadata: Components.Schemas.Metadata? = nil) {
                self.metadata = metadata
            }
            public enum CodingKeys: String, CodingKey {
                case metadata
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                metadata = try container.decodeIfPresent(
                    Components.Schemas.Metadata.self,
                    forKey: .metadata
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "metadata"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/ModifyThreadRequest`.
        public struct ModifyThreadRequest: Codable, Hashable, Sendable {
            /// A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyThreadRequest/tool_resources`.
            public struct tool_resourcesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ModifyThreadRequest/tool_resources/code_interpreter`.
                public struct code_interpreterPayload: Codable, Hashable, Sendable {
                    /// A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/ModifyThreadRequest/tool_resources/code_interpreter/file_ids`.
                    public var file_ids: [Swift.String]?
                    /// Creates a new `code_interpreterPayload`.
                    ///
                    /// - Parameters:
                    ///   - file_ids: A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                    public init(file_ids: [Swift.String]? = nil) {
                        self.file_ids = file_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case file_ids
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ModifyThreadRequest/tool_resources/code_interpreter`.
                public var code_interpreter: Components.Schemas.ModifyThreadRequest.tool_resourcesPayload.code_interpreterPayload?
                /// - Remark: Generated from `#/components/schemas/ModifyThreadRequest/tool_resources/file_search`.
                public struct file_searchPayload: Codable, Hashable, Sendable {
                    /// The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/ModifyThreadRequest/tool_resources/file_search/vector_store_ids`.
                    public var vector_store_ids: [Swift.String]?
                    /// Creates a new `file_searchPayload`.
                    ///
                    /// - Parameters:
                    ///   - vector_store_ids: The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.
                    public init(vector_store_ids: [Swift.String]? = nil) {
                        self.vector_store_ids = vector_store_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case vector_store_ids
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ModifyThreadRequest/tool_resources/file_search`.
                public var file_search: Components.Schemas.ModifyThreadRequest.tool_resourcesPayload.file_searchPayload?
                /// Creates a new `tool_resourcesPayload`.
                ///
                /// - Parameters:
                ///   - code_interpreter:
                ///   - file_search:
                public init(
                    code_interpreter: Components.Schemas.ModifyThreadRequest.tool_resourcesPayload.code_interpreterPayload? = nil,
                    file_search: Components.Schemas.ModifyThreadRequest.tool_resourcesPayload.file_searchPayload? = nil
                ) {
                    self.code_interpreter = code_interpreter
                    self.file_search = file_search
                }
                public enum CodingKeys: String, CodingKey {
                    case code_interpreter
                    case file_search
                }
            }
            /// A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyThreadRequest/tool_resources`.
            public var tool_resources: Components.Schemas.ModifyThreadRequest.tool_resourcesPayload?
            /// - Remark: Generated from `#/components/schemas/ModifyThreadRequest/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// Creates a new `ModifyThreadRequest`.
            ///
            /// - Parameters:
            ///   - tool_resources: A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///   - metadata:
            public init(
                tool_resources: Components.Schemas.ModifyThreadRequest.tool_resourcesPayload? = nil,
                metadata: Components.Schemas.Metadata? = nil
            ) {
                self.tool_resources = tool_resources
                self.metadata = metadata
            }
            public enum CodingKeys: String, CodingKey {
                case tool_resources
                case metadata
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                tool_resources = try container.decodeIfPresent(
                    Components.Schemas.ModifyThreadRequest.tool_resourcesPayload.self,
                    forKey: .tool_resources
                )
                metadata = try container.decodeIfPresent(
                    Components.Schemas.Metadata.self,
                    forKey: .metadata
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "tool_resources",
                    "metadata"
                ])
            }
        }
        /// The `File` object represents a document that has been uploaded to OpenAI.
        ///
        /// - Remark: Generated from `#/components/schemas/OpenAIFile`.
        public struct OpenAIFile: Codable, Hashable, Sendable {
            /// The file identifier, which can be referenced in the API endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/OpenAIFile/id`.
            public var id: Swift.String
            /// The size of the file, in bytes.
            ///
            /// - Remark: Generated from `#/components/schemas/OpenAIFile/bytes`.
            public var bytes: Swift.Int
            /// The Unix timestamp (in seconds) for when the file was created.
            ///
            /// - Remark: Generated from `#/components/schemas/OpenAIFile/created_at`.
            public var created_at: Swift.Int
            /// The Unix timestamp (in seconds) for when the file will expire.
            ///
            /// - Remark: Generated from `#/components/schemas/OpenAIFile/expires_at`.
            public var expires_at: Swift.Int?
            /// The name of the file.
            ///
            /// - Remark: Generated from `#/components/schemas/OpenAIFile/filename`.
            public var filename: Swift.String
            /// The object type, which is always `file`.
            ///
            /// - Remark: Generated from `#/components/schemas/OpenAIFile/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case file = "file"
            }
            /// The object type, which is always `file`.
            ///
            /// - Remark: Generated from `#/components/schemas/OpenAIFile/object`.
            public var object: Components.Schemas.OpenAIFile.objectPayload
            /// The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results` and `vision`.
            ///
            /// - Remark: Generated from `#/components/schemas/OpenAIFile/purpose`.
            @frozen public enum purposePayload: String, Codable, Hashable, Sendable {
                case assistants = "assistants"
                case assistants_output = "assistants_output"
                case batch = "batch"
                case batch_output = "batch_output"
                case fine_hyphen_tune = "fine-tune"
                case fine_hyphen_tune_hyphen_results = "fine-tune-results"
                case vision = "vision"
            }
            /// The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results` and `vision`.
            ///
            /// - Remark: Generated from `#/components/schemas/OpenAIFile/purpose`.
            public var purpose: Components.Schemas.OpenAIFile.purposePayload
            /// Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
            ///
            /// - Remark: Generated from `#/components/schemas/OpenAIFile/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                case uploaded = "uploaded"
                case processed = "processed"
                case error = "error"
            }
            /// Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
            ///
            /// - Remark: Generated from `#/components/schemas/OpenAIFile/status`.
            @available(*, deprecated)
            public var status: Components.Schemas.OpenAIFile.statusPayload
            /// Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`.
            ///
            /// - Remark: Generated from `#/components/schemas/OpenAIFile/status_details`.
            @available(*, deprecated)
            public var status_details: Swift.String?
            /// Creates a new `OpenAIFile`.
            ///
            /// - Parameters:
            ///   - id: The file identifier, which can be referenced in the API endpoints.
            ///   - bytes: The size of the file, in bytes.
            ///   - created_at: The Unix timestamp (in seconds) for when the file was created.
            ///   - expires_at: The Unix timestamp (in seconds) for when the file will expire.
            ///   - filename: The name of the file.
            ///   - object: The object type, which is always `file`.
            ///   - purpose: The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results` and `vision`.
            ///   - status: Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
            ///   - status_details: Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`.
            public init(
                id: Swift.String,
                bytes: Swift.Int,
                created_at: Swift.Int,
                expires_at: Swift.Int? = nil,
                filename: Swift.String,
                object: Components.Schemas.OpenAIFile.objectPayload,
                purpose: Components.Schemas.OpenAIFile.purposePayload,
                status: Components.Schemas.OpenAIFile.statusPayload,
                status_details: Swift.String? = nil
            ) {
                self.id = id
                self.bytes = bytes
                self.created_at = created_at
                self.expires_at = expires_at
                self.filename = filename
                self.object = object
                self.purpose = purpose
                self.status = status
                self.status_details = status_details
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case bytes
                case created_at
                case expires_at
                case filename
                case object
                case purpose
                case status
                case status_details
            }
        }
        /// Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.
        ///
        /// - Remark: Generated from `#/components/schemas/ParallelToolCalls`.
        public typealias ParallelToolCalls = Swift.Bool
        /// Static predicted output content, such as the content of a text file that is
        /// being regenerated.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/PredictionContent`.
        public struct PredictionContent: Codable, Hashable, Sendable {
            /// The type of the predicted content you want to provide. This type is
            /// currently always `content`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/PredictionContent/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case content = "content"
            }
            /// The type of the predicted content you want to provide. This type is
            /// currently always `content`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/PredictionContent/type`.
            public var _type: Components.Schemas.PredictionContent._typePayload
            /// The content that should be matched when generating a model response.
            /// If generated tokens would match this content, the entire model response
            /// can be returned much more quickly.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/PredictionContent/content`.
            @frozen public enum contentPayload: Codable, Hashable, Sendable {
                /// The content used for a Predicted Output. This is often the
                /// text of a file you are regenerating with minor changes.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/PredictionContent/content/case1`.
                case case1(Swift.String)
                /// An array of content parts with a defined type. Supported options differ based on the [model](/docs/models) being used to generate the response. Can contain text inputs.
                ///
                /// - Remark: Generated from `#/components/schemas/PredictionContent/content/case2`.
                case case2([Components.Schemas.ChatCompletionRequestMessageContentPartText])
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// The content that should be matched when generating a model response.
            /// If generated tokens would match this content, the entire model response
            /// can be returned much more quickly.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/PredictionContent/content`.
            public var content: Components.Schemas.PredictionContent.contentPayload
            /// Creates a new `PredictionContent`.
            ///
            /// - Parameters:
            ///   - _type: The type of the predicted content you want to provide. This type is
            ///   - content: The content that should be matched when generating a model response.
            public init(
                _type: Components.Schemas.PredictionContent._typePayload,
                content: Components.Schemas.PredictionContent.contentPayload
            ) {
                self._type = _type
                self.content = content
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case content
            }
        }
        /// **o-series models only** 
        ///
        /// Constrains effort on reasoning for 
        /// [reasoning models](https://platform.openai.com/docs/guides/reasoning).
        /// Currently supported values are `low`, `medium`, and `high`. Reducing
        /// reasoning effort can result in faster responses and fewer tokens used
        /// on reasoning in a response.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ReasoningEffort`.
        @frozen public enum ReasoningEffort: String, Codable, Hashable, Sendable {
            case low = "low"
            case medium = "medium"
            case high = "high"
        }
        /// JSON object response format. An older method of generating JSON responses.
        /// Using `json_schema` is recommended for models that support it. Note that the
        /// model will not generate JSON without a system or user message instructing it
        /// to do so.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonObject`.
        public struct ResponseFormatJsonObject: Codable, Hashable, Sendable {
            /// The type of response format being defined. Always `json_object`.
            ///
            /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonObject/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case json_object = "json_object"
            }
            /// The type of response format being defined. Always `json_object`.
            ///
            /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonObject/type`.
            public var _type: Components.Schemas.ResponseFormatJsonObject._typePayload
            /// Creates a new `ResponseFormatJsonObject`.
            ///
            /// - Parameters:
            ///   - _type: The type of response format being defined. Always `json_object`.
            public init(_type: Components.Schemas.ResponseFormatJsonObject._typePayload) {
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
        }
        /// JSON Schema response format. Used to generate structured JSON responses.
        /// Learn more about [Structured Outputs](/docs/guides/structured-outputs).
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonSchema`.
        public struct ResponseFormatJsonSchema: Codable, Hashable, Sendable {
            /// The type of response format being defined. Always `json_schema`.
            ///
            /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonSchema/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case json_schema = "json_schema"
            }
            /// The type of response format being defined. Always `json_schema`.
            ///
            /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonSchema/type`.
            public var _type: Components.Schemas.ResponseFormatJsonSchema._typePayload
            /// Structured Outputs configuration options, including a JSON Schema.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonSchema/json_schema`.
            public struct json_schemaPayload: Codable, Hashable, Sendable {
                /// A description of what the response format is for, used by the model to
                /// determine how to respond in the format.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonSchema/json_schema/description`.
                public var description: Swift.String?
                /// The name of the response format. Must be a-z, A-Z, 0-9, or contain
                /// underscores and dashes, with a maximum length of 64.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonSchema/json_schema/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonSchema/json_schema/schema`.
                public var schema: Components.Schemas.ResponseFormatJsonSchemaSchema?
                /// Whether to enable strict schema adherence when generating the output.
                /// If set to true, the model will always follow the exact schema defined
                /// in the `schema` field. Only a subset of JSON Schema is supported when
                /// `strict` is `true`. To learn more, read the [Structured Outputs
                /// guide](/docs/guides/structured-outputs).
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonSchema/json_schema/strict`.
                public var strict: Swift.Bool?
                /// Creates a new `json_schemaPayload`.
                ///
                /// - Parameters:
                ///   - description: A description of what the response format is for, used by the model to
                ///   - name: The name of the response format. Must be a-z, A-Z, 0-9, or contain
                ///   - schema:
                ///   - strict: Whether to enable strict schema adherence when generating the output.
                public init(
                    description: Swift.String? = nil,
                    name: Swift.String,
                    schema: Components.Schemas.ResponseFormatJsonSchemaSchema? = nil,
                    strict: Swift.Bool? = nil
                ) {
                    self.description = description
                    self.name = name
                    self.schema = schema
                    self.strict = strict
                }
                public enum CodingKeys: String, CodingKey {
                    case description
                    case name
                    case schema
                    case strict
                }
            }
            /// Structured Outputs configuration options, including a JSON Schema.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonSchema/json_schema`.
            public var json_schema: Components.Schemas.ResponseFormatJsonSchema.json_schemaPayload
            /// Creates a new `ResponseFormatJsonSchema`.
            ///
            /// - Parameters:
            ///   - _type: The type of response format being defined. Always `json_schema`.
            ///   - json_schema: Structured Outputs configuration options, including a JSON Schema.
            public init(
                _type: Components.Schemas.ResponseFormatJsonSchema._typePayload,
                json_schema: Components.Schemas.ResponseFormatJsonSchema.json_schemaPayload
            ) {
                self._type = _type
                self.json_schema = json_schema
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case json_schema
            }
        }
        /// The schema for the response format, described as a JSON Schema object.
        /// Learn how to build JSON schemas [here](https://json-schema.org/).
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonSchemaSchema`.
        public struct ResponseFormatJsonSchemaSchema: Codable, Hashable, Sendable {
            /// A container of undocumented properties.
            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `ResponseFormatJsonSchemaSchema`.
            ///
            /// - Parameters:
            ///   - additionalProperties: A container of undocumented properties.
            public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                self.additionalProperties = additionalProperties
            }
            public init(from decoder: any Decoder) throws {
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
            }
            public func encode(to encoder: any Encoder) throws {
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// Default response format. Used to generate text responses.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ResponseFormatText`.
        public struct ResponseFormatText: Codable, Hashable, Sendable {
            /// The type of response format being defined. Always `text`.
            ///
            /// - Remark: Generated from `#/components/schemas/ResponseFormatText/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case text = "text"
            }
            /// The type of response format being defined. Always `text`.
            ///
            /// - Remark: Generated from `#/components/schemas/ResponseFormatText/type`.
            public var _type: Components.Schemas.ResponseFormatText._typePayload
            /// Creates a new `ResponseFormatText`.
            ///
            /// - Parameters:
            ///   - _type: The type of response format being defined. Always `text`.
            public init(_type: Components.Schemas.ResponseFormatText._typePayload) {
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ResponseModalities`.
        @frozen public enum ResponseModalitiesPayload: String, Codable, Hashable, Sendable {
            case text = "text"
            case audio = "audio"
        }
        /// Output types that you would like the model to generate.
        /// Most models are capable of generating text, which is the default:
        ///
        /// `["text"]`
        ///
        /// The `gpt-4o-audio-preview` model can also be used to 
        /// [generate audio](/docs/guides/audio). To request that this model generate 
        /// both text and audio responses, you can use:
        ///
        /// `["text", "audio"]`
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ResponseModalities`.
        public typealias ResponseModalities = [Components.Schemas.ResponseModalitiesPayload]
        /// Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).
        ///
        /// - Remark: Generated from `#/components/schemas/RunCompletionUsage`.
        public struct RunCompletionUsage: Codable, Hashable, Sendable {
            /// Number of completion tokens used over the course of the run.
            ///
            /// - Remark: Generated from `#/components/schemas/RunCompletionUsage/completion_tokens`.
            public var completion_tokens: Swift.Int
            /// Number of prompt tokens used over the course of the run.
            ///
            /// - Remark: Generated from `#/components/schemas/RunCompletionUsage/prompt_tokens`.
            public var prompt_tokens: Swift.Int
            /// Total number of tokens used (prompt + completion).
            ///
            /// - Remark: Generated from `#/components/schemas/RunCompletionUsage/total_tokens`.
            public var total_tokens: Swift.Int
            /// Creates a new `RunCompletionUsage`.
            ///
            /// - Parameters:
            ///   - completion_tokens: Number of completion tokens used over the course of the run.
            ///   - prompt_tokens: Number of prompt tokens used over the course of the run.
            ///   - total_tokens: Total number of tokens used (prompt + completion).
            public init(
                completion_tokens: Swift.Int,
                prompt_tokens: Swift.Int,
                total_tokens: Swift.Int
            ) {
                self.completion_tokens = completion_tokens
                self.prompt_tokens = prompt_tokens
                self.total_tokens = total_tokens
            }
            public enum CodingKeys: String, CodingKey {
                case completion_tokens
                case prompt_tokens
                case total_tokens
            }
        }
        /// Represents an execution run on a [thread](/docs/api-reference/threads).
        ///
        /// - Remark: Generated from `#/components/schemas/RunObject`.
        public struct RunObject: Codable, Hashable, Sendable {
            /// The identifier, which can be referenced in API endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/id`.
            public var id: Swift.String
            /// The object type, which is always `thread.run`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case thread_period_run = "thread.run"
            }
            /// The object type, which is always `thread.run`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/object`.
            public var object: Components.Schemas.RunObject.objectPayload
            /// The Unix timestamp (in seconds) for when the run was created.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/created_at`.
            public var created_at: Swift.Int
            /// The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/thread_id`.
            public var thread_id: Swift.String
            /// The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/assistant_id`.
            public var assistant_id: Swift.String
            /// The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                case queued = "queued"
                case in_progress = "in_progress"
                case requires_action = "requires_action"
                case cancelling = "cancelling"
                case cancelled = "cancelled"
                case failed = "failed"
                case completed = "completed"
                case incomplete = "incomplete"
                case expired = "expired"
            }
            /// The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/status`.
            public var status: Components.Schemas.RunObject.statusPayload
            /// Details on the action required to continue the run. Will be `null` if no action is required.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/required_action`.
            public struct required_actionPayload: Codable, Hashable, Sendable {
                /// For now, this is always `submit_tool_outputs`.
                ///
                /// - Remark: Generated from `#/components/schemas/RunObject/required_action/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                    case submit_tool_outputs = "submit_tool_outputs"
                }
                /// For now, this is always `submit_tool_outputs`.
                ///
                /// - Remark: Generated from `#/components/schemas/RunObject/required_action/type`.
                public var _type: Components.Schemas.RunObject.required_actionPayload._typePayload
                /// Details on the tool outputs needed for this run to continue.
                ///
                /// - Remark: Generated from `#/components/schemas/RunObject/required_action/submit_tool_outputs`.
                public struct submit_tool_outputsPayload: Codable, Hashable, Sendable {
                    /// A list of the relevant tool calls.
                    ///
                    /// - Remark: Generated from `#/components/schemas/RunObject/required_action/submit_tool_outputs/tool_calls`.
                    public var tool_calls: [Components.Schemas.RunToolCallObject]
                    /// Creates a new `submit_tool_outputsPayload`.
                    ///
                    /// - Parameters:
                    ///   - tool_calls: A list of the relevant tool calls.
                    public init(tool_calls: [Components.Schemas.RunToolCallObject]) {
                        self.tool_calls = tool_calls
                    }
                    public enum CodingKeys: String, CodingKey {
                        case tool_calls
                    }
                }
                /// Details on the tool outputs needed for this run to continue.
                ///
                /// - Remark: Generated from `#/components/schemas/RunObject/required_action/submit_tool_outputs`.
                public var submit_tool_outputs: Components.Schemas.RunObject.required_actionPayload.submit_tool_outputsPayload
                /// Creates a new `required_actionPayload`.
                ///
                /// - Parameters:
                ///   - _type: For now, this is always `submit_tool_outputs`.
                ///   - submit_tool_outputs: Details on the tool outputs needed for this run to continue.
                public init(
                    _type: Components.Schemas.RunObject.required_actionPayload._typePayload,
                    submit_tool_outputs: Components.Schemas.RunObject.required_actionPayload.submit_tool_outputsPayload
                ) {
                    self._type = _type
                    self.submit_tool_outputs = submit_tool_outputs
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case submit_tool_outputs
                }
            }
            /// Details on the action required to continue the run. Will be `null` if no action is required.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/required_action`.
            public var required_action: Components.Schemas.RunObject.required_actionPayload?
            /// The last error associated with this run. Will be `null` if there are no errors.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/last_error`.
            public struct last_errorPayload: Codable, Hashable, Sendable {
                /// One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.
                ///
                /// - Remark: Generated from `#/components/schemas/RunObject/last_error/code`.
                @frozen public enum codePayload: String, Codable, Hashable, Sendable {
                    case server_error = "server_error"
                    case rate_limit_exceeded = "rate_limit_exceeded"
                    case invalid_prompt = "invalid_prompt"
                }
                /// One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.
                ///
                /// - Remark: Generated from `#/components/schemas/RunObject/last_error/code`.
                public var code: Components.Schemas.RunObject.last_errorPayload.codePayload
                /// A human-readable description of the error.
                ///
                /// - Remark: Generated from `#/components/schemas/RunObject/last_error/message`.
                public var message: Swift.String
                /// Creates a new `last_errorPayload`.
                ///
                /// - Parameters:
                ///   - code: One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.
                ///   - message: A human-readable description of the error.
                public init(
                    code: Components.Schemas.RunObject.last_errorPayload.codePayload,
                    message: Swift.String
                ) {
                    self.code = code
                    self.message = message
                }
                public enum CodingKeys: String, CodingKey {
                    case code
                    case message
                }
            }
            /// The last error associated with this run. Will be `null` if there are no errors.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/last_error`.
            public var last_error: Components.Schemas.RunObject.last_errorPayload?
            /// The Unix timestamp (in seconds) for when the run will expire.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/expires_at`.
            public var expires_at: Swift.Int?
            /// The Unix timestamp (in seconds) for when the run was started.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/started_at`.
            public var started_at: Swift.Int?
            /// The Unix timestamp (in seconds) for when the run was cancelled.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/cancelled_at`.
            public var cancelled_at: Swift.Int?
            /// The Unix timestamp (in seconds) for when the run failed.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/failed_at`.
            public var failed_at: Swift.Int?
            /// The Unix timestamp (in seconds) for when the run was completed.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/completed_at`.
            public var completed_at: Swift.Int?
            /// Details on why the run is incomplete. Will be `null` if the run is not incomplete.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/incomplete_details`.
            public struct incomplete_detailsPayload: Codable, Hashable, Sendable {
                /// The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.
                ///
                /// - Remark: Generated from `#/components/schemas/RunObject/incomplete_details/reason`.
                @frozen public enum reasonPayload: String, Codable, Hashable, Sendable {
                    case max_completion_tokens = "max_completion_tokens"
                    case max_prompt_tokens = "max_prompt_tokens"
                }
                /// The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.
                ///
                /// - Remark: Generated from `#/components/schemas/RunObject/incomplete_details/reason`.
                public var reason: Components.Schemas.RunObject.incomplete_detailsPayload.reasonPayload?
                /// Creates a new `incomplete_detailsPayload`.
                ///
                /// - Parameters:
                ///   - reason: The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.
                public init(reason: Components.Schemas.RunObject.incomplete_detailsPayload.reasonPayload? = nil) {
                    self.reason = reason
                }
                public enum CodingKeys: String, CodingKey {
                    case reason
                }
            }
            /// Details on why the run is incomplete. Will be `null` if the run is not incomplete.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/incomplete_details`.
            public var incomplete_details: Components.Schemas.RunObject.incomplete_detailsPayload?
            /// The model that the [assistant](/docs/api-reference/assistants) used for this run.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/model`.
            public var model: Swift.String
            /// The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/instructions`.
            public var instructions: Swift.String
            /// - Remark: Generated from `#/components/schemas/RunObject/toolsPayload`.
            @frozen public enum toolsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunObject/toolsPayload/case1`.
                case AssistantToolsCode(Components.Schemas.AssistantToolsCode)
                /// - Remark: Generated from `#/components/schemas/RunObject/toolsPayload/case2`.
                case AssistantToolsFileSearch(Components.Schemas.AssistantToolsFileSearch)
                /// - Remark: Generated from `#/components/schemas/RunObject/toolsPayload/case3`.
                case AssistantToolsFunction(Components.Schemas.AssistantToolsFunction)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .AssistantToolsCode(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .AssistantToolsFileSearch(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .AssistantToolsFunction(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .AssistantToolsCode(value):
                        try value.encode(to: encoder)
                    case let .AssistantToolsFileSearch(value):
                        try value.encode(to: encoder)
                    case let .AssistantToolsFunction(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/tools`.
            public typealias toolsPayload = [Components.Schemas.RunObject.toolsPayloadPayload]
            /// The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/tools`.
            public var tools: Components.Schemas.RunObject.toolsPayload
            /// - Remark: Generated from `#/components/schemas/RunObject/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// - Remark: Generated from `#/components/schemas/RunObject/usage`.
            public var usage: Components.Schemas.RunCompletionUsage?
            /// The sampling temperature used for this run. If not set, defaults to 1.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/temperature`.
            public var temperature: Swift.Double?
            /// The nucleus sampling value used for this run. If not set, defaults to 1.
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/top_p`.
            public var top_p: Swift.Double?
            /// The maximum number of prompt tokens specified to have been used over the course of the run.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/max_prompt_tokens`.
            public var max_prompt_tokens: Swift.Int?
            /// The maximum number of completion tokens specified to have been used over the course of the run.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RunObject/max_completion_tokens`.
            public var max_completion_tokens: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/RunObject/truncation_strategy`.
            public struct truncation_strategyPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunObject/truncation_strategy/value1`.
                public var value1: Components.Schemas.TruncationObject
                /// - Remark: Generated from `#/components/schemas/RunObject/truncation_strategy/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer
                /// Creates a new `truncation_strategyPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.TruncationObject,
                    value2: OpenAPIRuntime.OpenAPIValueContainer
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RunObject/truncation_strategy`.
            public var truncation_strategy: Components.Schemas.RunObject.truncation_strategyPayload?
            /// - Remark: Generated from `#/components/schemas/RunObject/tool_choice`.
            public struct tool_choicePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunObject/tool_choice/value1`.
                public var value1: Components.Schemas.AssistantsApiToolChoiceOption
                /// - Remark: Generated from `#/components/schemas/RunObject/tool_choice/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer
                /// Creates a new `tool_choicePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.AssistantsApiToolChoiceOption,
                    value2: OpenAPIRuntime.OpenAPIValueContainer
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RunObject/tool_choice`.
            public var tool_choice: Components.Schemas.RunObject.tool_choicePayload?
            /// - Remark: Generated from `#/components/schemas/RunObject/parallel_tool_calls`.
            public var parallel_tool_calls: Components.Schemas.ParallelToolCalls
            /// - Remark: Generated from `#/components/schemas/RunObject/response_format`.
            public var response_format: Components.Schemas.AssistantsApiResponseFormatOption
            /// Creates a new `RunObject`.
            ///
            /// - Parameters:
            ///   - id: The identifier, which can be referenced in API endpoints.
            ///   - object: The object type, which is always `thread.run`.
            ///   - created_at: The Unix timestamp (in seconds) for when the run was created.
            ///   - thread_id: The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
            ///   - assistant_id: The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
            ///   - status: The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.
            ///   - required_action: Details on the action required to continue the run. Will be `null` if no action is required.
            ///   - last_error: The last error associated with this run. Will be `null` if there are no errors.
            ///   - expires_at: The Unix timestamp (in seconds) for when the run will expire.
            ///   - started_at: The Unix timestamp (in seconds) for when the run was started.
            ///   - cancelled_at: The Unix timestamp (in seconds) for when the run was cancelled.
            ///   - failed_at: The Unix timestamp (in seconds) for when the run failed.
            ///   - completed_at: The Unix timestamp (in seconds) for when the run was completed.
            ///   - incomplete_details: Details on why the run is incomplete. Will be `null` if the run is not incomplete.
            ///   - model: The model that the [assistant](/docs/api-reference/assistants) used for this run.
            ///   - instructions: The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
            ///   - tools: The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
            ///   - metadata:
            ///   - usage:
            ///   - temperature: The sampling temperature used for this run. If not set, defaults to 1.
            ///   - top_p: The nucleus sampling value used for this run. If not set, defaults to 1.
            ///   - max_prompt_tokens: The maximum number of prompt tokens specified to have been used over the course of the run.
            ///   - max_completion_tokens: The maximum number of completion tokens specified to have been used over the course of the run.
            ///   - truncation_strategy:
            ///   - tool_choice:
            ///   - parallel_tool_calls:
            ///   - response_format:
            public init(
                id: Swift.String,
                object: Components.Schemas.RunObject.objectPayload,
                created_at: Swift.Int,
                thread_id: Swift.String,
                assistant_id: Swift.String,
                status: Components.Schemas.RunObject.statusPayload,
                required_action: Components.Schemas.RunObject.required_actionPayload? = nil,
                last_error: Components.Schemas.RunObject.last_errorPayload? = nil,
                expires_at: Swift.Int? = nil,
                started_at: Swift.Int? = nil,
                cancelled_at: Swift.Int? = nil,
                failed_at: Swift.Int? = nil,
                completed_at: Swift.Int? = nil,
                incomplete_details: Components.Schemas.RunObject.incomplete_detailsPayload? = nil,
                model: Swift.String,
                instructions: Swift.String,
                tools: Components.Schemas.RunObject.toolsPayload,
                metadata: Components.Schemas.Metadata? = nil,
                usage: Components.Schemas.RunCompletionUsage? = nil,
                temperature: Swift.Double? = nil,
                top_p: Swift.Double? = nil,
                max_prompt_tokens: Swift.Int? = nil,
                max_completion_tokens: Swift.Int? = nil,
                truncation_strategy: Components.Schemas.RunObject.truncation_strategyPayload? = nil,
                tool_choice: Components.Schemas.RunObject.tool_choicePayload? = nil,
                parallel_tool_calls: Components.Schemas.ParallelToolCalls,
                response_format: Components.Schemas.AssistantsApiResponseFormatOption
            ) {
                self.id = id
                self.object = object
                self.created_at = created_at
                self.thread_id = thread_id
                self.assistant_id = assistant_id
                self.status = status
                self.required_action = required_action
                self.last_error = last_error
                self.expires_at = expires_at
                self.started_at = started_at
                self.cancelled_at = cancelled_at
                self.failed_at = failed_at
                self.completed_at = completed_at
                self.incomplete_details = incomplete_details
                self.model = model
                self.instructions = instructions
                self.tools = tools
                self.metadata = metadata
                self.usage = usage
                self.temperature = temperature
                self.top_p = top_p
                self.max_prompt_tokens = max_prompt_tokens
                self.max_completion_tokens = max_completion_tokens
                self.truncation_strategy = truncation_strategy
                self.tool_choice = tool_choice
                self.parallel_tool_calls = parallel_tool_calls
                self.response_format = response_format
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case object
                case created_at
                case thread_id
                case assistant_id
                case status
                case required_action
                case last_error
                case expires_at
                case started_at
                case cancelled_at
                case failed_at
                case completed_at
                case incomplete_details
                case model
                case instructions
                case tools
                case metadata
                case usage
                case temperature
                case top_p
                case max_prompt_tokens
                case max_completion_tokens
                case truncation_strategy
                case tool_choice
                case parallel_tool_calls
                case response_format
            }
        }
        /// Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`.
        ///
        /// - Remark: Generated from `#/components/schemas/RunStepCompletionUsage`.
        public struct RunStepCompletionUsage: Codable, Hashable, Sendable {
            /// Number of completion tokens used over the course of the run step.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepCompletionUsage/completion_tokens`.
            public var completion_tokens: Swift.Int
            /// Number of prompt tokens used over the course of the run step.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepCompletionUsage/prompt_tokens`.
            public var prompt_tokens: Swift.Int
            /// Total number of tokens used (prompt + completion).
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepCompletionUsage/total_tokens`.
            public var total_tokens: Swift.Int
            /// Creates a new `RunStepCompletionUsage`.
            ///
            /// - Parameters:
            ///   - completion_tokens: Number of completion tokens used over the course of the run step.
            ///   - prompt_tokens: Number of prompt tokens used over the course of the run step.
            ///   - total_tokens: Total number of tokens used (prompt + completion).
            public init(
                completion_tokens: Swift.Int,
                prompt_tokens: Swift.Int,
                total_tokens: Swift.Int
            ) {
                self.completion_tokens = completion_tokens
                self.prompt_tokens = prompt_tokens
                self.total_tokens = total_tokens
            }
            public enum CodingKeys: String, CodingKey {
                case completion_tokens
                case prompt_tokens
                case total_tokens
            }
        }
        /// Details of the message creation by the run step.
        ///
        /// - Remark: Generated from `#/components/schemas/RunStepDetailsMessageCreationObject`.
        public struct RunStepDetailsMessageCreationObject: Codable, Hashable, Sendable {
            /// Always `message_creation`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsMessageCreationObject/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case message_creation = "message_creation"
            }
            /// Always `message_creation`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsMessageCreationObject/type`.
            public var _type: Components.Schemas.RunStepDetailsMessageCreationObject._typePayload
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsMessageCreationObject/message_creation`.
            public struct message_creationPayload: Codable, Hashable, Sendable {
                /// The ID of the message that was created by this run step.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsMessageCreationObject/message_creation/message_id`.
                public var message_id: Swift.String
                /// Creates a new `message_creationPayload`.
                ///
                /// - Parameters:
                ///   - message_id: The ID of the message that was created by this run step.
                public init(message_id: Swift.String) {
                    self.message_id = message_id
                }
                public enum CodingKeys: String, CodingKey {
                    case message_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsMessageCreationObject/message_creation`.
            public var message_creation: Components.Schemas.RunStepDetailsMessageCreationObject.message_creationPayload
            /// Creates a new `RunStepDetailsMessageCreationObject`.
            ///
            /// - Parameters:
            ///   - _type: Always `message_creation`.
            ///   - message_creation:
            public init(
                _type: Components.Schemas.RunStepDetailsMessageCreationObject._typePayload,
                message_creation: Components.Schemas.RunStepDetailsMessageCreationObject.message_creationPayload
            ) {
                self._type = _type
                self.message_creation = message_creation
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case message_creation
            }
        }
        /// Details of the Code Interpreter tool call the run step was involved in.
        ///
        /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeObject`.
        public struct RunStepDetailsToolCallsCodeObject: Codable, Hashable, Sendable {
            /// The ID of the tool call.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeObject/id`.
            public var id: Swift.String
            /// The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeObject/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case code_interpreter = "code_interpreter"
            }
            /// The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeObject/type`.
            public var _type: Components.Schemas.RunStepDetailsToolCallsCodeObject._typePayload
            /// The Code Interpreter tool call definition.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeObject/code_interpreter`.
            public struct code_interpreterPayload: Codable, Hashable, Sendable {
                /// The input to the Code Interpreter tool call.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeObject/code_interpreter/input`.
                public var input: Swift.String
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeObject/code_interpreter/outputsPayload`.
                @frozen public enum outputsPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeObject/code_interpreter/outputsPayload/case1`.
                    case RunStepDetailsToolCallsCodeOutputLogsObject(Components.Schemas.RunStepDetailsToolCallsCodeOutputLogsObject)
                    /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeObject/code_interpreter/outputsPayload/case2`.
                    case RunStepDetailsToolCallsCodeOutputImageObject(Components.Schemas.RunStepDetailsToolCallsCodeOutputImageObject)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .RunStepDetailsToolCallsCodeOutputLogsObject(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .RunStepDetailsToolCallsCodeOutputImageObject(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .RunStepDetailsToolCallsCodeOutputLogsObject(value):
                            try value.encode(to: encoder)
                        case let .RunStepDetailsToolCallsCodeOutputImageObject(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeObject/code_interpreter/outputs`.
                public typealias outputsPayload = [Components.Schemas.RunStepDetailsToolCallsCodeObject.code_interpreterPayload.outputsPayloadPayload]
                /// The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeObject/code_interpreter/outputs`.
                public var outputs: Components.Schemas.RunStepDetailsToolCallsCodeObject.code_interpreterPayload.outputsPayload
                /// Creates a new `code_interpreterPayload`.
                ///
                /// - Parameters:
                ///   - input: The input to the Code Interpreter tool call.
                ///   - outputs: The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
                public init(
                    input: Swift.String,
                    outputs: Components.Schemas.RunStepDetailsToolCallsCodeObject.code_interpreterPayload.outputsPayload
                ) {
                    self.input = input
                    self.outputs = outputs
                }
                public enum CodingKeys: String, CodingKey {
                    case input
                    case outputs
                }
            }
            /// The Code Interpreter tool call definition.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeObject/code_interpreter`.
            public var code_interpreter: Components.Schemas.RunStepDetailsToolCallsCodeObject.code_interpreterPayload
            /// Creates a new `RunStepDetailsToolCallsCodeObject`.
            ///
            /// - Parameters:
            ///   - id: The ID of the tool call.
            ///   - _type: The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
            ///   - code_interpreter: The Code Interpreter tool call definition.
            public init(
                id: Swift.String,
                _type: Components.Schemas.RunStepDetailsToolCallsCodeObject._typePayload,
                code_interpreter: Components.Schemas.RunStepDetailsToolCallsCodeObject.code_interpreterPayload
            ) {
                self.id = id
                self._type = _type
                self.code_interpreter = code_interpreter
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case _type = "type"
                case code_interpreter
            }
        }
        /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeOutputImageObject`.
        public struct RunStepDetailsToolCallsCodeOutputImageObject: Codable, Hashable, Sendable {
            /// Always `image`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeOutputImageObject/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case image = "image"
            }
            /// Always `image`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeOutputImageObject/type`.
            public var _type: Components.Schemas.RunStepDetailsToolCallsCodeOutputImageObject._typePayload
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeOutputImageObject/image`.
            public struct imagePayload: Codable, Hashable, Sendable {
                /// The [file](/docs/api-reference/files) ID of the image.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeOutputImageObject/image/file_id`.
                public var file_id: Swift.String
                /// Creates a new `imagePayload`.
                ///
                /// - Parameters:
                ///   - file_id: The [file](/docs/api-reference/files) ID of the image.
                public init(file_id: Swift.String) {
                    self.file_id = file_id
                }
                public enum CodingKeys: String, CodingKey {
                    case file_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeOutputImageObject/image`.
            public var image: Components.Schemas.RunStepDetailsToolCallsCodeOutputImageObject.imagePayload
            /// Creates a new `RunStepDetailsToolCallsCodeOutputImageObject`.
            ///
            /// - Parameters:
            ///   - _type: Always `image`.
            ///   - image:
            public init(
                _type: Components.Schemas.RunStepDetailsToolCallsCodeOutputImageObject._typePayload,
                image: Components.Schemas.RunStepDetailsToolCallsCodeOutputImageObject.imagePayload
            ) {
                self._type = _type
                self.image = image
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case image
            }
        }
        /// Text output from the Code Interpreter tool call as part of a run step.
        ///
        /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeOutputLogsObject`.
        public struct RunStepDetailsToolCallsCodeOutputLogsObject: Codable, Hashable, Sendable {
            /// Always `logs`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeOutputLogsObject/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case logs = "logs"
            }
            /// Always `logs`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeOutputLogsObject/type`.
            public var _type: Components.Schemas.RunStepDetailsToolCallsCodeOutputLogsObject._typePayload
            /// The text output from the Code Interpreter tool call.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsCodeOutputLogsObject/logs`.
            public var logs: Swift.String
            /// Creates a new `RunStepDetailsToolCallsCodeOutputLogsObject`.
            ///
            /// - Parameters:
            ///   - _type: Always `logs`.
            ///   - logs: The text output from the Code Interpreter tool call.
            public init(
                _type: Components.Schemas.RunStepDetailsToolCallsCodeOutputLogsObject._typePayload,
                logs: Swift.String
            ) {
                self._type = _type
                self.logs = logs
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case logs
            }
        }
        /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchObject`.
        public struct RunStepDetailsToolCallsFileSearchObject: Codable, Hashable, Sendable {
            /// The ID of the tool call object.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchObject/id`.
            public var id: Swift.String
            /// The type of tool call. This is always going to be `file_search` for this type of tool call.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchObject/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case file_search = "file_search"
            }
            /// The type of tool call. This is always going to be `file_search` for this type of tool call.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchObject/type`.
            public var _type: Components.Schemas.RunStepDetailsToolCallsFileSearchObject._typePayload
            /// For now, this is always going to be an empty object.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchObject/file_search`.
            public struct file_searchPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchObject/file_search/ranking_options`.
                public var ranking_options: Components.Schemas.RunStepDetailsToolCallsFileSearchRankingOptionsObject?
                /// The results of the file search.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchObject/file_search/results`.
                public var results: [Components.Schemas.RunStepDetailsToolCallsFileSearchResultObject]?
                /// Creates a new `file_searchPayload`.
                ///
                /// - Parameters:
                ///   - ranking_options:
                ///   - results: The results of the file search.
                public init(
                    ranking_options: Components.Schemas.RunStepDetailsToolCallsFileSearchRankingOptionsObject? = nil,
                    results: [Components.Schemas.RunStepDetailsToolCallsFileSearchResultObject]? = nil
                ) {
                    self.ranking_options = ranking_options
                    self.results = results
                }
                public enum CodingKeys: String, CodingKey {
                    case ranking_options
                    case results
                }
            }
            /// For now, this is always going to be an empty object.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchObject/file_search`.
            public var file_search: Components.Schemas.RunStepDetailsToolCallsFileSearchObject.file_searchPayload
            /// Creates a new `RunStepDetailsToolCallsFileSearchObject`.
            ///
            /// - Parameters:
            ///   - id: The ID of the tool call object.
            ///   - _type: The type of tool call. This is always going to be `file_search` for this type of tool call.
            ///   - file_search: For now, this is always going to be an empty object.
            public init(
                id: Swift.String,
                _type: Components.Schemas.RunStepDetailsToolCallsFileSearchObject._typePayload,
                file_search: Components.Schemas.RunStepDetailsToolCallsFileSearchObject.file_searchPayload
            ) {
                self.id = id
                self._type = _type
                self.file_search = file_search
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case _type = "type"
                case file_search
            }
        }
        /// The ranking options for the file search.
        ///
        /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchRankingOptionsObject`.
        public struct RunStepDetailsToolCallsFileSearchRankingOptionsObject: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchRankingOptionsObject/ranker`.
            public var ranker: Components.Schemas.FileSearchRanker
            /// The score threshold for the file search. All values must be a floating point number between 0 and 1.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchRankingOptionsObject/score_threshold`.
            public var score_threshold: Swift.Double
            /// Creates a new `RunStepDetailsToolCallsFileSearchRankingOptionsObject`.
            ///
            /// - Parameters:
            ///   - ranker:
            ///   - score_threshold: The score threshold for the file search. All values must be a floating point number between 0 and 1.
            public init(
                ranker: Components.Schemas.FileSearchRanker,
                score_threshold: Swift.Double
            ) {
                self.ranker = ranker
                self.score_threshold = score_threshold
            }
            public enum CodingKeys: String, CodingKey {
                case ranker
                case score_threshold
            }
        }
        /// A result instance of the file search.
        ///
        /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchResultObject`.
        public struct RunStepDetailsToolCallsFileSearchResultObject: Codable, Hashable, Sendable {
            /// The ID of the file that result was found in.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchResultObject/file_id`.
            public var file_id: Swift.String
            /// The name of the file that result was found in.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchResultObject/file_name`.
            public var file_name: Swift.String
            /// The score of the result. All values must be a floating point number between 0 and 1.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchResultObject/score`.
            public var score: Swift.Double
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchResultObject/contentPayload`.
            public struct contentPayloadPayload: Codable, Hashable, Sendable {
                /// The type of the content.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchResultObject/contentPayload/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                    case text = "text"
                }
                /// The type of the content.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchResultObject/contentPayload/type`.
                public var _type: Components.Schemas.RunStepDetailsToolCallsFileSearchResultObject.contentPayloadPayload._typePayload?
                /// The text content of the file.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchResultObject/contentPayload/text`.
                public var text: Swift.String?
                /// Creates a new `contentPayloadPayload`.
                ///
                /// - Parameters:
                ///   - _type: The type of the content.
                ///   - text: The text content of the file.
                public init(
                    _type: Components.Schemas.RunStepDetailsToolCallsFileSearchResultObject.contentPayloadPayload._typePayload? = nil,
                    text: Swift.String? = nil
                ) {
                    self._type = _type
                    self.text = text
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case text
                }
            }
            /// The content of the result that was found. The content is only included if requested via the include query parameter.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchResultObject/content`.
            public typealias contentPayload = [Components.Schemas.RunStepDetailsToolCallsFileSearchResultObject.contentPayloadPayload]
            /// The content of the result that was found. The content is only included if requested via the include query parameter.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFileSearchResultObject/content`.
            public var content: Components.Schemas.RunStepDetailsToolCallsFileSearchResultObject.contentPayload?
            /// Creates a new `RunStepDetailsToolCallsFileSearchResultObject`.
            ///
            /// - Parameters:
            ///   - file_id: The ID of the file that result was found in.
            ///   - file_name: The name of the file that result was found in.
            ///   - score: The score of the result. All values must be a floating point number between 0 and 1.
            ///   - content: The content of the result that was found. The content is only included if requested via the include query parameter.
            public init(
                file_id: Swift.String,
                file_name: Swift.String,
                score: Swift.Double,
                content: Components.Schemas.RunStepDetailsToolCallsFileSearchResultObject.contentPayload? = nil
            ) {
                self.file_id = file_id
                self.file_name = file_name
                self.score = score
                self.content = content
            }
            public enum CodingKeys: String, CodingKey {
                case file_id
                case file_name
                case score
                case content
            }
        }
        /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFunctionObject`.
        public struct RunStepDetailsToolCallsFunctionObject: Codable, Hashable, Sendable {
            /// The ID of the tool call object.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFunctionObject/id`.
            public var id: Swift.String
            /// The type of tool call. This is always going to be `function` for this type of tool call.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFunctionObject/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case function = "function"
            }
            /// The type of tool call. This is always going to be `function` for this type of tool call.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFunctionObject/type`.
            public var _type: Components.Schemas.RunStepDetailsToolCallsFunctionObject._typePayload
            /// The definition of the function that was called.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFunctionObject/function`.
            public struct functionPayload: Codable, Hashable, Sendable {
                /// The name of the function.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFunctionObject/function/name`.
                public var name: Swift.String
                /// The arguments passed to the function.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFunctionObject/function/arguments`.
                public var arguments: Swift.String
                /// The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFunctionObject/function/output`.
                public var output: Swift.String?
                /// Creates a new `functionPayload`.
                ///
                /// - Parameters:
                ///   - name: The name of the function.
                ///   - arguments: The arguments passed to the function.
                ///   - output: The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.
                public init(
                    name: Swift.String,
                    arguments: Swift.String,
                    output: Swift.String? = nil
                ) {
                    self.name = name
                    self.arguments = arguments
                    self.output = output
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case arguments
                    case output
                }
            }
            /// The definition of the function that was called.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsFunctionObject/function`.
            public var function: Components.Schemas.RunStepDetailsToolCallsFunctionObject.functionPayload
            /// Creates a new `RunStepDetailsToolCallsFunctionObject`.
            ///
            /// - Parameters:
            ///   - id: The ID of the tool call object.
            ///   - _type: The type of tool call. This is always going to be `function` for this type of tool call.
            ///   - function: The definition of the function that was called.
            public init(
                id: Swift.String,
                _type: Components.Schemas.RunStepDetailsToolCallsFunctionObject._typePayload,
                function: Components.Schemas.RunStepDetailsToolCallsFunctionObject.functionPayload
            ) {
                self.id = id
                self._type = _type
                self.function = function
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case _type = "type"
                case function
            }
        }
        /// Details of the tool call.
        ///
        /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsObject`.
        public struct RunStepDetailsToolCallsObject: Codable, Hashable, Sendable {
            /// Always `tool_calls`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsObject/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case tool_calls = "tool_calls"
            }
            /// Always `tool_calls`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsObject/type`.
            public var _type: Components.Schemas.RunStepDetailsToolCallsObject._typePayload
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsObject/tool_callsPayload`.
            @frozen public enum tool_callsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsObject/tool_callsPayload/case1`.
                case RunStepDetailsToolCallsCodeObject(Components.Schemas.RunStepDetailsToolCallsCodeObject)
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsObject/tool_callsPayload/case2`.
                case RunStepDetailsToolCallsFileSearchObject(Components.Schemas.RunStepDetailsToolCallsFileSearchObject)
                /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsObject/tool_callsPayload/case3`.
                case RunStepDetailsToolCallsFunctionObject(Components.Schemas.RunStepDetailsToolCallsFunctionObject)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .RunStepDetailsToolCallsCodeObject(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .RunStepDetailsToolCallsFileSearchObject(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .RunStepDetailsToolCallsFunctionObject(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .RunStepDetailsToolCallsCodeObject(value):
                        try value.encode(to: encoder)
                    case let .RunStepDetailsToolCallsFileSearchObject(value):
                        try value.encode(to: encoder)
                    case let .RunStepDetailsToolCallsFunctionObject(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsObject/tool_calls`.
            public typealias tool_callsPayload = [Components.Schemas.RunStepDetailsToolCallsObject.tool_callsPayloadPayload]
            /// An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepDetailsToolCallsObject/tool_calls`.
            public var tool_calls: Components.Schemas.RunStepDetailsToolCallsObject.tool_callsPayload
            /// Creates a new `RunStepDetailsToolCallsObject`.
            ///
            /// - Parameters:
            ///   - _type: Always `tool_calls`.
            ///   - tool_calls: An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.
            public init(
                _type: Components.Schemas.RunStepDetailsToolCallsObject._typePayload,
                tool_calls: Components.Schemas.RunStepDetailsToolCallsObject.tool_callsPayload
            ) {
                self._type = _type
                self.tool_calls = tool_calls
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case tool_calls
            }
        }
        /// Represents a step in execution of a run.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/RunStepObject`.
        public struct RunStepObject: Codable, Hashable, Sendable {
            /// The identifier of the run step, which can be referenced in API endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/id`.
            public var id: Swift.String
            /// The object type, which is always `thread.run.step`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case thread_period_run_period_step = "thread.run.step"
            }
            /// The object type, which is always `thread.run.step`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/object`.
            public var object: Components.Schemas.RunStepObject.objectPayload
            /// The Unix timestamp (in seconds) for when the run step was created.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/created_at`.
            public var created_at: Swift.Int
            /// The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/assistant_id`.
            public var assistant_id: Swift.String
            /// The ID of the [thread](/docs/api-reference/threads) that was run.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/thread_id`.
            public var thread_id: Swift.String
            /// The ID of the [run](/docs/api-reference/runs) that this run step is a part of.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/run_id`.
            public var run_id: Swift.String
            /// The type of run step, which can be either `message_creation` or `tool_calls`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case message_creation = "message_creation"
                case tool_calls = "tool_calls"
            }
            /// The type of run step, which can be either `message_creation` or `tool_calls`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/type`.
            public var _type: Components.Schemas.RunStepObject._typePayload
            /// The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                case in_progress = "in_progress"
                case cancelled = "cancelled"
                case failed = "failed"
                case completed = "completed"
                case expired = "expired"
            }
            /// The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/status`.
            public var status: Components.Schemas.RunStepObject.statusPayload
            /// The details of the run step.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/step_details`.
            @frozen public enum step_detailsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RunStepObject/step_details/case1`.
                case RunStepDetailsMessageCreationObject(Components.Schemas.RunStepDetailsMessageCreationObject)
                /// - Remark: Generated from `#/components/schemas/RunStepObject/step_details/case2`.
                case RunStepDetailsToolCallsObject(Components.Schemas.RunStepDetailsToolCallsObject)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .RunStepDetailsMessageCreationObject(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .RunStepDetailsToolCallsObject(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .RunStepDetailsMessageCreationObject(value):
                        try value.encode(to: encoder)
                    case let .RunStepDetailsToolCallsObject(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// The details of the run step.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/step_details`.
            public var step_details: Components.Schemas.RunStepObject.step_detailsPayload
            /// The last error associated with this run step. Will be `null` if there are no errors.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/last_error`.
            public struct last_errorPayload: Codable, Hashable, Sendable {
                /// One of `server_error` or `rate_limit_exceeded`.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepObject/last_error/code`.
                @frozen public enum codePayload: String, Codable, Hashable, Sendable {
                    case server_error = "server_error"
                    case rate_limit_exceeded = "rate_limit_exceeded"
                }
                /// One of `server_error` or `rate_limit_exceeded`.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepObject/last_error/code`.
                public var code: Components.Schemas.RunStepObject.last_errorPayload.codePayload
                /// A human-readable description of the error.
                ///
                /// - Remark: Generated from `#/components/schemas/RunStepObject/last_error/message`.
                public var message: Swift.String
                /// Creates a new `last_errorPayload`.
                ///
                /// - Parameters:
                ///   - code: One of `server_error` or `rate_limit_exceeded`.
                ///   - message: A human-readable description of the error.
                public init(
                    code: Components.Schemas.RunStepObject.last_errorPayload.codePayload,
                    message: Swift.String
                ) {
                    self.code = code
                    self.message = message
                }
                public enum CodingKeys: String, CodingKey {
                    case code
                    case message
                }
            }
            /// The last error associated with this run step. Will be `null` if there are no errors.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/last_error`.
            public var last_error: Components.Schemas.RunStepObject.last_errorPayload?
            /// The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/expired_at`.
            public var expired_at: Swift.Int?
            /// The Unix timestamp (in seconds) for when the run step was cancelled.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/cancelled_at`.
            public var cancelled_at: Swift.Int?
            /// The Unix timestamp (in seconds) for when the run step failed.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/failed_at`.
            public var failed_at: Swift.Int?
            /// The Unix timestamp (in seconds) for when the run step completed.
            ///
            /// - Remark: Generated from `#/components/schemas/RunStepObject/completed_at`.
            public var completed_at: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/RunStepObject/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// - Remark: Generated from `#/components/schemas/RunStepObject/usage`.
            public var usage: Components.Schemas.RunStepCompletionUsage?
            /// Creates a new `RunStepObject`.
            ///
            /// - Parameters:
            ///   - id: The identifier of the run step, which can be referenced in API endpoints.
            ///   - object: The object type, which is always `thread.run.step`.
            ///   - created_at: The Unix timestamp (in seconds) for when the run step was created.
            ///   - assistant_id: The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.
            ///   - thread_id: The ID of the [thread](/docs/api-reference/threads) that was run.
            ///   - run_id: The ID of the [run](/docs/api-reference/runs) that this run step is a part of.
            ///   - _type: The type of run step, which can be either `message_creation` or `tool_calls`.
            ///   - status: The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
            ///   - step_details: The details of the run step.
            ///   - last_error: The last error associated with this run step. Will be `null` if there are no errors.
            ///   - expired_at: The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.
            ///   - cancelled_at: The Unix timestamp (in seconds) for when the run step was cancelled.
            ///   - failed_at: The Unix timestamp (in seconds) for when the run step failed.
            ///   - completed_at: The Unix timestamp (in seconds) for when the run step completed.
            ///   - metadata:
            ///   - usage:
            public init(
                id: Swift.String,
                object: Components.Schemas.RunStepObject.objectPayload,
                created_at: Swift.Int,
                assistant_id: Swift.String,
                thread_id: Swift.String,
                run_id: Swift.String,
                _type: Components.Schemas.RunStepObject._typePayload,
                status: Components.Schemas.RunStepObject.statusPayload,
                step_details: Components.Schemas.RunStepObject.step_detailsPayload,
                last_error: Components.Schemas.RunStepObject.last_errorPayload? = nil,
                expired_at: Swift.Int? = nil,
                cancelled_at: Swift.Int? = nil,
                failed_at: Swift.Int? = nil,
                completed_at: Swift.Int? = nil,
                metadata: Components.Schemas.Metadata? = nil,
                usage: Components.Schemas.RunStepCompletionUsage? = nil
            ) {
                self.id = id
                self.object = object
                self.created_at = created_at
                self.assistant_id = assistant_id
                self.thread_id = thread_id
                self.run_id = run_id
                self._type = _type
                self.status = status
                self.step_details = step_details
                self.last_error = last_error
                self.expired_at = expired_at
                self.cancelled_at = cancelled_at
                self.failed_at = failed_at
                self.completed_at = completed_at
                self.metadata = metadata
                self.usage = usage
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case object
                case created_at
                case assistant_id
                case thread_id
                case run_id
                case _type = "type"
                case status
                case step_details
                case last_error
                case expired_at
                case cancelled_at
                case failed_at
                case completed_at
                case metadata
                case usage
            }
        }
        /// Tool call objects
        ///
        /// - Remark: Generated from `#/components/schemas/RunToolCallObject`.
        public struct RunToolCallObject: Codable, Hashable, Sendable {
            /// The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint.
            ///
            /// - Remark: Generated from `#/components/schemas/RunToolCallObject/id`.
            public var id: Swift.String
            /// The type of tool call the output is required for. For now, this is always `function`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunToolCallObject/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case function = "function"
            }
            /// The type of tool call the output is required for. For now, this is always `function`.
            ///
            /// - Remark: Generated from `#/components/schemas/RunToolCallObject/type`.
            public var _type: Components.Schemas.RunToolCallObject._typePayload
            /// The function definition.
            ///
            /// - Remark: Generated from `#/components/schemas/RunToolCallObject/function`.
            public struct functionPayload: Codable, Hashable, Sendable {
                /// The name of the function.
                ///
                /// - Remark: Generated from `#/components/schemas/RunToolCallObject/function/name`.
                public var name: Swift.String
                /// The arguments that the model expects you to pass to the function.
                ///
                /// - Remark: Generated from `#/components/schemas/RunToolCallObject/function/arguments`.
                public var arguments: Swift.String
                /// Creates a new `functionPayload`.
                ///
                /// - Parameters:
                ///   - name: The name of the function.
                ///   - arguments: The arguments that the model expects you to pass to the function.
                public init(
                    name: Swift.String,
                    arguments: Swift.String
                ) {
                    self.name = name
                    self.arguments = arguments
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case arguments
                }
            }
            /// The function definition.
            ///
            /// - Remark: Generated from `#/components/schemas/RunToolCallObject/function`.
            public var function: Components.Schemas.RunToolCallObject.functionPayload
            /// Creates a new `RunToolCallObject`.
            ///
            /// - Parameters:
            ///   - id: The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint.
            ///   - _type: The type of tool call the output is required for. For now, this is always `function`.
            ///   - function: The function definition.
            public init(
                id: Swift.String,
                _type: Components.Schemas.RunToolCallObject._typePayload,
                function: Components.Schemas.RunToolCallObject.functionPayload
            ) {
                self.id = id
                self._type = _type
                self.function = function
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case _type = "type"
                case function
            }
        }
        /// Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:
        ///   - If set to 'auto', and the Project is Scale tier enabled, the system
        ///     will utilize scale tier credits until they are exhausted.
        ///   - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
        ///   - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
        ///   - If set to 'flex', the request will be processed with the Flex Processing service tier. [Learn more](/docs/guides/flex-processing).
        ///   - When not set, the default behavior is 'auto'.
        ///
        ///   When this parameter is set, the response body will include the `service_tier` utilized.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ServiceTier`.
        @frozen public enum ServiceTier: String, Codable, Hashable, Sendable {
            case auto = "auto"
            case _default = "default"
            case flex = "flex"
        }
        /// Not supported with latest reasoning models `o3` and `o4-mini`.
        ///
        /// Up to 4 sequences where the API will stop generating further tokens. The
        /// returned text will not contain the stop sequence.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/StopConfiguration`.
        @frozen public enum StopConfiguration: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/StopConfiguration/case1`.
            case case1(Swift.String?)
            /// - Remark: Generated from `#/components/schemas/StopConfiguration/case2`.
            case case2([Swift.String])
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try encoder.encodeToSingleValueContainer(value)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/SubmitToolOutputsRunRequest`.
        public struct SubmitToolOutputsRunRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SubmitToolOutputsRunRequest/tool_outputsPayload`.
            public struct tool_outputsPayloadPayload: Codable, Hashable, Sendable {
                /// The ID of the tool call in the `required_action` object within the run object the output is being submitted for.
                ///
                /// - Remark: Generated from `#/components/schemas/SubmitToolOutputsRunRequest/tool_outputsPayload/tool_call_id`.
                public var tool_call_id: Swift.String?
                /// The output of the tool call to be submitted to continue the run.
                ///
                /// - Remark: Generated from `#/components/schemas/SubmitToolOutputsRunRequest/tool_outputsPayload/output`.
                public var output: Swift.String?
                /// Creates a new `tool_outputsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - tool_call_id: The ID of the tool call in the `required_action` object within the run object the output is being submitted for.
                ///   - output: The output of the tool call to be submitted to continue the run.
                public init(
                    tool_call_id: Swift.String? = nil,
                    output: Swift.String? = nil
                ) {
                    self.tool_call_id = tool_call_id
                    self.output = output
                }
                public enum CodingKeys: String, CodingKey {
                    case tool_call_id
                    case output
                }
            }
            /// A list of tools for which the outputs are being submitted.
            ///
            /// - Remark: Generated from `#/components/schemas/SubmitToolOutputsRunRequest/tool_outputs`.
            public typealias tool_outputsPayload = [Components.Schemas.SubmitToolOutputsRunRequest.tool_outputsPayloadPayload]
            /// A list of tools for which the outputs are being submitted.
            ///
            /// - Remark: Generated from `#/components/schemas/SubmitToolOutputsRunRequest/tool_outputs`.
            public var tool_outputs: Components.Schemas.SubmitToolOutputsRunRequest.tool_outputsPayload
            /// If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/SubmitToolOutputsRunRequest/stream`.
            public var stream: Swift.Bool?
            /// Creates a new `SubmitToolOutputsRunRequest`.
            ///
            /// - Parameters:
            ///   - tool_outputs: A list of tools for which the outputs are being submitted.
            ///   - stream: If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
            public init(
                tool_outputs: Components.Schemas.SubmitToolOutputsRunRequest.tool_outputsPayload,
                stream: Swift.Bool? = nil
            ) {
                self.tool_outputs = tool_outputs
                self.stream = stream
            }
            public enum CodingKeys: String, CodingKey {
                case tool_outputs
                case stream
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                tool_outputs = try container.decode(
                    Components.Schemas.SubmitToolOutputsRunRequest.tool_outputsPayload.self,
                    forKey: .tool_outputs
                )
                stream = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .stream
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "tool_outputs",
                    "stream"
                ])
            }
        }
        /// Represents a thread that contains [messages](/docs/api-reference/messages).
        ///
        /// - Remark: Generated from `#/components/schemas/ThreadObject`.
        public struct ThreadObject: Codable, Hashable, Sendable {
            /// The identifier, which can be referenced in API endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/ThreadObject/id`.
            public var id: Swift.String
            /// The object type, which is always `thread`.
            ///
            /// - Remark: Generated from `#/components/schemas/ThreadObject/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case thread = "thread"
            }
            /// The object type, which is always `thread`.
            ///
            /// - Remark: Generated from `#/components/schemas/ThreadObject/object`.
            public var object: Components.Schemas.ThreadObject.objectPayload
            /// The Unix timestamp (in seconds) for when the thread was created.
            ///
            /// - Remark: Generated from `#/components/schemas/ThreadObject/created_at`.
            public var created_at: Swift.Int
            /// A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ThreadObject/tool_resources`.
            public struct tool_resourcesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ThreadObject/tool_resources/code_interpreter`.
                public struct code_interpreterPayload: Codable, Hashable, Sendable {
                    /// A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/ThreadObject/tool_resources/code_interpreter/file_ids`.
                    public var file_ids: [Swift.String]?
                    /// Creates a new `code_interpreterPayload`.
                    ///
                    /// - Parameters:
                    ///   - file_ids: A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                    public init(file_ids: [Swift.String]? = nil) {
                        self.file_ids = file_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case file_ids
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ThreadObject/tool_resources/code_interpreter`.
                public var code_interpreter: Components.Schemas.ThreadObject.tool_resourcesPayload.code_interpreterPayload?
                /// - Remark: Generated from `#/components/schemas/ThreadObject/tool_resources/file_search`.
                public struct file_searchPayload: Codable, Hashable, Sendable {
                    /// The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.
                    ///
                    ///
                    /// - Remark: Generated from `#/components/schemas/ThreadObject/tool_resources/file_search/vector_store_ids`.
                    public var vector_store_ids: [Swift.String]?
                    /// Creates a new `file_searchPayload`.
                    ///
                    /// - Parameters:
                    ///   - vector_store_ids: The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.
                    public init(vector_store_ids: [Swift.String]? = nil) {
                        self.vector_store_ids = vector_store_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case vector_store_ids
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ThreadObject/tool_resources/file_search`.
                public var file_search: Components.Schemas.ThreadObject.tool_resourcesPayload.file_searchPayload?
                /// Creates a new `tool_resourcesPayload`.
                ///
                /// - Parameters:
                ///   - code_interpreter:
                ///   - file_search:
                public init(
                    code_interpreter: Components.Schemas.ThreadObject.tool_resourcesPayload.code_interpreterPayload? = nil,
                    file_search: Components.Schemas.ThreadObject.tool_resourcesPayload.file_searchPayload? = nil
                ) {
                    self.code_interpreter = code_interpreter
                    self.file_search = file_search
                }
                public enum CodingKeys: String, CodingKey {
                    case code_interpreter
                    case file_search
                }
            }
            /// A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ThreadObject/tool_resources`.
            public var tool_resources: Components.Schemas.ThreadObject.tool_resourcesPayload?
            /// - Remark: Generated from `#/components/schemas/ThreadObject/metadata`.
            public var metadata: Components.Schemas.Metadata?
            /// Creates a new `ThreadObject`.
            ///
            /// - Parameters:
            ///   - id: The identifier, which can be referenced in API endpoints.
            ///   - object: The object type, which is always `thread`.
            ///   - created_at: The Unix timestamp (in seconds) for when the thread was created.
            ///   - tool_resources: A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
            ///   - metadata:
            public init(
                id: Swift.String,
                object: Components.Schemas.ThreadObject.objectPayload,
                created_at: Swift.Int,
                tool_resources: Components.Schemas.ThreadObject.tool_resourcesPayload? = nil,
                metadata: Components.Schemas.Metadata? = nil
            ) {
                self.id = id
                self.object = object
                self.created_at = created_at
                self.tool_resources = tool_resources
                self.metadata = metadata
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case object
                case created_at
                case tool_resources
                case metadata
            }
        }
        /// Emitted when there is an additional text delta. This is also the first event emitted when the transcription starts. Only emitted when you [create a transcription](/docs/api-reference/audio/create-transcription) with the `Stream` parameter set to `true`.
        ///
        /// - Remark: Generated from `#/components/schemas/TranscriptTextDeltaEvent`.
        public struct TranscriptTextDeltaEvent: Codable, Hashable, Sendable {
            /// The type of the event. Always `transcript.text.delta`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptTextDeltaEvent/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case transcript_period_text_period_delta = "transcript.text.delta"
            }
            /// The type of the event. Always `transcript.text.delta`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptTextDeltaEvent/type`.
            public var _type: Components.Schemas.TranscriptTextDeltaEvent._typePayload
            /// The text delta that was additionally transcribed.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptTextDeltaEvent/delta`.
            public var delta: Swift.String
            /// - Remark: Generated from `#/components/schemas/TranscriptTextDeltaEvent/logprobsPayload`.
            public struct logprobsPayloadPayload: Codable, Hashable, Sendable {
                /// The token that was used to generate the log probability.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TranscriptTextDeltaEvent/logprobsPayload/token`.
                public var token: Swift.String?
                /// The log probability of the token.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TranscriptTextDeltaEvent/logprobsPayload/logprob`.
                public var logprob: Swift.Double?
                /// The bytes that were used to generate the log probability.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TranscriptTextDeltaEvent/logprobsPayload/bytes`.
                public var bytes: OpenAPIRuntime.OpenAPIArrayContainer?
                /// Creates a new `logprobsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - token: The token that was used to generate the log probability.
                ///   - logprob: The log probability of the token.
                ///   - bytes: The bytes that were used to generate the log probability.
                public init(
                    token: Swift.String? = nil,
                    logprob: Swift.Double? = nil,
                    bytes: OpenAPIRuntime.OpenAPIArrayContainer? = nil
                ) {
                    self.token = token
                    self.logprob = logprob
                    self.bytes = bytes
                }
                public enum CodingKeys: String, CodingKey {
                    case token
                    case logprob
                    case bytes
                }
            }
            /// The log probabilities of the delta. Only included if you [create a transcription](/docs/api-reference/audio/create-transcription) with the `include[]` parameter set to `logprobs`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptTextDeltaEvent/logprobs`.
            public typealias logprobsPayload = [Components.Schemas.TranscriptTextDeltaEvent.logprobsPayloadPayload]
            /// The log probabilities of the delta. Only included if you [create a transcription](/docs/api-reference/audio/create-transcription) with the `include[]` parameter set to `logprobs`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptTextDeltaEvent/logprobs`.
            public var logprobs: Components.Schemas.TranscriptTextDeltaEvent.logprobsPayload?
            /// Creates a new `TranscriptTextDeltaEvent`.
            ///
            /// - Parameters:
            ///   - _type: The type of the event. Always `transcript.text.delta`.
            ///   - delta: The text delta that was additionally transcribed.
            ///   - logprobs: The log probabilities of the delta. Only included if you [create a transcription](/docs/api-reference/audio/create-transcription) with the `include[]` parameter set to `logprobs`.
            public init(
                _type: Components.Schemas.TranscriptTextDeltaEvent._typePayload,
                delta: Swift.String,
                logprobs: Components.Schemas.TranscriptTextDeltaEvent.logprobsPayload? = nil
            ) {
                self._type = _type
                self.delta = delta
                self.logprobs = logprobs
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case delta
                case logprobs
            }
        }
        /// Emitted when the transcription is complete. Contains the complete transcription text. Only emitted when you [create a transcription](/docs/api-reference/audio/create-transcription) with the `Stream` parameter set to `true`.
        ///
        /// - Remark: Generated from `#/components/schemas/TranscriptTextDoneEvent`.
        public struct TranscriptTextDoneEvent: Codable, Hashable, Sendable {
            /// The type of the event. Always `transcript.text.done`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptTextDoneEvent/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case transcript_period_text_period_done = "transcript.text.done"
            }
            /// The type of the event. Always `transcript.text.done`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptTextDoneEvent/type`.
            public var _type: Components.Schemas.TranscriptTextDoneEvent._typePayload
            /// The text that was transcribed.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptTextDoneEvent/text`.
            public var text: Swift.String
            /// - Remark: Generated from `#/components/schemas/TranscriptTextDoneEvent/logprobsPayload`.
            public struct logprobsPayloadPayload: Codable, Hashable, Sendable {
                /// The token that was used to generate the log probability.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TranscriptTextDoneEvent/logprobsPayload/token`.
                public var token: Swift.String?
                /// The log probability of the token.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TranscriptTextDoneEvent/logprobsPayload/logprob`.
                public var logprob: Swift.Double?
                /// The bytes that were used to generate the log probability.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/TranscriptTextDoneEvent/logprobsPayload/bytes`.
                public var bytes: OpenAPIRuntime.OpenAPIArrayContainer?
                /// Creates a new `logprobsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - token: The token that was used to generate the log probability.
                ///   - logprob: The log probability of the token.
                ///   - bytes: The bytes that were used to generate the log probability.
                public init(
                    token: Swift.String? = nil,
                    logprob: Swift.Double? = nil,
                    bytes: OpenAPIRuntime.OpenAPIArrayContainer? = nil
                ) {
                    self.token = token
                    self.logprob = logprob
                    self.bytes = bytes
                }
                public enum CodingKeys: String, CodingKey {
                    case token
                    case logprob
                    case bytes
                }
            }
            /// The log probabilities of the individual tokens in the transcription. Only included if you [create a transcription](/docs/api-reference/audio/create-transcription) with the `include[]` parameter set to `logprobs`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptTextDoneEvent/logprobs`.
            public typealias logprobsPayload = [Components.Schemas.TranscriptTextDoneEvent.logprobsPayloadPayload]
            /// The log probabilities of the individual tokens in the transcription. Only included if you [create a transcription](/docs/api-reference/audio/create-transcription) with the `include[]` parameter set to `logprobs`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptTextDoneEvent/logprobs`.
            public var logprobs: Components.Schemas.TranscriptTextDoneEvent.logprobsPayload?
            /// Creates a new `TranscriptTextDoneEvent`.
            ///
            /// - Parameters:
            ///   - _type: The type of the event. Always `transcript.text.done`.
            ///   - text: The text that was transcribed.
            ///   - logprobs: The log probabilities of the individual tokens in the transcription. Only included if you [create a transcription](/docs/api-reference/audio/create-transcription) with the `include[]` parameter set to `logprobs`.
            public init(
                _type: Components.Schemas.TranscriptTextDoneEvent._typePayload,
                text: Swift.String,
                logprobs: Components.Schemas.TranscriptTextDoneEvent.logprobsPayload? = nil
            ) {
                self._type = _type
                self.text = text
                self.logprobs = logprobs
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case text
                case logprobs
            }
        }
        /// - Remark: Generated from `#/components/schemas/TranscriptionInclude`.
        @frozen public enum TranscriptionInclude: String, Codable, Hashable, Sendable {
            case logprobs = "logprobs"
        }
        /// - Remark: Generated from `#/components/schemas/TranscriptionSegment`.
        public struct TranscriptionSegment: Codable, Hashable, Sendable {
            /// Unique identifier of the segment.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/id`.
            public var id: Swift.Int
            /// Seek offset of the segment.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/seek`.
            public var seek: Swift.Int
            /// Start time of the segment in seconds.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/start`.
            public var start: Swift.Float
            /// End time of the segment in seconds.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/end`.
            public var end: Swift.Float
            /// Text content of the segment.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/text`.
            public var text: Swift.String
            /// Array of token IDs for the text content.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/tokens`.
            public var tokens: [Swift.Int]
            /// Temperature parameter used for generating the segment.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/temperature`.
            public var temperature: Swift.Float
            /// Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/avg_logprob`.
            public var avg_logprob: Swift.Float
            /// Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/compression_ratio`.
            public var compression_ratio: Swift.Float
            /// Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/no_speech_prob`.
            public var no_speech_prob: Swift.Float
            /// Creates a new `TranscriptionSegment`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the segment.
            ///   - seek: Seek offset of the segment.
            ///   - start: Start time of the segment in seconds.
            ///   - end: End time of the segment in seconds.
            ///   - text: Text content of the segment.
            ///   - tokens: Array of token IDs for the text content.
            ///   - temperature: Temperature parameter used for generating the segment.
            ///   - avg_logprob: Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
            ///   - compression_ratio: Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.
            ///   - no_speech_prob: Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.
            public init(
                id: Swift.Int,
                seek: Swift.Int,
                start: Swift.Float,
                end: Swift.Float,
                text: Swift.String,
                tokens: [Swift.Int],
                temperature: Swift.Float,
                avg_logprob: Swift.Float,
                compression_ratio: Swift.Float,
                no_speech_prob: Swift.Float
            ) {
                self.id = id
                self.seek = seek
                self.start = start
                self.end = end
                self.text = text
                self.tokens = tokens
                self.temperature = temperature
                self.avg_logprob = avg_logprob
                self.compression_ratio = compression_ratio
                self.no_speech_prob = no_speech_prob
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case seek
                case start
                case end
                case text
                case tokens
                case temperature
                case avg_logprob
                case compression_ratio
                case no_speech_prob
            }
        }
        /// - Remark: Generated from `#/components/schemas/TranscriptionWord`.
        public struct TranscriptionWord: Codable, Hashable, Sendable {
            /// The text content of the word.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionWord/word`.
            public var word: Swift.String
            /// Start time of the word in seconds.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionWord/start`.
            public var start: Swift.Float
            /// End time of the word in seconds.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionWord/end`.
            public var end: Swift.Float
            /// Creates a new `TranscriptionWord`.
            ///
            /// - Parameters:
            ///   - word: The text content of the word.
            ///   - start: Start time of the word in seconds.
            ///   - end: End time of the word in seconds.
            public init(
                word: Swift.String,
                start: Swift.Float,
                end: Swift.Float
            ) {
                self.word = word
                self.start = start
                self.end = end
            }
            public enum CodingKeys: String, CodingKey {
                case word
                case start
                case end
            }
        }
        /// Controls for how a thread will be truncated prior to the run. Use this to control the intial context window of the run.
        ///
        /// - Remark: Generated from `#/components/schemas/TruncationObject`.
        public struct TruncationObject: Codable, Hashable, Sendable {
            /// The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.
            ///
            /// - Remark: Generated from `#/components/schemas/TruncationObject/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case auto = "auto"
                case last_messages = "last_messages"
            }
            /// The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.
            ///
            /// - Remark: Generated from `#/components/schemas/TruncationObject/type`.
            public var _type: Components.Schemas.TruncationObject._typePayload
            /// The number of most recent messages from the thread when constructing the context for the run.
            ///
            /// - Remark: Generated from `#/components/schemas/TruncationObject/last_messages`.
            public var last_messages: Swift.Int?
            /// Creates a new `TruncationObject`.
            ///
            /// - Parameters:
            ///   - _type: The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.
            ///   - last_messages: The number of most recent messages from the thread when constructing the context for the run.
            public init(
                _type: Components.Schemas.TruncationObject._typePayload,
                last_messages: Swift.Int? = nil
            ) {
                self._type = _type
                self.last_messages = last_messages
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case last_messages
            }
        }
        /// The Upload object can accept byte chunks in the form of Parts.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/Upload`.
        public struct Upload: Codable, Hashable, Sendable {
            /// The Upload unique identifier, which can be referenced in API endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/Upload/id`.
            public var id: Swift.String
            /// The Unix timestamp (in seconds) for when the Upload was created.
            ///
            /// - Remark: Generated from `#/components/schemas/Upload/created_at`.
            public var created_at: Swift.Int
            /// The name of the file to be uploaded.
            ///
            /// - Remark: Generated from `#/components/schemas/Upload/filename`.
            public var filename: Swift.String
            /// The intended number of bytes to be uploaded.
            ///
            /// - Remark: Generated from `#/components/schemas/Upload/bytes`.
            public var bytes: Swift.Int
            /// The intended purpose of the file. [Please refer here](/docs/api-reference/files/object#files/object-purpose) for acceptable values.
            ///
            /// - Remark: Generated from `#/components/schemas/Upload/purpose`.
            public var purpose: Swift.String
            /// The status of the Upload.
            ///
            /// - Remark: Generated from `#/components/schemas/Upload/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                case pending = "pending"
                case completed = "completed"
                case cancelled = "cancelled"
                case expired = "expired"
            }
            /// The status of the Upload.
            ///
            /// - Remark: Generated from `#/components/schemas/Upload/status`.
            public var status: Components.Schemas.Upload.statusPayload
            /// The Unix timestamp (in seconds) for when the Upload will expire.
            ///
            /// - Remark: Generated from `#/components/schemas/Upload/expires_at`.
            public var expires_at: Swift.Int
            /// The object type, which is always "upload".
            ///
            /// - Remark: Generated from `#/components/schemas/Upload/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case upload = "upload"
            }
            /// The object type, which is always "upload".
            ///
            /// - Remark: Generated from `#/components/schemas/Upload/object`.
            public var object: Components.Schemas.Upload.objectPayload?
            /// - Remark: Generated from `#/components/schemas/Upload/file`.
            public struct filePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Upload/file/value1`.
                public var value1: Components.Schemas.OpenAIFile
                /// The ready File object after the Upload is completed.
                ///
                /// - Remark: Generated from `#/components/schemas/Upload/file/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer
                /// Creates a new `filePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2: The ready File object after the Upload is completed.
                public init(
                    value1: Components.Schemas.OpenAIFile,
                    value2: OpenAPIRuntime.OpenAPIValueContainer
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                    value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                    try value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/Upload/file`.
            public var file: Components.Schemas.Upload.filePayload?
            /// Creates a new `Upload`.
            ///
            /// - Parameters:
            ///   - id: The Upload unique identifier, which can be referenced in API endpoints.
            ///   - created_at: The Unix timestamp (in seconds) for when the Upload was created.
            ///   - filename: The name of the file to be uploaded.
            ///   - bytes: The intended number of bytes to be uploaded.
            ///   - purpose: The intended purpose of the file. [Please refer here](/docs/api-reference/files/object#files/object-purpose) for acceptable values.
            ///   - status: The status of the Upload.
            ///   - expires_at: The Unix timestamp (in seconds) for when the Upload will expire.
            ///   - object: The object type, which is always "upload".
            ///   - file:
            public init(
                id: Swift.String,
                created_at: Swift.Int,
                filename: Swift.String,
                bytes: Swift.Int,
                purpose: Swift.String,
                status: Components.Schemas.Upload.statusPayload,
                expires_at: Swift.Int,
                object: Components.Schemas.Upload.objectPayload? = nil,
                file: Components.Schemas.Upload.filePayload? = nil
            ) {
                self.id = id
                self.created_at = created_at
                self.filename = filename
                self.bytes = bytes
                self.purpose = purpose
                self.status = status
                self.expires_at = expires_at
                self.object = object
                self.file = file
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case created_at
                case filename
                case bytes
                case purpose
                case status
                case expires_at
                case object
                case file
            }
        }
        /// The upload Part represents a chunk of bytes we can add to an Upload object.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/UploadPart`.
        public struct UploadPart: Codable, Hashable, Sendable {
            /// The upload Part unique identifier, which can be referenced in API endpoints.
            ///
            /// - Remark: Generated from `#/components/schemas/UploadPart/id`.
            public var id: Swift.String
            /// The Unix timestamp (in seconds) for when the Part was created.
            ///
            /// - Remark: Generated from `#/components/schemas/UploadPart/created_at`.
            public var created_at: Swift.Int
            /// The ID of the Upload object that this Part was added to.
            ///
            /// - Remark: Generated from `#/components/schemas/UploadPart/upload_id`.
            public var upload_id: Swift.String
            /// The object type, which is always `upload.part`.
            ///
            /// - Remark: Generated from `#/components/schemas/UploadPart/object`.
            @frozen public enum objectPayload: String, Codable, Hashable, Sendable {
                case upload_period_part = "upload.part"
            }
            /// The object type, which is always `upload.part`.
            ///
            /// - Remark: Generated from `#/components/schemas/UploadPart/object`.
            public var object: Components.Schemas.UploadPart.objectPayload
            /// Creates a new `UploadPart`.
            ///
            /// - Parameters:
            ///   - id: The upload Part unique identifier, which can be referenced in API endpoints.
            ///   - created_at: The Unix timestamp (in seconds) for when the Part was created.
            ///   - upload_id: The ID of the Upload object that this Part was added to.
            ///   - object: The object type, which is always `upload.part`.
            public init(
                id: Swift.String,
                created_at: Swift.Int,
                upload_id: Swift.String,
                object: Components.Schemas.UploadPart.objectPayload
            ) {
                self.id = id
                self.created_at = created_at
                self.upload_id = upload_id
                self.object = object
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case created_at
                case upload_id
                case object
            }
        }
        /// - Remark: Generated from `#/components/schemas/VoiceIdsShared`.
        public struct VoiceIdsShared: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/VoiceIdsShared/value1`.
            public var value1: Swift.String?
            /// - Remark: Generated from `#/components/schemas/VoiceIdsShared/value2`.
            @frozen public enum Value2Payload: String, Codable, Hashable, Sendable {
                case alloy = "alloy"
                case ash = "ash"
                case ballad = "ballad"
                case coral = "coral"
                case echo = "echo"
                case fable = "fable"
                case onyx = "onyx"
                case nova = "nova"
                case sage = "sage"
                case shimmer = "shimmer"
                case verse = "verse"
            }
            /// - Remark: Generated from `#/components/schemas/VoiceIdsShared/value2`.
            public var value2: Components.Schemas.VoiceIdsShared.Value2Payload?
            /// Creates a new `VoiceIdsShared`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Swift.String? = nil,
                value2: Components.Schemas.VoiceIdsShared.Value2Payload? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    value1 = try decoder.decodeFromSingleValueContainer()
                } catch {
                    errors.append(error)
                }
                do {
                    value2 = try decoder.decodeFromSingleValueContainer()
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        value1,
                        value2
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                    value1,
                    value2
                ])
            }
        }
        /// High level guidance for the amount of context window space to use for the 
        /// search. One of `low`, `medium`, or `high`. `medium` is the default.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/WebSearchContextSize`.
        @frozen public enum WebSearchContextSize: String, Codable, Hashable, Sendable {
            case low = "low"
            case medium = "medium"
            case high = "high"
        }
        /// Approximate location parameters for the search.
        ///
        /// - Remark: Generated from `#/components/schemas/WebSearchLocation`.
        public struct WebSearchLocation: Codable, Hashable, Sendable {
            /// The two-letter 
            /// [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the user,
            /// e.g. `US`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/WebSearchLocation/country`.
            public var country: Swift.String?
            /// Free text input for the region of the user, e.g. `California`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/WebSearchLocation/region`.
            public var region: Swift.String?
            /// Free text input for the city of the user, e.g. `San Francisco`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/WebSearchLocation/city`.
            public var city: Swift.String?
            /// The [IANA timezone](https://timeapi.io/documentation/iana-timezones) 
            /// of the user, e.g. `America/Los_Angeles`.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/WebSearchLocation/timezone`.
            public var timezone: Swift.String?
            /// Creates a new `WebSearchLocation`.
            ///
            /// - Parameters:
            ///   - country: The two-letter 
            ///   - region: Free text input for the region of the user, e.g. `California`.
            ///   - city: Free text input for the city of the user, e.g. `San Francisco`.
            ///   - timezone: The [IANA timezone](https://timeapi.io/documentation/iana-timezones) 
            public init(
                country: Swift.String? = nil,
                region: Swift.String? = nil,
                city: Swift.String? = nil,
                timezone: Swift.String? = nil
            ) {
                self.country = country
                self.region = region
                self.city = city
                self.timezone = timezone
            }
            public enum CodingKeys: String, CodingKey {
                case country
                case region
                case city
                case timezone
            }
        }
        /// A text input to the model.
        ///
        /// - Remark: Generated from `#/components/schemas/InputTextContent`.
        public struct InputTextContent: Codable, Hashable, Sendable {
            /// The type of the input item. Always `input_text`.
            ///
            /// - Remark: Generated from `#/components/schemas/InputTextContent/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case input_text = "input_text"
            }
            /// The type of the input item. Always `input_text`.
            ///
            /// - Remark: Generated from `#/components/schemas/InputTextContent/type`.
            public var _type: Components.Schemas.InputTextContent._typePayload
            /// The text input to the model.
            ///
            /// - Remark: Generated from `#/components/schemas/InputTextContent/text`.
            public var text: Swift.String
            /// Creates a new `InputTextContent`.
            ///
            /// - Parameters:
            ///   - _type: The type of the input item. Always `input_text`.
            ///   - text: The text input to the model.
            public init(
                _type: Components.Schemas.InputTextContent._typePayload,
                text: Swift.String
            ) {
                self._type = _type
                self.text = text
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case text
            }
        }
        /// An image input to the model. Learn about [image inputs](/docs/guides/vision).
        ///
        /// - Remark: Generated from `#/components/schemas/InputImageContent`.
        public struct InputImageContent: Codable, Hashable, Sendable {
            /// The type of the input item. Always `input_image`.
            ///
            /// - Remark: Generated from `#/components/schemas/InputImageContent/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case input_image = "input_image"
            }
            /// The type of the input item. Always `input_image`.
            ///
            /// - Remark: Generated from `#/components/schemas/InputImageContent/type`.
            public var _type: Components.Schemas.InputImageContent._typePayload
            /// - Remark: Generated from `#/components/schemas/InputImageContent/image_url`.
            public struct image_urlPayload: Codable, Hashable, Sendable {
                /// The URL of the image to be sent to the model. A fully qualified URL or base64 encoded image in a data URL.
                ///
                /// - Remark: Generated from `#/components/schemas/InputImageContent/image_url/value1`.
                public var value1: Swift.String?
                /// - Remark: Generated from `#/components/schemas/InputImageContent/image_url/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `image_urlPayload`.
                ///
                /// - Parameters:
                ///   - value1: The URL of the image to be sent to the model. A fully qualified URL or base64 encoded image in a data URL.
                ///   - value2:
                public init(
                    value1: Swift.String? = nil,
                    value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            value1,
                            value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        value1
                    ])
                    try value2?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/InputImageContent/image_url`.
            public var image_url: Components.Schemas.InputImageContent.image_urlPayload?
            /// - Remark: Generated from `#/components/schemas/InputImageContent/file_id`.
            public struct file_idPayload: Codable, Hashable, Sendable {
                /// The ID of the file to be sent to the model.
                ///
                /// - Remark: Generated from `#/components/schemas/InputImageContent/file_id/value1`.
                public var value1: Swift.String?
                /// - Remark: Generated from `#/components/schemas/InputImageContent/file_id/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `file_idPayload`.
                ///
                /// - Parameters:
                ///   - value1: The ID of the file to be sent to the model.
                ///   - value2:
                public init(
                    value1: Swift.String? = nil,
                    value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            value1,
                            value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        value1
                    ])
                    try value2?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/InputImageContent/file_id`.
            public var file_id: Components.Schemas.InputImageContent.file_idPayload?
            /// The detail level of the image to be sent to the model. One of `high`, `low`, or `auto`. Defaults to `auto`.
            ///
            /// - Remark: Generated from `#/components/schemas/InputImageContent/detail`.
            @frozen public enum detailPayload: String, Codable, Hashable, Sendable {
                case low = "low"
                case high = "high"
                case auto = "auto"
            }
            /// The detail level of the image to be sent to the model. One of `high`, `low`, or `auto`. Defaults to `auto`.
            ///
            /// - Remark: Generated from `#/components/schemas/InputImageContent/detail`.
            public var detail: Components.Schemas.InputImageContent.detailPayload
            /// Creates a new `InputImageContent`.
            ///
            /// - Parameters:
            ///   - _type: The type of the input item. Always `input_image`.
            ///   - image_url:
            ///   - file_id:
            ///   - detail: The detail level of the image to be sent to the model. One of `high`, `low`, or `auto`. Defaults to `auto`.
            public init(
                _type: Components.Schemas.InputImageContent._typePayload,
                image_url: Components.Schemas.InputImageContent.image_urlPayload? = nil,
                file_id: Components.Schemas.InputImageContent.file_idPayload? = nil,
                detail: Components.Schemas.InputImageContent.detailPayload
            ) {
                self._type = _type
                self.image_url = image_url
                self.file_id = file_id
                self.detail = detail
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case image_url
                case file_id
                case detail
            }
        }
        /// A file input to the model.
        ///
        /// - Remark: Generated from `#/components/schemas/InputFileContent`.
        public struct InputFileContent: Codable, Hashable, Sendable {
            /// The type of the input item. Always `input_file`.
            ///
            /// - Remark: Generated from `#/components/schemas/InputFileContent/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case input_file = "input_file"
            }
            /// The type of the input item. Always `input_file`.
            ///
            /// - Remark: Generated from `#/components/schemas/InputFileContent/type`.
            public var _type: Components.Schemas.InputFileContent._typePayload
            /// - Remark: Generated from `#/components/schemas/InputFileContent/file_id`.
            public struct file_idPayload: Codable, Hashable, Sendable {
                /// The ID of the file to be sent to the model.
                ///
                /// - Remark: Generated from `#/components/schemas/InputFileContent/file_id/value1`.
                public var value1: Swift.String?
                /// - Remark: Generated from `#/components/schemas/InputFileContent/file_id/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `file_idPayload`.
                ///
                /// - Parameters:
                ///   - value1: The ID of the file to be sent to the model.
                ///   - value2:
                public init(
                    value1: Swift.String? = nil,
                    value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            value1,
                            value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        value1
                    ])
                    try value2?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/InputFileContent/file_id`.
            public var file_id: Components.Schemas.InputFileContent.file_idPayload?
            /// The name of the file to be sent to the model.
            ///
            /// - Remark: Generated from `#/components/schemas/InputFileContent/filename`.
            public var filename: Swift.String?
            /// The content of the file to be sent to the model.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/InputFileContent/file_data`.
            public var file_data: Swift.String?
            /// Creates a new `InputFileContent`.
            ///
            /// - Parameters:
            ///   - _type: The type of the input item. Always `input_file`.
            ///   - file_id:
            ///   - filename: The name of the file to be sent to the model.
            ///   - file_data: The content of the file to be sent to the model.
            public init(
                _type: Components.Schemas.InputFileContent._typePayload,
                file_id: Components.Schemas.InputFileContent.file_idPayload? = nil,
                filename: Swift.String? = nil,
                file_data: Swift.String? = nil
            ) {
                self._type = _type
                self.file_id = file_id
                self.filename = filename
                self.file_data = file_data
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case file_id
                case filename
                case file_data
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Returns a list of assistants.
    ///
    /// - Remark: HTTP `GET /assistants`.
    /// - Remark: Generated from `#/paths//assistants/get(listAssistants)`.
    public enum listAssistants {
        public static let id: Swift.String = "listAssistants"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/assistants/GET/query`.
            public struct Query: Sendable, Hashable {
                /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///
                ///
                /// - Remark: Generated from `#/paths/assistants/GET/query/limit`.
                public var limit: Swift.Int?
                /// - Remark: Generated from `#/paths/assistants/GET/query/order`.
                @frozen public enum orderPayload: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                ///
                ///
                /// - Remark: Generated from `#/paths/assistants/GET/query/order`.
                public var order: Operations.listAssistants.Input.Query.orderPayload?
                /// A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/assistants/GET/query/after`.
                public var after: Swift.String?
                /// A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/assistants/GET/query/before`.
                public var before: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///   - order: Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                ///   - after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///   - before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                public init(
                    limit: Swift.Int? = nil,
                    order: Operations.listAssistants.Input.Query.orderPayload? = nil,
                    after: Swift.String? = nil,
                    before: Swift.String? = nil
                ) {
                    self.limit = limit
                    self.order = order
                    self.after = after
                    self.before = before
                }
            }
            public var query: Operations.listAssistants.Input.Query
            /// - Remark: Generated from `#/paths/assistants/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listAssistants.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listAssistants.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.listAssistants.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.listAssistants.Input.Query = .init(),
                headers: Operations.listAssistants.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/assistants/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/assistants/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListAssistantsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListAssistantsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.listAssistants.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.listAssistants.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//assistants/get(listAssistants)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.listAssistants.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.listAssistants.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create an assistant with a model and instructions.
    ///
    /// - Remark: HTTP `POST /assistants`.
    /// - Remark: Generated from `#/paths//assistants/post(createAssistant)`.
    public enum createAssistant {
        public static let id: Swift.String = "createAssistant"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/assistants/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createAssistant.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createAssistant.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createAssistant.Input.Headers
            /// - Remark: Generated from `#/paths/assistants/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/assistants/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateAssistantRequest)
            }
            public var body: Operations.createAssistant.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createAssistant.Input.Headers = .init(),
                body: Operations.createAssistant.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/assistants/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/assistants/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AssistantObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AssistantObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createAssistant.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createAssistant.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//assistants/post(createAssistant)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createAssistant.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createAssistant.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an assistant.
    ///
    /// - Remark: HTTP `GET /assistants/{assistant_id}`.
    /// - Remark: Generated from `#/paths//assistants/{assistant_id}/get(getAssistant)`.
    public enum getAssistant {
        public static let id: Swift.String = "getAssistant"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/assistants/{assistant_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the assistant to retrieve.
                ///
                /// - Remark: Generated from `#/paths/assistants/{assistant_id}/GET/path/assistant_id`.
                public var assistant_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - assistant_id: The ID of the assistant to retrieve.
                public init(assistant_id: Swift.String) {
                    self.assistant_id = assistant_id
                }
            }
            public var path: Operations.getAssistant.Input.Path
            /// - Remark: Generated from `#/paths/assistants/{assistant_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAssistant.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAssistant.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAssistant.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getAssistant.Input.Path,
                headers: Operations.getAssistant.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/assistants/{assistant_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/assistants/{assistant_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.AssistantObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AssistantObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAssistant.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAssistant.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//assistants/{assistant_id}/get(getAssistant)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAssistant.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAssistant.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Modifies an assistant.
    ///
    /// - Remark: HTTP `POST /assistants/{assistant_id}`.
    /// - Remark: Generated from `#/paths//assistants/{assistant_id}/post(modifyAssistant)`.
    public enum modifyAssistant {
        public static let id: Swift.String = "modifyAssistant"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/assistants/{assistant_id}/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the assistant to modify.
                ///
                /// - Remark: Generated from `#/paths/assistants/{assistant_id}/POST/path/assistant_id`.
                public var assistant_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - assistant_id: The ID of the assistant to modify.
                public init(assistant_id: Swift.String) {
                    self.assistant_id = assistant_id
                }
            }
            public var path: Operations.modifyAssistant.Input.Path
            /// - Remark: Generated from `#/paths/assistants/{assistant_id}/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.modifyAssistant.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.modifyAssistant.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.modifyAssistant.Input.Headers
            /// - Remark: Generated from `#/paths/assistants/{assistant_id}/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/assistants/{assistant_id}/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ModifyAssistantRequest)
            }
            public var body: Operations.modifyAssistant.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.modifyAssistant.Input.Path,
                headers: Operations.modifyAssistant.Input.Headers = .init(),
                body: Operations.modifyAssistant.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/assistants/{assistant_id}/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/assistants/{assistant_id}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AssistantObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AssistantObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.modifyAssistant.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.modifyAssistant.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//assistants/{assistant_id}/post(modifyAssistant)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.modifyAssistant.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.modifyAssistant.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete an assistant.
    ///
    /// - Remark: HTTP `DELETE /assistants/{assistant_id}`.
    /// - Remark: Generated from `#/paths//assistants/{assistant_id}/delete(deleteAssistant)`.
    public enum deleteAssistant {
        public static let id: Swift.String = "deleteAssistant"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/assistants/{assistant_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the assistant to delete.
                ///
                /// - Remark: Generated from `#/paths/assistants/{assistant_id}/DELETE/path/assistant_id`.
                public var assistant_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - assistant_id: The ID of the assistant to delete.
                public init(assistant_id: Swift.String) {
                    self.assistant_id = assistant_id
                }
            }
            public var path: Operations.deleteAssistant.Input.Path
            /// - Remark: Generated from `#/paths/assistants/{assistant_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteAssistant.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteAssistant.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.deleteAssistant.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.deleteAssistant.Input.Path,
                headers: Operations.deleteAssistant.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/assistants/{assistant_id}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/assistants/{assistant_id}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.DeleteAssistantResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DeleteAssistantResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.deleteAssistant.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.deleteAssistant.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//assistants/{assistant_id}/delete(deleteAssistant)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.deleteAssistant.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.deleteAssistant.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Generates audio from the input text.
    ///
    /// - Remark: HTTP `POST /audio/speech`.
    /// - Remark: Generated from `#/paths//audio/speech/post(createSpeech)`.
    public enum createSpeech {
        public static let id: Swift.String = "createSpeech"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/audio/speech/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createSpeech.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createSpeech.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createSpeech.Input.Headers
            /// - Remark: Generated from `#/paths/audio/speech/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/speech/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateSpeechRequest)
            }
            public var body: Operations.createSpeech.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createSpeech.Input.Headers = .init(),
                body: Operations.createSpeech.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/speech/POST/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// chunked
                    ///
                    /// - Remark: Generated from `#/paths/audio/speech/POST/responses/200/headers/Transfer-Encoding`.
                    public var Transfer_hyphen_Encoding: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Transfer_hyphen_Encoding: chunked
                    public init(Transfer_hyphen_Encoding: Swift.String? = nil) {
                        self.Transfer_hyphen_Encoding = Transfer_hyphen_Encoding
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.createSpeech.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/audio/speech/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/audio/speech/POST/responses/200/content/application\/octet-stream`.
                    case binary(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.binary`.
                    ///
                    /// - Throws: An error if `self` is not `.binary`.
                    /// - SeeAlso: `.binary`.
                    public var binary: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .binary(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createSpeech.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.createSpeech.Output.Ok.Headers = .init(),
                    body: Operations.createSpeech.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//audio/speech/post(createSpeech)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createSpeech.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createSpeech.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case binary
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/octet-stream":
                    self = .binary
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .binary:
                    return "application/octet-stream"
                }
            }
            public static var allCases: [Self] {
                [
                    .binary
                ]
            }
        }
    }
    /// Transcribes audio into the input language.
    ///
    /// - Remark: HTTP `POST /audio/transcriptions`.
    /// - Remark: Generated from `#/paths//audio/transcriptions/post(createTranscription)`.
    public enum createTranscription {
        public static let id: Swift.String = "createTranscription"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/audio/transcriptions/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createTranscription.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createTranscription.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createTranscription.Input.Headers
            /// - Remark: Generated from `#/paths/audio/transcriptions/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/transcriptions/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Components.Schemas.CreateTranscriptionRequest>)
            }
            public var body: Operations.createTranscription.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createTranscription.Input.Headers = .init(),
                body: Operations.createTranscription.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/200/content/json`.
                    @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/200/content/json/case1`.
                        case CreateTranscriptionResponseVerboseJson(Components.Schemas.CreateTranscriptionResponseVerboseJson)
                        /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/200/content/json/case2`.
                        case CreateTranscriptionResponseJson(Components.Schemas.CreateTranscriptionResponseJson)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .CreateTranscriptionResponseVerboseJson(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .CreateTranscriptionResponseJson(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .CreateTranscriptionResponseVerboseJson(value):
                                try value.encode(to: encoder)
                            case let .CreateTranscriptionResponseJson(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/200/content/application\/json`.
                    case json(Operations.createTranscription.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.createTranscription.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/200/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    public var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createTranscription.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createTranscription.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//audio/transcriptions/post(createTranscription)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createTranscription.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createTranscription.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createTranscription.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createTranscription.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The request was malformed, missing required fields, or invalid parameters
            ///
            /// - Remark: Generated from `#/paths//audio/transcriptions/post(createTranscription)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.createTranscription.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.createTranscription.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createTranscription.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createTranscription.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Invalid Authentication, Incorrect API key provided, You must be a member of an organization to use the API
            ///
            /// - Remark: Generated from `#/paths//audio/transcriptions/post(createTranscription)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.createTranscription.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.createTranscription.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createTranscription.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createTranscription.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Country, region, or territory not supported
            ///
            /// - Remark: Generated from `#/paths//audio/transcriptions/post(createTranscription)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.createTranscription.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.createTranscription.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createTranscription.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createTranscription.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit reached for requests, You exceeded your current quota, please check your plan and billing details
            ///
            /// - Remark: Generated from `#/paths//audio/transcriptions/post(createTranscription)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.createTranscription.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.createTranscription.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/500/content/plain\/text`.
                    case plain_text(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plain_text`.
                    ///
                    /// - Throws: An error if `self` is not `.plain_text`.
                    /// - SeeAlso: `.plain_text`.
                    public var plain_text: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plain_text(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "plain/text",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createTranscription.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createTranscription.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// The server had an error while processing your request
            ///
            /// - Remark: Generated from `#/paths//audio/transcriptions/post(createTranscription)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.createTranscription.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.createTranscription.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            public struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/503/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/503/content/text\/event-stream`.
                    case text_event_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.text_event_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.text_event_hyphen_stream`.
                    /// - SeeAlso: `.text_event_hyphen_stream`.
                    public var text_event_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .text_event_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/event-stream",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createTranscription.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createTranscription.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// The engine is currently overloaded, please try again later
            ///
            /// - Remark: Generated from `#/paths//audio/transcriptions/post(createTranscription)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.createTranscription.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Operations.createTranscription.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case plain_text
            case text_event_hyphen_stream
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                case "plain/text":
                    self = .plain_text
                case "text/event-stream":
                    self = .text_event_hyphen_stream
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                case .plain_text:
                    return "plain/text"
                case .text_event_hyphen_stream:
                    return "text/event-stream"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .plainText,
                    .plain_text,
                    .text_event_hyphen_stream
                ]
            }
        }
    }
    /// Translates audio into English.
    ///
    /// - Remark: HTTP `POST /audio/translations`.
    /// - Remark: Generated from `#/paths//audio/translations/post(createTranslation)`.
    public enum createTranslation {
        public static let id: Swift.String = "createTranslation"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/audio/translations/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createTranslation.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createTranslation.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createTranslation.Input.Headers
            /// - Remark: Generated from `#/paths/audio/translations/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/translations/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Components.Schemas.CreateTranslationRequest>)
            }
            public var body: Operations.createTranslation.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createTranslation.Input.Headers = .init(),
                body: Operations.createTranslation.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/translations/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/audio/translations/POST/responses/200/content/json`.
                    @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/audio/translations/POST/responses/200/content/json/case1`.
                        case CreateTranslationResponseVerboseJson(Components.Schemas.CreateTranslationResponseVerboseJson)
                        /// - Remark: Generated from `#/paths/audio/translations/POST/responses/200/content/json/case2`.
                        case CreateTranslationResponseJson(Components.Schemas.CreateTranslationResponseJson)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .CreateTranslationResponseVerboseJson(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .CreateTranslationResponseJson(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .CreateTranslationResponseVerboseJson(value):
                                try value.encode(to: encoder)
                            case let .CreateTranslationResponseJson(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/audio/translations/POST/responses/200/content/application\/json`.
                    case json(Operations.createTranslation.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.createTranslation.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/audio/translations/POST/responses/200/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    public var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/plain",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createTranslation.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createTranslation.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//audio/translations/post(createTranslation)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createTranslation.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createTranslation.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/translations/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/audio/translations/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createTranslation.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createTranslation.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The request was malformed, missing required fields, or invalid parameters
            ///
            /// - Remark: Generated from `#/paths//audio/translations/post(createTranslation)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.createTranslation.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.createTranslation.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/translations/POST/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/audio/translations/POST/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createTranslation.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createTranslation.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Invalid Authentication, Incorrect API key provided, You must be a member of an organization to use the API
            ///
            /// - Remark: Generated from `#/paths//audio/translations/post(createTranslation)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.createTranslation.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.createTranslation.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/translations/POST/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/audio/translations/POST/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createTranslation.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createTranslation.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Country, region, or territory not supported
            ///
            /// - Remark: Generated from `#/paths//audio/translations/post(createTranslation)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.createTranslation.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.createTranslation.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/translations/POST/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/audio/translations/POST/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createTranslation.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createTranslation.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit reached for requests, You exceeded your current quota, please check your plan and billing details
            ///
            /// - Remark: Generated from `#/paths//audio/translations/post(createTranslation)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.createTranslation.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.createTranslation.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/translations/POST/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/audio/translations/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/audio/translations/POST/responses/500/content/plain\/text`.
                    case plain_text(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plain_text`.
                    ///
                    /// - Throws: An error if `self` is not `.plain_text`.
                    /// - SeeAlso: `.plain_text`.
                    public var plain_text: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plain_text(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "plain/text",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createTranslation.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createTranslation.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// The server had an error while processing your request
            ///
            /// - Remark: Generated from `#/paths//audio/translations/post(createTranslation)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.createTranslation.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.createTranslation.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            public struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/translations/POST/responses/503/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/audio/translations/POST/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createTranslation.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createTranslation.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// The engine is currently overloaded, please try again later
            ///
            /// - Remark: Generated from `#/paths//audio/translations/post(createTranslation)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.createTranslation.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Operations.createTranslation.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case plainText
            case plain_text
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/plain":
                    self = .plainText
                case "plain/text":
                    self = .plain_text
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .plainText:
                    return "text/plain"
                case .plain_text:
                    return "plain/text"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .plainText,
                    .plain_text
                ]
            }
        }
    }
    /// List your organization's batches.
    ///
    /// - Remark: HTTP `GET /batches`.
    /// - Remark: Generated from `#/paths//batches/get(listBatches)`.
    public enum listBatches {
        public static let id: Swift.String = "listBatches"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/batches/GET/query`.
            public struct Query: Sendable, Hashable {
                /// A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/batches/GET/query/after`.
                public var after: Swift.String?
                /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///
                ///
                /// - Remark: Generated from `#/paths/batches/GET/query/limit`.
                public var limit: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///   - limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                public init(
                    after: Swift.String? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.after = after
                    self.limit = limit
                }
            }
            public var query: Operations.listBatches.Input.Query
            /// - Remark: Generated from `#/paths/batches/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listBatches.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listBatches.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.listBatches.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.listBatches.Input.Query = .init(),
                headers: Operations.listBatches.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/batches/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/batches/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListBatchesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListBatchesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.listBatches.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.listBatches.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Batch listed successfully.
            ///
            /// - Remark: Generated from `#/paths//batches/get(listBatches)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.listBatches.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.listBatches.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates and executes a batch from an uploaded file of requests
    ///
    /// - Remark: HTTP `POST /batches`.
    /// - Remark: Generated from `#/paths//batches/post(createBatch)`.
    public enum createBatch {
        public static let id: Swift.String = "createBatch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/batches/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createBatch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createBatch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createBatch.Input.Headers
            /// - Remark: Generated from `#/paths/batches/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/batches/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The ID of an uploaded file that contains requests for the new batch.
                    ///
                    /// See [upload file](/docs/api-reference/files/create) for how to upload a file.
                    ///
                    /// Your input file must be formatted as a [JSONL file](/docs/api-reference/batch/request-input), and must be uploaded with the purpose `batch`. The file can contain up to 50,000 requests, and can be up to 200 MB in size.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/batches/POST/requestBody/json/input_file_id`.
                    public var input_file_id: Swift.String
                    /// The endpoint to be used for all requests in the batch. Currently `/v1/responses`, `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported. Note that `/v1/embeddings` batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch.
                    ///
                    /// - Remark: Generated from `#/paths/batches/POST/requestBody/json/endpoint`.
                    @frozen public enum endpointPayload: String, Codable, Hashable, Sendable {
                        case _sol_v1_sol_responses = "/v1/responses"
                        case _sol_v1_sol_chat_sol_completions = "/v1/chat/completions"
                        case _sol_v1_sol_embeddings = "/v1/embeddings"
                        case _sol_v1_sol_completions = "/v1/completions"
                    }
                    /// The endpoint to be used for all requests in the batch. Currently `/v1/responses`, `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported. Note that `/v1/embeddings` batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch.
                    ///
                    /// - Remark: Generated from `#/paths/batches/POST/requestBody/json/endpoint`.
                    public var endpoint: Operations.createBatch.Input.Body.jsonPayload.endpointPayload
                    /// The time frame within which the batch should be processed. Currently only `24h` is supported.
                    ///
                    /// - Remark: Generated from `#/paths/batches/POST/requestBody/json/completion_window`.
                    @frozen public enum completion_windowPayload: String, Codable, Hashable, Sendable {
                        case _24h = "24h"
                    }
                    /// The time frame within which the batch should be processed. Currently only `24h` is supported.
                    ///
                    /// - Remark: Generated from `#/paths/batches/POST/requestBody/json/completion_window`.
                    public var completion_window: Operations.createBatch.Input.Body.jsonPayload.completion_windowPayload
                    /// - Remark: Generated from `#/paths/batches/POST/requestBody/json/metadata`.
                    public var metadata: Components.Schemas.Metadata?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - input_file_id: The ID of an uploaded file that contains requests for the new batch.
                    ///   - endpoint: The endpoint to be used for all requests in the batch. Currently `/v1/responses`, `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported. Note that `/v1/embeddings` batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch.
                    ///   - completion_window: The time frame within which the batch should be processed. Currently only `24h` is supported.
                    ///   - metadata:
                    public init(
                        input_file_id: Swift.String,
                        endpoint: Operations.createBatch.Input.Body.jsonPayload.endpointPayload,
                        completion_window: Operations.createBatch.Input.Body.jsonPayload.completion_windowPayload,
                        metadata: Components.Schemas.Metadata? = nil
                    ) {
                        self.input_file_id = input_file_id
                        self.endpoint = endpoint
                        self.completion_window = completion_window
                        self.metadata = metadata
                    }
                    public enum CodingKeys: String, CodingKey {
                        case input_file_id
                        case endpoint
                        case completion_window
                        case metadata
                    }
                }
                /// - Remark: Generated from `#/paths/batches/POST/requestBody/content/application\/json`.
                case json(Operations.createBatch.Input.Body.jsonPayload)
            }
            public var body: Operations.createBatch.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createBatch.Input.Headers = .init(),
                body: Operations.createBatch.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/batches/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/batches/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Batch)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Batch {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createBatch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createBatch.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Batch created successfully.
            ///
            /// - Remark: Generated from `#/paths//batches/post(createBatch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createBatch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createBatch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a batch.
    ///
    /// - Remark: HTTP `GET /batches/{batch_id}`.
    /// - Remark: Generated from `#/paths//batches/{batch_id}/get(retrieveBatch)`.
    public enum retrieveBatch {
        public static let id: Swift.String = "retrieveBatch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/batches/{batch_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the batch to retrieve.
                ///
                /// - Remark: Generated from `#/paths/batches/{batch_id}/GET/path/batch_id`.
                public var batch_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - batch_id: The ID of the batch to retrieve.
                public init(batch_id: Swift.String) {
                    self.batch_id = batch_id
                }
            }
            public var path: Operations.retrieveBatch.Input.Path
            /// - Remark: Generated from `#/paths/batches/{batch_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.retrieveBatch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.retrieveBatch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.retrieveBatch.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.retrieveBatch.Input.Path,
                headers: Operations.retrieveBatch.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/batches/{batch_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/batches/{batch_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Batch)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Batch {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.retrieveBatch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.retrieveBatch.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Batch retrieved successfully.
            ///
            /// - Remark: Generated from `#/paths//batches/{batch_id}/get(retrieveBatch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.retrieveBatch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.retrieveBatch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Cancels an in-progress batch. The batch will be in status `cancelling` for up to 10 minutes, before changing to `cancelled`, where it will have partial results (if any) available in the output file.
    ///
    /// - Remark: HTTP `POST /batches/{batch_id}/cancel`.
    /// - Remark: Generated from `#/paths//batches/{batch_id}/cancel/post(cancelBatch)`.
    public enum cancelBatch {
        public static let id: Swift.String = "cancelBatch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/batches/{batch_id}/cancel/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the batch to cancel.
                ///
                /// - Remark: Generated from `#/paths/batches/{batch_id}/cancel/POST/path/batch_id`.
                public var batch_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - batch_id: The ID of the batch to cancel.
                public init(batch_id: Swift.String) {
                    self.batch_id = batch_id
                }
            }
            public var path: Operations.cancelBatch.Input.Path
            /// - Remark: Generated from `#/paths/batches/{batch_id}/cancel/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cancelBatch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cancelBatch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.cancelBatch.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.cancelBatch.Input.Path,
                headers: Operations.cancelBatch.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/batches/{batch_id}/cancel/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/batches/{batch_id}/cancel/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Batch)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Batch {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.cancelBatch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.cancelBatch.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Batch is cancelling. Returns the cancelling batch's details.
            ///
            /// - Remark: Generated from `#/paths//batches/{batch_id}/cancel/post(cancelBatch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.cancelBatch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.cancelBatch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List stored Chat Completions. Only Chat Completions that have been stored
    /// with the `store` parameter set to `true` will be returned.
    ///
    ///
    /// - Remark: HTTP `GET /chat/completions`.
    /// - Remark: Generated from `#/paths//chat/completions/get(listChatCompletions)`.
    public enum listChatCompletions {
        public static let id: Swift.String = "listChatCompletions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chat/completions/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The model used to generate the Chat Completions.
                ///
                /// - Remark: Generated from `#/paths/chat/completions/GET/query/model`.
                public var model: Swift.String?
                /// A list of metadata keys to filter the Chat Completions by. Example:
                ///
                /// `metadata[key1]=value1&metadata[key2]=value2`
                ///
                ///
                /// - Remark: Generated from `#/paths/chat/completions/GET/query/metadata`.
                public var metadata: Components.Schemas.Metadata?
                /// Identifier for the last chat completion from the previous pagination request.
                ///
                /// - Remark: Generated from `#/paths/chat/completions/GET/query/after`.
                public var after: Swift.String?
                /// Number of Chat Completions to retrieve.
                ///
                /// - Remark: Generated from `#/paths/chat/completions/GET/query/limit`.
                public var limit: Swift.Int?
                /// - Remark: Generated from `#/paths/chat/completions/GET/query/order`.
                @frozen public enum orderPayload: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// Sort order for Chat Completions by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`.
                ///
                /// - Remark: Generated from `#/paths/chat/completions/GET/query/order`.
                public var order: Operations.listChatCompletions.Input.Query.orderPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - model: The model used to generate the Chat Completions.
                ///   - metadata: A list of metadata keys to filter the Chat Completions by. Example:
                ///   - after: Identifier for the last chat completion from the previous pagination request.
                ///   - limit: Number of Chat Completions to retrieve.
                ///   - order: Sort order for Chat Completions by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`.
                public init(
                    model: Swift.String? = nil,
                    metadata: Components.Schemas.Metadata? = nil,
                    after: Swift.String? = nil,
                    limit: Swift.Int? = nil,
                    order: Operations.listChatCompletions.Input.Query.orderPayload? = nil
                ) {
                    self.model = model
                    self.metadata = metadata
                    self.after = after
                    self.limit = limit
                    self.order = order
                }
            }
            public var query: Operations.listChatCompletions.Input.Query
            /// - Remark: Generated from `#/paths/chat/completions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listChatCompletions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listChatCompletions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.listChatCompletions.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.listChatCompletions.Input.Query = .init(),
                headers: Operations.listChatCompletions.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/completions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/completions/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ChatCompletionList)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ChatCompletionList {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.listChatCompletions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.listChatCompletions.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A list of Chat Completions
            ///
            /// - Remark: Generated from `#/paths//chat/completions/get(listChatCompletions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.listChatCompletions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.listChatCompletions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// **Starting a new project?** We recommend trying [Responses](/docs/api-reference/responses) 
    /// to take advantage of the latest OpenAI platform features. Compare
    /// [Chat Completions with Responses](/docs/guides/responses-vs-chat-completions?api-mode=responses).
    ///
    /// ---
    ///
    /// Creates a model response for the given chat conversation. Learn more in the
    /// [text generation](/docs/guides/text-generation), [vision](/docs/guides/vision),
    /// and [audio](/docs/guides/audio) guides.
    ///
    /// Parameter support can differ depending on the model used to generate the
    /// response, particularly for newer reasoning models. Parameters that are only
    /// supported for reasoning models are noted below. For the current state of 
    /// unsupported parameters in reasoning models, 
    /// [refer to the reasoning guide](/docs/guides/reasoning).
    ///
    ///
    /// - Remark: HTTP `POST /chat/completions`.
    /// - Remark: Generated from `#/paths//chat/completions/post(createChatCompletion)`.
    public enum createChatCompletion {
        public static let id: Swift.String = "createChatCompletion"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chat/completions/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createChatCompletion.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createChatCompletion.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createChatCompletion.Input.Headers
            /// - Remark: Generated from `#/paths/chat/completions/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/completions/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateChatCompletionRequest)
            }
            public var body: Operations.createChatCompletion.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createChatCompletion.Input.Headers = .init(),
                body: Operations.createChatCompletion.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/completions/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/completions/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CreateChatCompletionResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CreateChatCompletionResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/chat/completions/POST/responses/200/content/text\/event-stream`.
                    case text_event_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.text_event_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.text_event_hyphen_stream`.
                    /// - SeeAlso: `.text_event_hyphen_stream`.
                    public var text_event_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .text_event_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/event-stream",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createChatCompletion.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createChatCompletion.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//chat/completions/post(createChatCompletion)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createChatCompletion.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createChatCompletion.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/completions/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/completions/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createChatCompletion.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createChatCompletion.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The request was malformed, missing required fields, or invalid parameters
            ///
            /// - Remark: Generated from `#/paths//chat/completions/post(createChatCompletion)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.createChatCompletion.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.createChatCompletion.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/completions/POST/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/completions/POST/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createChatCompletion.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createChatCompletion.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Invalid Authentication, Incorrect API key provided, You must be a member of an organization to use the API
            ///
            /// - Remark: Generated from `#/paths//chat/completions/post(createChatCompletion)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.createChatCompletion.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.createChatCompletion.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/completions/POST/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/completions/POST/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createChatCompletion.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createChatCompletion.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Country, region, or territory not supported
            ///
            /// - Remark: Generated from `#/paths//chat/completions/post(createChatCompletion)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.createChatCompletion.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.createChatCompletion.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/completions/POST/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/completions/POST/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createChatCompletion.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createChatCompletion.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit reached for requests, You exceeded your current quota, please check your plan and billing details
            ///
            /// - Remark: Generated from `#/paths//chat/completions/post(createChatCompletion)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.createChatCompletion.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.createChatCompletion.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/completions/POST/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/completions/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/chat/completions/POST/responses/500/content/plain\/text`.
                    case plain_text(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plain_text`.
                    ///
                    /// - Throws: An error if `self` is not `.plain_text`.
                    /// - SeeAlso: `.plain_text`.
                    public var plain_text: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plain_text(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "plain/text",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createChatCompletion.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createChatCompletion.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// The server had an error while processing your request
            ///
            /// - Remark: Generated from `#/paths//chat/completions/post(createChatCompletion)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.createChatCompletion.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.createChatCompletion.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            public struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/completions/POST/responses/503/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/completions/POST/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/chat/completions/POST/responses/503/content/text\/event-stream`.
                    case text_event_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.text_event_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.text_event_hyphen_stream`.
                    /// - SeeAlso: `.text_event_hyphen_stream`.
                    public var text_event_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .text_event_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/event-stream",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createChatCompletion.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createChatCompletion.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// The engine is currently overloaded, please try again later
            ///
            /// - Remark: Generated from `#/paths//chat/completions/post(createChatCompletion)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.createChatCompletion.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Operations.createChatCompletion.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case text_event_hyphen_stream
            case plain_text
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/event-stream":
                    self = .text_event_hyphen_stream
                case "plain/text":
                    self = .plain_text
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .text_event_hyphen_stream:
                    return "text/event-stream"
                case .plain_text:
                    return "plain/text"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .text_event_hyphen_stream,
                    .plain_text
                ]
            }
        }
    }
    /// Get a stored chat completion. Only Chat Completions that have been created
    /// with the `store` parameter set to `true` will be returned.
    ///
    ///
    /// - Remark: HTTP `GET /chat/completions/{completion_id}`.
    /// - Remark: Generated from `#/paths//chat/completions/{completion_id}/get(getChatCompletion)`.
    public enum getChatCompletion {
        public static let id: Swift.String = "getChatCompletion"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the chat completion to retrieve.
                ///
                /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/GET/path/completion_id`.
                public var completion_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - completion_id: The ID of the chat completion to retrieve.
                public init(completion_id: Swift.String) {
                    self.completion_id = completion_id
                }
            }
            public var path: Operations.getChatCompletion.Input.Path
            /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getChatCompletion.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getChatCompletion.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getChatCompletion.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getChatCompletion.Input.Path,
                headers: Operations.getChatCompletion.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CreateChatCompletionResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CreateChatCompletionResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/GET/responses/200/content/text\/event-stream`.
                    case text_event_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.text_event_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.text_event_hyphen_stream`.
                    /// - SeeAlso: `.text_event_hyphen_stream`.
                    public var text_event_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .text_event_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/event-stream",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getChatCompletion.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getChatCompletion.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A chat completion
            ///
            /// - Remark: Generated from `#/paths//chat/completions/{completion_id}/get(getChatCompletion)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getChatCompletion.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getChatCompletion.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/GET/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/GET/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getChatCompletion.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getChatCompletion.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The request was malformed, missing required fields, or invalid parameters
            ///
            /// - Remark: Generated from `#/paths//chat/completions/{completion_id}/get(getChatCompletion)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.getChatCompletion.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.getChatCompletion.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/GET/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/GET/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getChatCompletion.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getChatCompletion.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Invalid Authentication, Incorrect API key provided, You must be a member of an organization to use the API
            ///
            /// - Remark: Generated from `#/paths//chat/completions/{completion_id}/get(getChatCompletion)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.getChatCompletion.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.getChatCompletion.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/GET/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/GET/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getChatCompletion.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getChatCompletion.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Country, region, or territory not supported
            ///
            /// - Remark: Generated from `#/paths//chat/completions/{completion_id}/get(getChatCompletion)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.getChatCompletion.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.getChatCompletion.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/GET/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/GET/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getChatCompletion.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getChatCompletion.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit reached for requests, You exceeded your current quota, please check your plan and billing details
            ///
            /// - Remark: Generated from `#/paths//chat/completions/{completion_id}/get(getChatCompletion)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.getChatCompletion.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.getChatCompletion.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/GET/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/GET/responses/500/content/plain\/text`.
                    case plain_text(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plain_text`.
                    ///
                    /// - Throws: An error if `self` is not `.plain_text`.
                    /// - SeeAlso: `.plain_text`.
                    public var plain_text: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plain_text(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "plain/text",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getChatCompletion.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getChatCompletion.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// The server had an error while processing your request
            ///
            /// - Remark: Generated from `#/paths//chat/completions/{completion_id}/get(getChatCompletion)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.getChatCompletion.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.getChatCompletion.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            public struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/GET/responses/503/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/GET/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getChatCompletion.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getChatCompletion.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// The engine is currently overloaded, please try again later
            ///
            /// - Remark: Generated from `#/paths//chat/completions/{completion_id}/get(getChatCompletion)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.getChatCompletion.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Operations.getChatCompletion.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case text_event_hyphen_stream
            case plain_text
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/event-stream":
                    self = .text_event_hyphen_stream
                case "plain/text":
                    self = .plain_text
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .text_event_hyphen_stream:
                    return "text/event-stream"
                case .plain_text:
                    return "plain/text"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .text_event_hyphen_stream,
                    .plain_text
                ]
            }
        }
    }
    /// Modify a stored chat completion. Only Chat Completions that have been
    /// created with the `store` parameter set to `true` can be modified. Currently,
    /// the only supported modification is to update the `metadata` field.
    ///
    ///
    /// - Remark: HTTP `POST /chat/completions/{completion_id}`.
    /// - Remark: Generated from `#/paths//chat/completions/{completion_id}/post(updateChatCompletion)`.
    public enum updateChatCompletion {
        public static let id: Swift.String = "updateChatCompletion"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the chat completion to update.
                ///
                /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/POST/path/completion_id`.
                public var completion_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - completion_id: The ID of the chat completion to update.
                public init(completion_id: Swift.String) {
                    self.completion_id = completion_id
                }
            }
            public var path: Operations.updateChatCompletion.Input.Path
            /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.updateChatCompletion.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.updateChatCompletion.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.updateChatCompletion.Input.Headers
            /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/POST/requestBody/json/metadata`.
                    public var metadata: Components.Schemas.Metadata?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - metadata:
                    public init(metadata: Components.Schemas.Metadata? = nil) {
                        self.metadata = metadata
                    }
                    public enum CodingKeys: String, CodingKey {
                        case metadata
                    }
                }
                /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/POST/requestBody/content/application\/json`.
                case json(Operations.updateChatCompletion.Input.Body.jsonPayload)
            }
            public var body: Operations.updateChatCompletion.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.updateChatCompletion.Input.Path,
                headers: Operations.updateChatCompletion.Input.Headers = .init(),
                body: Operations.updateChatCompletion.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CreateChatCompletionResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CreateChatCompletionResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/POST/responses/200/content/text\/event-stream`.
                    case text_event_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.text_event_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.text_event_hyphen_stream`.
                    /// - SeeAlso: `.text_event_hyphen_stream`.
                    public var text_event_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .text_event_hyphen_stream(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "text/event-stream",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.updateChatCompletion.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.updateChatCompletion.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A chat completion
            ///
            /// - Remark: Generated from `#/paths//chat/completions/{completion_id}/post(updateChatCompletion)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.updateChatCompletion.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.updateChatCompletion.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.updateChatCompletion.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.updateChatCompletion.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// The request was malformed, missing required fields, or invalid parameters
            ///
            /// - Remark: Generated from `#/paths//chat/completions/{completion_id}/post(updateChatCompletion)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.updateChatCompletion.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.updateChatCompletion.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/POST/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/POST/responses/401/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.updateChatCompletion.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.updateChatCompletion.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// Invalid Authentication, Incorrect API key provided, You must be a member of an organization to use the API
            ///
            /// - Remark: Generated from `#/paths//chat/completions/{completion_id}/post(updateChatCompletion)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.updateChatCompletion.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.updateChatCompletion.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/POST/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/POST/responses/403/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.updateChatCompletion.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.updateChatCompletion.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Country, region, or territory not supported
            ///
            /// - Remark: Generated from `#/paths//chat/completions/{completion_id}/post(updateChatCompletion)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.updateChatCompletion.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.updateChatCompletion.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/POST/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/POST/responses/429/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.updateChatCompletion.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.updateChatCompletion.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Rate limit reached for requests, You exceeded your current quota, please check your plan and billing details
            ///
            /// - Remark: Generated from `#/paths//chat/completions/{completion_id}/post(updateChatCompletion)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.updateChatCompletion.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.updateChatCompletion.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/POST/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/POST/responses/500/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/POST/responses/500/content/plain\/text`.
                    case plain_text(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plain_text`.
                    ///
                    /// - Throws: An error if `self` is not `.plain_text`.
                    /// - SeeAlso: `.plain_text`.
                    public var plain_text: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plain_text(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "plain/text",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.updateChatCompletion.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.updateChatCompletion.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// The server had an error while processing your request
            ///
            /// - Remark: Generated from `#/paths//chat/completions/{completion_id}/post(updateChatCompletion)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.updateChatCompletion.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.updateChatCompletion.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            public struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/POST/responses/503/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/POST/responses/503/content/application\/json`.
                    case json(Components.Schemas.ErrorResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.updateChatCompletion.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.updateChatCompletion.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// The engine is currently overloaded, please try again later
            ///
            /// - Remark: Generated from `#/paths//chat/completions/{completion_id}/post(updateChatCompletion)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.updateChatCompletion.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Operations.updateChatCompletion.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case text_event_hyphen_stream
            case plain_text
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "text/event-stream":
                    self = .text_event_hyphen_stream
                case "plain/text":
                    self = .plain_text
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .text_event_hyphen_stream:
                    return "text/event-stream"
                case .plain_text:
                    return "plain/text"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .text_event_hyphen_stream,
                    .plain_text
                ]
            }
        }
    }
    /// Delete a stored chat completion. Only Chat Completions that have been
    /// created with the `store` parameter set to `true` can be deleted.
    ///
    ///
    /// - Remark: HTTP `DELETE /chat/completions/{completion_id}`.
    /// - Remark: Generated from `#/paths//chat/completions/{completion_id}/delete(deleteChatCompletion)`.
    public enum deleteChatCompletion {
        public static let id: Swift.String = "deleteChatCompletion"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the chat completion to delete.
                ///
                /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/DELETE/path/completion_id`.
                public var completion_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - completion_id: The ID of the chat completion to delete.
                public init(completion_id: Swift.String) {
                    self.completion_id = completion_id
                }
            }
            public var path: Operations.deleteChatCompletion.Input.Path
            /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteChatCompletion.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteChatCompletion.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.deleteChatCompletion.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.deleteChatCompletion.Input.Path,
                headers: Operations.deleteChatCompletion.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.ChatCompletionDeleted)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ChatCompletionDeleted {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.deleteChatCompletion.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.deleteChatCompletion.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The chat completion was deleted successfully.
            ///
            /// - Remark: Generated from `#/paths//chat/completions/{completion_id}/delete(deleteChatCompletion)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.deleteChatCompletion.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.deleteChatCompletion.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get the messages in a stored chat completion. Only Chat Completions that
    /// have been created with the `store` parameter set to `true` will be
    /// returned.
    ///
    ///
    /// - Remark: HTTP `GET /chat/completions/{completion_id}/messages`.
    /// - Remark: Generated from `#/paths//chat/completions/{completion_id}/messages/get(getChatCompletionMessages)`.
    public enum getChatCompletionMessages {
        public static let id: Swift.String = "getChatCompletionMessages"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/messages/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the chat completion to retrieve messages from.
                ///
                /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/messages/GET/path/completion_id`.
                public var completion_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - completion_id: The ID of the chat completion to retrieve messages from.
                public init(completion_id: Swift.String) {
                    self.completion_id = completion_id
                }
            }
            public var path: Operations.getChatCompletionMessages.Input.Path
            /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/messages/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Identifier for the last message from the previous pagination request.
                ///
                /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/messages/GET/query/after`.
                public var after: Swift.String?
                /// Number of messages to retrieve.
                ///
                /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/messages/GET/query/limit`.
                public var limit: Swift.Int?
                /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/messages/GET/query/order`.
                @frozen public enum orderPayload: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// Sort order for messages by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`.
                ///
                /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/messages/GET/query/order`.
                public var order: Operations.getChatCompletionMessages.Input.Query.orderPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - after: Identifier for the last message from the previous pagination request.
                ///   - limit: Number of messages to retrieve.
                ///   - order: Sort order for messages by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`.
                public init(
                    after: Swift.String? = nil,
                    limit: Swift.Int? = nil,
                    order: Operations.getChatCompletionMessages.Input.Query.orderPayload? = nil
                ) {
                    self.after = after
                    self.limit = limit
                    self.order = order
                }
            }
            public var query: Operations.getChatCompletionMessages.Input.Query
            /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/messages/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getChatCompletionMessages.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getChatCompletionMessages.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getChatCompletionMessages.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getChatCompletionMessages.Input.Path,
                query: Operations.getChatCompletionMessages.Input.Query = .init(),
                headers: Operations.getChatCompletionMessages.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/messages/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/completions/{completion_id}/messages/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ChatCompletionMessageList)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ChatCompletionMessageList {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getChatCompletionMessages.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getChatCompletionMessages.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A list of messages
            ///
            /// - Remark: Generated from `#/paths//chat/completions/{completion_id}/messages/get(getChatCompletionMessages)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getChatCompletionMessages.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getChatCompletionMessages.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates a completion for the provided prompt and parameters.
    ///
    /// - Remark: HTTP `POST /completions`.
    /// - Remark: Generated from `#/paths//completions/post(createCompletion)`.
    public enum createCompletion {
        public static let id: Swift.String = "createCompletion"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/completions/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createCompletion.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createCompletion.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createCompletion.Input.Headers
            /// - Remark: Generated from `#/paths/completions/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/completions/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateCompletionRequest)
            }
            public var body: Operations.createCompletion.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createCompletion.Input.Headers = .init(),
                body: Operations.createCompletion.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/completions/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/completions/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CreateCompletionResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CreateCompletionResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createCompletion.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createCompletion.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//completions/post(createCompletion)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createCompletion.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createCompletion.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates an embedding vector representing the input text.
    ///
    /// - Remark: HTTP `POST /embeddings`.
    /// - Remark: Generated from `#/paths//embeddings/post(createEmbedding)`.
    public enum createEmbedding {
        public static let id: Swift.String = "createEmbedding"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/embeddings/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createEmbedding.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createEmbedding.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createEmbedding.Input.Headers
            /// - Remark: Generated from `#/paths/embeddings/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/embeddings/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateEmbeddingRequest)
            }
            public var body: Operations.createEmbedding.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createEmbedding.Input.Headers = .init(),
                body: Operations.createEmbedding.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/embeddings/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/embeddings/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CreateEmbeddingResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CreateEmbeddingResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createEmbedding.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createEmbedding.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//embeddings/post(createEmbedding)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createEmbedding.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createEmbedding.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List evaluations for a project.
    ///
    ///
    /// - Remark: HTTP `GET /evals`.
    /// - Remark: Generated from `#/paths//evals/get(listEvals)`.
    public enum listEvals {
        public static let id: Swift.String = "listEvals"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/evals/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Identifier for the last eval from the previous pagination request.
                ///
                /// - Remark: Generated from `#/paths/evals/GET/query/after`.
                public var after: Swift.String?
                /// Number of evals to retrieve.
                ///
                /// - Remark: Generated from `#/paths/evals/GET/query/limit`.
                public var limit: Swift.Int?
                /// - Remark: Generated from `#/paths/evals/GET/query/order`.
                @frozen public enum orderPayload: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// Sort order for evals by timestamp. Use `asc` for ascending order or `desc` for descending order.
                ///
                /// - Remark: Generated from `#/paths/evals/GET/query/order`.
                public var order: Operations.listEvals.Input.Query.orderPayload?
                /// - Remark: Generated from `#/paths/evals/GET/query/order_by`.
                @frozen public enum order_byPayload: String, Codable, Hashable, Sendable {
                    case created_at = "created_at"
                    case updated_at = "updated_at"
                }
                /// Evals can be ordered by creation time or last updated time. Use
                /// `created_at` for creation time or `updated_at` for last updated time.
                ///
                ///
                /// - Remark: Generated from `#/paths/evals/GET/query/order_by`.
                public var order_by: Operations.listEvals.Input.Query.order_byPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - after: Identifier for the last eval from the previous pagination request.
                ///   - limit: Number of evals to retrieve.
                ///   - order: Sort order for evals by timestamp. Use `asc` for ascending order or `desc` for descending order.
                ///   - order_by: Evals can be ordered by creation time or last updated time. Use
                public init(
                    after: Swift.String? = nil,
                    limit: Swift.Int? = nil,
                    order: Operations.listEvals.Input.Query.orderPayload? = nil,
                    order_by: Operations.listEvals.Input.Query.order_byPayload? = nil
                ) {
                    self.after = after
                    self.limit = limit
                    self.order = order
                    self.order_by = order_by
                }
            }
            public var query: Operations.listEvals.Input.Query
            /// - Remark: Generated from `#/paths/evals/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listEvals.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listEvals.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.listEvals.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.listEvals.Input.Query = .init(),
                headers: Operations.listEvals.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/evals/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/evals/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.EvalList)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.EvalList {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.listEvals.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.listEvals.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A list of evals
            ///
            /// - Remark: Generated from `#/paths//evals/get(listEvals)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.listEvals.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.listEvals.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create the structure of an evaluation that can be used to test a model's performance.
    /// An evaluation is a set of testing criteria and a datasource. After creating an evaluation, you can run it on different models and model parameters. We support several types of graders and datasources.
    /// For more information, see the [Evals guide](/docs/guides/evals).
    ///
    ///
    /// - Remark: HTTP `POST /evals`.
    /// - Remark: Generated from `#/paths//evals/post(createEval)`.
    public enum createEval {
        public static let id: Swift.String = "createEval"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/evals/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createEval.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createEval.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createEval.Input.Headers
            /// - Remark: Generated from `#/paths/evals/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/evals/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateEvalRequest)
            }
            public var body: Operations.createEval.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createEval.Input.Headers = .init(),
                body: Operations.createEval.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/evals/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/evals/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.Eval)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Eval {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createEval.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createEval.Output.Created.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//evals/post(createEval)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.createEval.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.createEval.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an evaluation by ID.
    ///
    ///
    /// - Remark: HTTP `GET /evals/{eval_id}`.
    /// - Remark: Generated from `#/paths//evals/{eval_id}/get(getEval)`.
    public enum getEval {
        public static let id: Swift.String = "getEval"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/evals/{eval_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the evaluation to retrieve.
                ///
                /// - Remark: Generated from `#/paths/evals/{eval_id}/GET/path/eval_id`.
                public var eval_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - eval_id: The ID of the evaluation to retrieve.
                public init(eval_id: Swift.String) {
                    self.eval_id = eval_id
                }
            }
            public var path: Operations.getEval.Input.Path
            /// - Remark: Generated from `#/paths/evals/{eval_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getEval.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getEval.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getEval.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getEval.Input.Path,
                headers: Operations.getEval.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/evals/{eval_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/evals/{eval_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Eval)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Eval {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getEval.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getEval.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The evaluation
            ///
            /// - Remark: Generated from `#/paths//evals/{eval_id}/get(getEval)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getEval.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getEval.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update certain properties of an evaluation.
    ///
    ///
    /// - Remark: HTTP `POST /evals/{eval_id}`.
    /// - Remark: Generated from `#/paths//evals/{eval_id}/post(updateEval)`.
    public enum updateEval {
        public static let id: Swift.String = "updateEval"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/evals/{eval_id}/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the evaluation to update.
                ///
                /// - Remark: Generated from `#/paths/evals/{eval_id}/POST/path/eval_id`.
                public var eval_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - eval_id: The ID of the evaluation to update.
                public init(eval_id: Swift.String) {
                    self.eval_id = eval_id
                }
            }
            public var path: Operations.updateEval.Input.Path
            /// - Remark: Generated from `#/paths/evals/{eval_id}/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.updateEval.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.updateEval.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.updateEval.Input.Headers
            /// - Remark: Generated from `#/paths/evals/{eval_id}/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/evals/{eval_id}/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Rename the evaluation.
                    ///
                    /// - Remark: Generated from `#/paths/evals/{eval_id}/POST/requestBody/json/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/paths/evals/{eval_id}/POST/requestBody/json/metadata`.
                    public var metadata: Components.Schemas.Metadata?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: Rename the evaluation.
                    ///   - metadata:
                    public init(
                        name: Swift.String? = nil,
                        metadata: Components.Schemas.Metadata? = nil
                    ) {
                        self.name = name
                        self.metadata = metadata
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case metadata
                    }
                }
                /// - Remark: Generated from `#/paths/evals/{eval_id}/POST/requestBody/content/application\/json`.
                case json(Operations.updateEval.Input.Body.jsonPayload)
            }
            public var body: Operations.updateEval.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.updateEval.Input.Path,
                headers: Operations.updateEval.Input.Headers = .init(),
                body: Operations.updateEval.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/evals/{eval_id}/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/evals/{eval_id}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Eval)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Eval {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.updateEval.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.updateEval.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The updated evaluation
            ///
            /// - Remark: Generated from `#/paths//evals/{eval_id}/post(updateEval)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.updateEval.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.updateEval.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete an evaluation.
    ///
    ///
    /// - Remark: HTTP `DELETE /evals/{eval_id}`.
    /// - Remark: Generated from `#/paths//evals/{eval_id}/delete(deleteEval)`.
    public enum deleteEval {
        public static let id: Swift.String = "deleteEval"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/evals/{eval_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the evaluation to delete.
                ///
                /// - Remark: Generated from `#/paths/evals/{eval_id}/DELETE/path/eval_id`.
                public var eval_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - eval_id: The ID of the evaluation to delete.
                public init(eval_id: Swift.String) {
                    self.eval_id = eval_id
                }
            }
            public var path: Operations.deleteEval.Input.Path
            /// - Remark: Generated from `#/paths/evals/{eval_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteEval.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteEval.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.deleteEval.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.deleteEval.Input.Path,
                headers: Operations.deleteEval.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/evals/{eval_id}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/evals/{eval_id}/DELETE/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/evals/{eval_id}/DELETE/responses/200/content/json/object`.
                        public var object: Swift.String
                        /// - Remark: Generated from `#/paths/evals/{eval_id}/DELETE/responses/200/content/json/deleted`.
                        public var deleted: Swift.Bool
                        /// - Remark: Generated from `#/paths/evals/{eval_id}/DELETE/responses/200/content/json/eval_id`.
                        public var eval_id: Swift.String
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - object:
                        ///   - deleted:
                        ///   - eval_id:
                        public init(
                            object: Swift.String,
                            deleted: Swift.Bool,
                            eval_id: Swift.String
                        ) {
                            self.object = object
                            self.deleted = deleted
                            self.eval_id = eval_id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case object
                            case deleted
                            case eval_id
                        }
                    }
                    /// - Remark: Generated from `#/paths/evals/{eval_id}/DELETE/responses/200/content/application\/json`.
                    case json(Operations.deleteEval.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.deleteEval.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.deleteEval.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.deleteEval.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successfully deleted the evaluation.
            ///
            /// - Remark: Generated from `#/paths//evals/{eval_id}/delete(deleteEval)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.deleteEval.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.deleteEval.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/evals/{eval_id}/DELETE/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/evals/{eval_id}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.deleteEval.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.deleteEval.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Evaluation not found.
            ///
            /// - Remark: Generated from `#/paths//evals/{eval_id}/delete(deleteEval)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.deleteEval.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.deleteEval.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a list of runs for an evaluation.
    ///
    ///
    /// - Remark: HTTP `GET /evals/{eval_id}/runs`.
    /// - Remark: Generated from `#/paths//evals/{eval_id}/runs/get(getEvalRuns)`.
    public enum getEvalRuns {
        public static let id: Swift.String = "getEvalRuns"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the evaluation to retrieve runs for.
                ///
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/GET/path/eval_id`.
                public var eval_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - eval_id: The ID of the evaluation to retrieve runs for.
                public init(eval_id: Swift.String) {
                    self.eval_id = eval_id
                }
            }
            public var path: Operations.getEvalRuns.Input.Path
            /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Identifier for the last run from the previous pagination request.
                ///
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/GET/query/after`.
                public var after: Swift.String?
                /// Number of runs to retrieve.
                ///
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/GET/query/limit`.
                public var limit: Swift.Int?
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/GET/query/order`.
                @frozen public enum orderPayload: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// Sort order for runs by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`.
                ///
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/GET/query/order`.
                public var order: Operations.getEvalRuns.Input.Query.orderPayload?
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/GET/query/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case queued = "queued"
                    case in_progress = "in_progress"
                    case completed = "completed"
                    case canceled = "canceled"
                    case failed = "failed"
                }
                /// Filter runs by status. One of `queued` | `in_progress` | `failed` | `completed` | `canceled`.
                ///
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/GET/query/status`.
                public var status: Operations.getEvalRuns.Input.Query.statusPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - after: Identifier for the last run from the previous pagination request.
                ///   - limit: Number of runs to retrieve.
                ///   - order: Sort order for runs by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`.
                ///   - status: Filter runs by status. One of `queued` | `in_progress` | `failed` | `completed` | `canceled`.
                public init(
                    after: Swift.String? = nil,
                    limit: Swift.Int? = nil,
                    order: Operations.getEvalRuns.Input.Query.orderPayload? = nil,
                    status: Operations.getEvalRuns.Input.Query.statusPayload? = nil
                ) {
                    self.after = after
                    self.limit = limit
                    self.order = order
                    self.status = status
                }
            }
            public var query: Operations.getEvalRuns.Input.Query
            /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getEvalRuns.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getEvalRuns.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getEvalRuns.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getEvalRuns.Input.Path,
                query: Operations.getEvalRuns.Input.Query = .init(),
                headers: Operations.getEvalRuns.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.EvalRunList)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.EvalRunList {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getEvalRuns.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getEvalRuns.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A list of runs for the evaluation
            ///
            /// - Remark: Generated from `#/paths//evals/{eval_id}/runs/get(getEvalRuns)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getEvalRuns.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getEvalRuns.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a new evaluation run. This is the endpoint that will kick off grading.
    ///
    ///
    /// - Remark: HTTP `POST /evals/{eval_id}/runs`.
    /// - Remark: Generated from `#/paths//evals/{eval_id}/runs/post(createEvalRun)`.
    public enum createEvalRun {
        public static let id: Swift.String = "createEvalRun"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the evaluation to create a run for.
                ///
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/POST/path/eval_id`.
                public var eval_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - eval_id: The ID of the evaluation to create a run for.
                public init(eval_id: Swift.String) {
                    self.eval_id = eval_id
                }
            }
            public var path: Operations.createEvalRun.Input.Path
            /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createEvalRun.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createEvalRun.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createEvalRun.Input.Headers
            /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateEvalRunRequest)
            }
            public var body: Operations.createEvalRun.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.createEvalRun.Input.Path,
                headers: Operations.createEvalRun.Input.Headers = .init(),
                body: Operations.createEvalRun.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.EvalRun)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.EvalRun {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createEvalRun.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createEvalRun.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Successfully created a run for the evaluation
            ///
            /// - Remark: Generated from `#/paths//evals/{eval_id}/runs/post(createEvalRun)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.createEvalRun.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.createEvalRun.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createEvalRun.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createEvalRun.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Bad request (for example, missing eval object)
            ///
            /// - Remark: Generated from `#/paths//evals/{eval_id}/runs/post(createEvalRun)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.createEvalRun.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.createEvalRun.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an evaluation run by ID.
    ///
    ///
    /// - Remark: HTTP `GET /evals/{eval_id}/runs/{run_id}`.
    /// - Remark: Generated from `#/paths//evals/{eval_id}/runs/{run_id}/get(getEvalRun)`.
    public enum getEvalRun {
        public static let id: Swift.String = "getEvalRun"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the evaluation to retrieve runs for.
                ///
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/GET/path/eval_id`.
                public var eval_id: Swift.String
                /// The ID of the run to retrieve.
                ///
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/GET/path/run_id`.
                public var run_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - eval_id: The ID of the evaluation to retrieve runs for.
                ///   - run_id: The ID of the run to retrieve.
                public init(
                    eval_id: Swift.String,
                    run_id: Swift.String
                ) {
                    self.eval_id = eval_id
                    self.run_id = run_id
                }
            }
            public var path: Operations.getEvalRun.Input.Path
            /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getEvalRun.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getEvalRun.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getEvalRun.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getEvalRun.Input.Path,
                headers: Operations.getEvalRun.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.EvalRun)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.EvalRun {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getEvalRun.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getEvalRun.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The evaluation run
            ///
            /// - Remark: Generated from `#/paths//evals/{eval_id}/runs/{run_id}/get(getEvalRun)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getEvalRun.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getEvalRun.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Cancel an ongoing evaluation run.
    ///
    ///
    /// - Remark: HTTP `POST /evals/{eval_id}/runs/{run_id}`.
    /// - Remark: Generated from `#/paths//evals/{eval_id}/runs/{run_id}/post(cancelEvalRun)`.
    public enum cancelEvalRun {
        public static let id: Swift.String = "cancelEvalRun"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the evaluation whose run you want to cancel.
                ///
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/POST/path/eval_id`.
                public var eval_id: Swift.String
                /// The ID of the run to cancel.
                ///
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/POST/path/run_id`.
                public var run_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - eval_id: The ID of the evaluation whose run you want to cancel.
                ///   - run_id: The ID of the run to cancel.
                public init(
                    eval_id: Swift.String,
                    run_id: Swift.String
                ) {
                    self.eval_id = eval_id
                    self.run_id = run_id
                }
            }
            public var path: Operations.cancelEvalRun.Input.Path
            /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cancelEvalRun.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cancelEvalRun.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.cancelEvalRun.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.cancelEvalRun.Input.Path,
                headers: Operations.cancelEvalRun.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.EvalRun)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.EvalRun {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.cancelEvalRun.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.cancelEvalRun.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The canceled eval run object
            ///
            /// - Remark: Generated from `#/paths//evals/{eval_id}/runs/{run_id}/post(cancelEvalRun)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.cancelEvalRun.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.cancelEvalRun.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete an eval run.
    ///
    ///
    /// - Remark: HTTP `DELETE /evals/{eval_id}/runs/{run_id}`.
    /// - Remark: Generated from `#/paths//evals/{eval_id}/runs/{run_id}/delete(deleteEvalRun)`.
    public enum deleteEvalRun {
        public static let id: Swift.String = "deleteEvalRun"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the evaluation to delete the run from.
                ///
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/DELETE/path/eval_id`.
                public var eval_id: Swift.String
                /// The ID of the run to delete.
                ///
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/DELETE/path/run_id`.
                public var run_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - eval_id: The ID of the evaluation to delete the run from.
                ///   - run_id: The ID of the run to delete.
                public init(
                    eval_id: Swift.String,
                    run_id: Swift.String
                ) {
                    self.eval_id = eval_id
                    self.run_id = run_id
                }
            }
            public var path: Operations.deleteEvalRun.Input.Path
            /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteEvalRun.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteEvalRun.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.deleteEvalRun.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.deleteEvalRun.Input.Path,
                headers: Operations.deleteEvalRun.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/DELETE/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/DELETE/responses/200/content/json/object`.
                        public var object: Swift.String?
                        /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/DELETE/responses/200/content/json/deleted`.
                        public var deleted: Swift.Bool?
                        /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/DELETE/responses/200/content/json/run_id`.
                        public var run_id: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - object:
                        ///   - deleted:
                        ///   - run_id:
                        public init(
                            object: Swift.String? = nil,
                            deleted: Swift.Bool? = nil,
                            run_id: Swift.String? = nil
                        ) {
                            self.object = object
                            self.deleted = deleted
                            self.run_id = run_id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case object
                            case deleted
                            case run_id
                        }
                    }
                    /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/DELETE/responses/200/content/application\/json`.
                    case json(Operations.deleteEvalRun.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.deleteEvalRun.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.deleteEvalRun.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.deleteEvalRun.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successfully deleted the eval run
            ///
            /// - Remark: Generated from `#/paths//evals/{eval_id}/runs/{run_id}/delete(deleteEvalRun)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.deleteEvalRun.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.deleteEvalRun.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/DELETE/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas._Error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas._Error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.deleteEvalRun.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.deleteEvalRun.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Run not found
            ///
            /// - Remark: Generated from `#/paths//evals/{eval_id}/runs/{run_id}/delete(deleteEvalRun)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.deleteEvalRun.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.deleteEvalRun.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a list of output items for an evaluation run.
    ///
    ///
    /// - Remark: HTTP `GET /evals/{eval_id}/runs/{run_id}/output_items`.
    /// - Remark: Generated from `#/paths//evals/{eval_id}/runs/{run_id}/output_items/get(getEvalRunOutputItems)`.
    public enum getEvalRunOutputItems {
        public static let id: Swift.String = "getEvalRunOutputItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/output_items/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the evaluation to retrieve runs for.
                ///
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/output_items/GET/path/eval_id`.
                public var eval_id: Swift.String
                /// The ID of the run to retrieve output items for.
                ///
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/output_items/GET/path/run_id`.
                public var run_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - eval_id: The ID of the evaluation to retrieve runs for.
                ///   - run_id: The ID of the run to retrieve output items for.
                public init(
                    eval_id: Swift.String,
                    run_id: Swift.String
                ) {
                    self.eval_id = eval_id
                    self.run_id = run_id
                }
            }
            public var path: Operations.getEvalRunOutputItems.Input.Path
            /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/output_items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Identifier for the last output item from the previous pagination request.
                ///
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/output_items/GET/query/after`.
                public var after: Swift.String?
                /// Number of output items to retrieve.
                ///
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/output_items/GET/query/limit`.
                public var limit: Swift.Int?
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/output_items/GET/query/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case fail = "fail"
                    case pass = "pass"
                }
                /// Filter output items by status. Use `failed` to filter by failed output
                /// items or `pass` to filter by passed output items.
                ///
                ///
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/output_items/GET/query/status`.
                public var status: Operations.getEvalRunOutputItems.Input.Query.statusPayload?
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/output_items/GET/query/order`.
                @frozen public enum orderPayload: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// Sort order for output items by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`.
                ///
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/output_items/GET/query/order`.
                public var order: Operations.getEvalRunOutputItems.Input.Query.orderPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - after: Identifier for the last output item from the previous pagination request.
                ///   - limit: Number of output items to retrieve.
                ///   - status: Filter output items by status. Use `failed` to filter by failed output
                ///   - order: Sort order for output items by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`.
                public init(
                    after: Swift.String? = nil,
                    limit: Swift.Int? = nil,
                    status: Operations.getEvalRunOutputItems.Input.Query.statusPayload? = nil,
                    order: Operations.getEvalRunOutputItems.Input.Query.orderPayload? = nil
                ) {
                    self.after = after
                    self.limit = limit
                    self.status = status
                    self.order = order
                }
            }
            public var query: Operations.getEvalRunOutputItems.Input.Query
            /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/output_items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getEvalRunOutputItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getEvalRunOutputItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getEvalRunOutputItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getEvalRunOutputItems.Input.Path,
                query: Operations.getEvalRunOutputItems.Input.Query = .init(),
                headers: Operations.getEvalRunOutputItems.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/output_items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/output_items/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.EvalRunOutputItemList)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.EvalRunOutputItemList {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getEvalRunOutputItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getEvalRunOutputItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A list of output items for the evaluation run
            ///
            /// - Remark: Generated from `#/paths//evals/{eval_id}/runs/{run_id}/output_items/get(getEvalRunOutputItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getEvalRunOutputItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getEvalRunOutputItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an evaluation run output item by ID.
    ///
    ///
    /// - Remark: HTTP `GET /evals/{eval_id}/runs/{run_id}/output_items/{output_item_id}`.
    /// - Remark: Generated from `#/paths//evals/{eval_id}/runs/{run_id}/output_items/{output_item_id}/get(getEvalRunOutputItem)`.
    public enum getEvalRunOutputItem {
        public static let id: Swift.String = "getEvalRunOutputItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/output_items/{output_item_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the evaluation to retrieve runs for.
                ///
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/output_items/{output_item_id}/GET/path/eval_id`.
                public var eval_id: Swift.String
                /// The ID of the run to retrieve.
                ///
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/output_items/{output_item_id}/GET/path/run_id`.
                public var run_id: Swift.String
                /// The ID of the output item to retrieve.
                ///
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/output_items/{output_item_id}/GET/path/output_item_id`.
                public var output_item_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - eval_id: The ID of the evaluation to retrieve runs for.
                ///   - run_id: The ID of the run to retrieve.
                ///   - output_item_id: The ID of the output item to retrieve.
                public init(
                    eval_id: Swift.String,
                    run_id: Swift.String,
                    output_item_id: Swift.String
                ) {
                    self.eval_id = eval_id
                    self.run_id = run_id
                    self.output_item_id = output_item_id
                }
            }
            public var path: Operations.getEvalRunOutputItem.Input.Path
            /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/output_items/{output_item_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getEvalRunOutputItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getEvalRunOutputItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getEvalRunOutputItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getEvalRunOutputItem.Input.Path,
                headers: Operations.getEvalRunOutputItem.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/output_items/{output_item_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/evals/{eval_id}/runs/{run_id}/output_items/{output_item_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.EvalRunOutputItem)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.EvalRunOutputItem {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getEvalRunOutputItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getEvalRunOutputItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// The evaluation run output item
            ///
            /// - Remark: Generated from `#/paths//evals/{eval_id}/runs/{run_id}/output_items/{output_item_id}/get(getEvalRunOutputItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getEvalRunOutputItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getEvalRunOutputItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns a list of files.
    ///
    /// - Remark: HTTP `GET /files`.
    /// - Remark: Generated from `#/paths//files/get(listFiles)`.
    public enum listFiles {
        public static let id: Swift.String = "listFiles"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Only return files with the given purpose.
                ///
                /// - Remark: Generated from `#/paths/files/GET/query/purpose`.
                public var purpose: Swift.String?
                /// A limit on the number of objects to be returned. Limit can range between 1 and 10,000, and the default is 10,000.
                ///
                ///
                /// - Remark: Generated from `#/paths/files/GET/query/limit`.
                public var limit: Swift.Int?
                /// - Remark: Generated from `#/paths/files/GET/query/order`.
                @frozen public enum orderPayload: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                ///
                ///
                /// - Remark: Generated from `#/paths/files/GET/query/order`.
                public var order: Operations.listFiles.Input.Query.orderPayload?
                /// A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/files/GET/query/after`.
                public var after: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - purpose: Only return files with the given purpose.
                ///   - limit: A limit on the number of objects to be returned. Limit can range between 1 and 10,000, and the default is 10,000.
                ///   - order: Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                ///   - after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                public init(
                    purpose: Swift.String? = nil,
                    limit: Swift.Int? = nil,
                    order: Operations.listFiles.Input.Query.orderPayload? = nil,
                    after: Swift.String? = nil
                ) {
                    self.purpose = purpose
                    self.limit = limit
                    self.order = order
                    self.after = after
                }
            }
            public var query: Operations.listFiles.Input.Query
            /// - Remark: Generated from `#/paths/files/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listFiles.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listFiles.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.listFiles.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.listFiles.Input.Query = .init(),
                headers: Operations.listFiles.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListFilesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListFilesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.listFiles.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.listFiles.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//files/get(listFiles)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.listFiles.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.listFiles.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Upload a file that can be used across various endpoints. Individual files can be up to 512 MB, and the size of all files uploaded by one organization can be up to 100 GB.
    ///
    /// The Assistants API supports files up to 2 million tokens and of specific file types. See the [Assistants Tools guide](/docs/assistants/tools) for details.
    ///
    /// The Fine-tuning API only supports `.jsonl` files. The input also has certain required formats for fine-tuning [chat](/docs/api-reference/fine-tuning/chat-input) or [completions](/docs/api-reference/fine-tuning/completions-input) models.
    ///
    /// The Batch API only supports `.jsonl` files up to 200 MB in size. The input also has a specific required [format](/docs/api-reference/batch/request-input).
    ///
    /// Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
    ///
    ///
    /// - Remark: HTTP `POST /files`.
    /// - Remark: Generated from `#/paths//files/post(createFile)`.
    public enum createFile {
        public static let id: Swift.String = "createFile"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createFile.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createFile.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createFile.Input.Headers
            /// - Remark: Generated from `#/paths/files/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Components.Schemas.CreateFileRequest>)
            }
            public var body: Operations.createFile.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createFile.Input.Headers = .init(),
                body: Operations.createFile.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.OpenAIFile)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.OpenAIFile {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createFile.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createFile.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//files/post(createFile)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createFile.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createFile.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns information about a specific file.
    ///
    /// - Remark: HTTP `GET /files/{file_id}`.
    /// - Remark: Generated from `#/paths//files/{file_id}/get(retrieveFile)`.
    public enum retrieveFile {
        public static let id: Swift.String = "retrieveFile"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files/{file_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the file to use for this request.
                ///
                /// - Remark: Generated from `#/paths/files/{file_id}/GET/path/file_id`.
                public var file_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - file_id: The ID of the file to use for this request.
                public init(file_id: Swift.String) {
                    self.file_id = file_id
                }
            }
            public var path: Operations.retrieveFile.Input.Path
            /// - Remark: Generated from `#/paths/files/{file_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.retrieveFile.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.retrieveFile.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.retrieveFile.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.retrieveFile.Input.Path,
                headers: Operations.retrieveFile.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files/{file_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files/{file_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.OpenAIFile)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.OpenAIFile {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.retrieveFile.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.retrieveFile.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//files/{file_id}/get(retrieveFile)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.retrieveFile.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.retrieveFile.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a file.
    ///
    /// - Remark: HTTP `DELETE /files/{file_id}`.
    /// - Remark: Generated from `#/paths//files/{file_id}/delete(deleteFile)`.
    public enum deleteFile {
        public static let id: Swift.String = "deleteFile"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files/{file_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the file to use for this request.
                ///
                /// - Remark: Generated from `#/paths/files/{file_id}/DELETE/path/file_id`.
                public var file_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - file_id: The ID of the file to use for this request.
                public init(file_id: Swift.String) {
                    self.file_id = file_id
                }
            }
            public var path: Operations.deleteFile.Input.Path
            /// - Remark: Generated from `#/paths/files/{file_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteFile.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteFile.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.deleteFile.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.deleteFile.Input.Path,
                headers: Operations.deleteFile.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files/{file_id}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files/{file_id}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.DeleteFileResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DeleteFileResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.deleteFile.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.deleteFile.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//files/{file_id}/delete(deleteFile)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.deleteFile.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.deleteFile.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns the contents of the specified file.
    ///
    /// - Remark: HTTP `GET /files/{file_id}/content`.
    /// - Remark: Generated from `#/paths//files/{file_id}/content/get(downloadFile)`.
    public enum downloadFile {
        public static let id: Swift.String = "downloadFile"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/files/{file_id}/content/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the file to use for this request.
                ///
                /// - Remark: Generated from `#/paths/files/{file_id}/content/GET/path/file_id`.
                public var file_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - file_id: The ID of the file to use for this request.
                public init(file_id: Swift.String) {
                    self.file_id = file_id
                }
            }
            public var path: Operations.downloadFile.Input.Path
            /// - Remark: Generated from `#/paths/files/{file_id}/content/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.downloadFile.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.downloadFile.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.downloadFile.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.downloadFile.Input.Path,
                headers: Operations.downloadFile.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/files/{file_id}/content/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/files/{file_id}/content/GET/responses/200/content/application\/json`.
                    case json(Swift.String)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Swift.String {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.downloadFile.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.downloadFile.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//files/{file_id}/content/get(downloadFile)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.downloadFile.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.downloadFile.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// **NOTE:** This endpoint requires an [admin API key](../admin-api-keys).
    ///
    /// Organization owners can use this endpoint to view all permissions for a fine-tuned model checkpoint.
    ///
    ///
    /// - Remark: HTTP `GET /fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions`.
    /// - Remark: Generated from `#/paths//fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/get(listFineTuningCheckpointPermissions)`.
    public enum listFineTuningCheckpointPermissions {
        public static let id: Swift.String = "listFineTuningCheckpointPermissions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the fine-tuned model checkpoint to get permissions for.
                ///
                ///
                /// - Remark: Generated from `#/paths/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/GET/path/fine_tuned_model_checkpoint`.
                public var fine_tuned_model_checkpoint: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - fine_tuned_model_checkpoint: The ID of the fine-tuned model checkpoint to get permissions for.
                public init(fine_tuned_model_checkpoint: Swift.String) {
                    self.fine_tuned_model_checkpoint = fine_tuned_model_checkpoint
                }
            }
            public var path: Operations.listFineTuningCheckpointPermissions.Input.Path
            /// - Remark: Generated from `#/paths/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The ID of the project to get permissions for.
                ///
                /// - Remark: Generated from `#/paths/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/GET/query/project_id`.
                public var project_id: Swift.String?
                /// Identifier for the last permission ID from the previous pagination request.
                ///
                /// - Remark: Generated from `#/paths/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/GET/query/after`.
                public var after: Swift.String?
                /// Number of permissions to retrieve.
                ///
                /// - Remark: Generated from `#/paths/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/GET/query/limit`.
                public var limit: Swift.Int?
                /// - Remark: Generated from `#/paths/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/GET/query/order`.
                @frozen public enum orderPayload: String, Codable, Hashable, Sendable {
                    case ascending = "ascending"
                    case descending = "descending"
                }
                /// The order in which to retrieve permissions.
                ///
                /// - Remark: Generated from `#/paths/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/GET/query/order`.
                public var order: Operations.listFineTuningCheckpointPermissions.Input.Query.orderPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - project_id: The ID of the project to get permissions for.
                ///   - after: Identifier for the last permission ID from the previous pagination request.
                ///   - limit: Number of permissions to retrieve.
                ///   - order: The order in which to retrieve permissions.
                public init(
                    project_id: Swift.String? = nil,
                    after: Swift.String? = nil,
                    limit: Swift.Int? = nil,
                    order: Operations.listFineTuningCheckpointPermissions.Input.Query.orderPayload? = nil
                ) {
                    self.project_id = project_id
                    self.after = after
                    self.limit = limit
                    self.order = order
                }
            }
            public var query: Operations.listFineTuningCheckpointPermissions.Input.Query
            /// - Remark: Generated from `#/paths/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listFineTuningCheckpointPermissions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listFineTuningCheckpointPermissions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.listFineTuningCheckpointPermissions.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.listFineTuningCheckpointPermissions.Input.Path,
                query: Operations.listFineTuningCheckpointPermissions.Input.Query = .init(),
                headers: Operations.listFineTuningCheckpointPermissions.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListFineTuningCheckpointPermissionResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListFineTuningCheckpointPermissionResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.listFineTuningCheckpointPermissions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.listFineTuningCheckpointPermissions.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/get(listFineTuningCheckpointPermissions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.listFineTuningCheckpointPermissions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.listFineTuningCheckpointPermissions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// **NOTE:** Calling this endpoint requires an [admin API key](../admin-api-keys).
    ///
    /// This enables organization owners to share fine-tuned models with other projects in their organization.
    ///
    ///
    /// - Remark: HTTP `POST /fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions`.
    /// - Remark: Generated from `#/paths//fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/post(createFineTuningCheckpointPermission)`.
    public enum createFineTuningCheckpointPermission {
        public static let id: Swift.String = "createFineTuningCheckpointPermission"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the fine-tuned model checkpoint to create a permission for.
                ///
                ///
                /// - Remark: Generated from `#/paths/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/POST/path/fine_tuned_model_checkpoint`.
                public var fine_tuned_model_checkpoint: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - fine_tuned_model_checkpoint: The ID of the fine-tuned model checkpoint to create a permission for.
                public init(fine_tuned_model_checkpoint: Swift.String) {
                    self.fine_tuned_model_checkpoint = fine_tuned_model_checkpoint
                }
            }
            public var path: Operations.createFineTuningCheckpointPermission.Input.Path
            /// - Remark: Generated from `#/paths/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createFineTuningCheckpointPermission.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createFineTuningCheckpointPermission.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createFineTuningCheckpointPermission.Input.Headers
            /// - Remark: Generated from `#/paths/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateFineTuningCheckpointPermissionRequest)
            }
            public var body: Operations.createFineTuningCheckpointPermission.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.createFineTuningCheckpointPermission.Input.Path,
                headers: Operations.createFineTuningCheckpointPermission.Input.Headers = .init(),
                body: Operations.createFineTuningCheckpointPermission.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListFineTuningCheckpointPermissionResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListFineTuningCheckpointPermissionResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createFineTuningCheckpointPermission.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createFineTuningCheckpointPermission.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/post(createFineTuningCheckpointPermission)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createFineTuningCheckpointPermission.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createFineTuningCheckpointPermission.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// **NOTE:** This endpoint requires an [admin API key](../admin-api-keys).
    ///
    /// Organization owners can use this endpoint to delete a permission for a fine-tuned model checkpoint.
    ///
    ///
    /// - Remark: HTTP `DELETE /fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/{permission_id}`.
    /// - Remark: Generated from `#/paths//fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/{permission_id}/delete(deleteFineTuningCheckpointPermission)`.
    public enum deleteFineTuningCheckpointPermission {
        public static let id: Swift.String = "deleteFineTuningCheckpointPermission"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/{permission_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the fine-tuned model checkpoint to delete a permission for.
                ///
                ///
                /// - Remark: Generated from `#/paths/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/{permission_id}/DELETE/path/fine_tuned_model_checkpoint`.
                public var fine_tuned_model_checkpoint: Swift.String
                /// The ID of the fine-tuned model checkpoint permission to delete.
                ///
                ///
                /// - Remark: Generated from `#/paths/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/{permission_id}/DELETE/path/permission_id`.
                public var permission_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - fine_tuned_model_checkpoint: The ID of the fine-tuned model checkpoint to delete a permission for.
                ///   - permission_id: The ID of the fine-tuned model checkpoint permission to delete.
                public init(
                    fine_tuned_model_checkpoint: Swift.String,
                    permission_id: Swift.String
                ) {
                    self.fine_tuned_model_checkpoint = fine_tuned_model_checkpoint
                    self.permission_id = permission_id
                }
            }
            public var path: Operations.deleteFineTuningCheckpointPermission.Input.Path
            /// - Remark: Generated from `#/paths/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/{permission_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteFineTuningCheckpointPermission.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteFineTuningCheckpointPermission.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.deleteFineTuningCheckpointPermission.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.deleteFineTuningCheckpointPermission.Input.Path,
                headers: Operations.deleteFineTuningCheckpointPermission.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/{permission_id}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/{permission_id}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.DeleteFineTuningCheckpointPermissionResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DeleteFineTuningCheckpointPermissionResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.deleteFineTuningCheckpointPermission.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.deleteFineTuningCheckpointPermission.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/{permission_id}/delete(deleteFineTuningCheckpointPermission)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.deleteFineTuningCheckpointPermission.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.deleteFineTuningCheckpointPermission.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List your organization's fine-tuning jobs
    ///
    ///
    /// - Remark: HTTP `GET /fine_tuning/jobs`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/get(listPaginatedFineTuningJobs)`.
    public enum listPaginatedFineTuningJobs {
        public static let id: Swift.String = "listPaginatedFineTuningJobs"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fine_tuning/jobs/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Identifier for the last job from the previous pagination request.
                ///
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/GET/query/after`.
                public var after: Swift.String?
                /// Number of fine-tuning jobs to retrieve.
                ///
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/GET/query/limit`.
                public var limit: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - after: Identifier for the last job from the previous pagination request.
                ///   - limit: Number of fine-tuning jobs to retrieve.
                public init(
                    after: Swift.String? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.after = after
                    self.limit = limit
                }
            }
            public var query: Operations.listPaginatedFineTuningJobs.Input.Query
            /// - Remark: Generated from `#/paths/fine_tuning/jobs/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listPaginatedFineTuningJobs.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listPaginatedFineTuningJobs.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.listPaginatedFineTuningJobs.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.listPaginatedFineTuningJobs.Input.Query = .init(),
                headers: Operations.listPaginatedFineTuningJobs.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fine_tuning/jobs/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListPaginatedFineTuningJobsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListPaginatedFineTuningJobsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.listPaginatedFineTuningJobs.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.listPaginatedFineTuningJobs.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//fine_tuning/jobs/get(listPaginatedFineTuningJobs)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.listPaginatedFineTuningJobs.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.listPaginatedFineTuningJobs.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates a fine-tuning job which begins the process of creating a new model from a given dataset.
    ///
    /// Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
    ///
    /// [Learn more about fine-tuning](/docs/guides/fine-tuning)
    ///
    ///
    /// - Remark: HTTP `POST /fine_tuning/jobs`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/post(createFineTuningJob)`.
    public enum createFineTuningJob {
        public static let id: Swift.String = "createFineTuningJob"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fine_tuning/jobs/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createFineTuningJob.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createFineTuningJob.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createFineTuningJob.Input.Headers
            /// - Remark: Generated from `#/paths/fine_tuning/jobs/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateFineTuningJobRequest)
            }
            public var body: Operations.createFineTuningJob.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createFineTuningJob.Input.Headers = .init(),
                body: Operations.createFineTuningJob.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fine_tuning/jobs/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FineTuningJob)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FineTuningJob {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createFineTuningJob.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createFineTuningJob.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//fine_tuning/jobs/post(createFineTuningJob)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createFineTuningJob.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createFineTuningJob.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get info about a fine-tuning job.
    ///
    /// [Learn more about fine-tuning](/docs/guides/fine-tuning)
    ///
    ///
    /// - Remark: HTTP `GET /fine_tuning/jobs/{fine_tuning_job_id}`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/get(retrieveFineTuningJob)`.
    public enum retrieveFineTuningJob {
        public static let id: Swift.String = "retrieveFineTuningJob"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the fine-tuning job.
                ///
                ///
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/GET/path/fine_tuning_job_id`.
                public var fine_tuning_job_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - fine_tuning_job_id: The ID of the fine-tuning job.
                public init(fine_tuning_job_id: Swift.String) {
                    self.fine_tuning_job_id = fine_tuning_job_id
                }
            }
            public var path: Operations.retrieveFineTuningJob.Input.Path
            /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.retrieveFineTuningJob.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.retrieveFineTuningJob.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.retrieveFineTuningJob.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.retrieveFineTuningJob.Input.Path,
                headers: Operations.retrieveFineTuningJob.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.FineTuningJob)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FineTuningJob {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.retrieveFineTuningJob.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.retrieveFineTuningJob.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/get(retrieveFineTuningJob)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.retrieveFineTuningJob.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.retrieveFineTuningJob.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Immediately cancel a fine-tune job.
    ///
    ///
    /// - Remark: HTTP `POST /fine_tuning/jobs/{fine_tuning_job_id}/cancel`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/cancel/post(cancelFineTuningJob)`.
    public enum cancelFineTuningJob {
        public static let id: Swift.String = "cancelFineTuningJob"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/cancel/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the fine-tuning job to cancel.
                ///
                ///
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/cancel/POST/path/fine_tuning_job_id`.
                public var fine_tuning_job_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - fine_tuning_job_id: The ID of the fine-tuning job to cancel.
                public init(fine_tuning_job_id: Swift.String) {
                    self.fine_tuning_job_id = fine_tuning_job_id
                }
            }
            public var path: Operations.cancelFineTuningJob.Input.Path
            /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/cancel/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cancelFineTuningJob.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cancelFineTuningJob.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.cancelFineTuningJob.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.cancelFineTuningJob.Input.Path,
                headers: Operations.cancelFineTuningJob.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/cancel/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/cancel/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FineTuningJob)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FineTuningJob {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.cancelFineTuningJob.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.cancelFineTuningJob.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/cancel/post(cancelFineTuningJob)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.cancelFineTuningJob.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.cancelFineTuningJob.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List checkpoints for a fine-tuning job.
    ///
    ///
    /// - Remark: HTTP `GET /fine_tuning/jobs/{fine_tuning_job_id}/checkpoints`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/checkpoints/get(listFineTuningJobCheckpoints)`.
    public enum listFineTuningJobCheckpoints {
        public static let id: Swift.String = "listFineTuningJobCheckpoints"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the fine-tuning job to get checkpoints for.
                ///
                ///
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints/GET/path/fine_tuning_job_id`.
                public var fine_tuning_job_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - fine_tuning_job_id: The ID of the fine-tuning job to get checkpoints for.
                public init(fine_tuning_job_id: Swift.String) {
                    self.fine_tuning_job_id = fine_tuning_job_id
                }
            }
            public var path: Operations.listFineTuningJobCheckpoints.Input.Path
            /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Identifier for the last checkpoint ID from the previous pagination request.
                ///
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints/GET/query/after`.
                public var after: Swift.String?
                /// Number of checkpoints to retrieve.
                ///
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints/GET/query/limit`.
                public var limit: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - after: Identifier for the last checkpoint ID from the previous pagination request.
                ///   - limit: Number of checkpoints to retrieve.
                public init(
                    after: Swift.String? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.after = after
                    self.limit = limit
                }
            }
            public var query: Operations.listFineTuningJobCheckpoints.Input.Query
            /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listFineTuningJobCheckpoints.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listFineTuningJobCheckpoints.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.listFineTuningJobCheckpoints.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.listFineTuningJobCheckpoints.Input.Path,
                query: Operations.listFineTuningJobCheckpoints.Input.Query = .init(),
                headers: Operations.listFineTuningJobCheckpoints.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListFineTuningJobCheckpointsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListFineTuningJobCheckpointsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.listFineTuningJobCheckpoints.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.listFineTuningJobCheckpoints.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/checkpoints/get(listFineTuningJobCheckpoints)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.listFineTuningJobCheckpoints.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.listFineTuningJobCheckpoints.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get status updates for a fine-tuning job.
    ///
    ///
    /// - Remark: HTTP `GET /fine_tuning/jobs/{fine_tuning_job_id}/events`.
    /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/events/get(listFineTuningEvents)`.
    public enum listFineTuningEvents {
        public static let id: Swift.String = "listFineTuningEvents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/events/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the fine-tuning job to get events for.
                ///
                ///
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/events/GET/path/fine_tuning_job_id`.
                public var fine_tuning_job_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - fine_tuning_job_id: The ID of the fine-tuning job to get events for.
                public init(fine_tuning_job_id: Swift.String) {
                    self.fine_tuning_job_id = fine_tuning_job_id
                }
            }
            public var path: Operations.listFineTuningEvents.Input.Path
            /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/events/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Identifier for the last event from the previous pagination request.
                ///
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/events/GET/query/after`.
                public var after: Swift.String?
                /// Number of events to retrieve.
                ///
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/events/GET/query/limit`.
                public var limit: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - after: Identifier for the last event from the previous pagination request.
                ///   - limit: Number of events to retrieve.
                public init(
                    after: Swift.String? = nil,
                    limit: Swift.Int? = nil
                ) {
                    self.after = after
                    self.limit = limit
                }
            }
            public var query: Operations.listFineTuningEvents.Input.Query
            /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/events/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listFineTuningEvents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listFineTuningEvents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.listFineTuningEvents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.listFineTuningEvents.Input.Path,
                query: Operations.listFineTuningEvents.Input.Query = .init(),
                headers: Operations.listFineTuningEvents.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/events/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fine_tuning/jobs/{fine_tuning_job_id}/events/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListFineTuningJobEventsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListFineTuningJobEventsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.listFineTuningEvents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.listFineTuningEvents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//fine_tuning/jobs/{fine_tuning_job_id}/events/get(listFineTuningEvents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.listFineTuningEvents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.listFineTuningEvents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates an edited or extended image given one or more source images and a prompt. This endpoint only supports `gpt-image-1` and `dall-e-2`.
    ///
    /// - Remark: HTTP `POST /images/edits`.
    /// - Remark: Generated from `#/paths//images/edits/post(createImageEdit)`.
    public enum createImageEdit {
        public static let id: Swift.String = "createImageEdit"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/edits/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createImageEdit.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createImageEdit.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createImageEdit.Input.Headers
            /// - Remark: Generated from `#/paths/images/edits/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/edits/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Components.Schemas.CreateImageEditRequest>)
            }
            public var body: Operations.createImageEdit.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createImageEdit.Input.Headers = .init(),
                body: Operations.createImageEdit.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/edits/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/edits/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ImagesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ImagesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createImageEdit.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createImageEdit.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//images/edits/post(createImageEdit)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createImageEdit.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createImageEdit.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates an image given a prompt. [Learn more](/docs/guides/images).
    ///
    ///
    /// - Remark: HTTP `POST /images/generations`.
    /// - Remark: Generated from `#/paths//images/generations/post(createImage)`.
    public enum createImage {
        public static let id: Swift.String = "createImage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/generations/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createImage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createImage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createImage.Input.Headers
            /// - Remark: Generated from `#/paths/images/generations/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/generations/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateImageRequest)
            }
            public var body: Operations.createImage.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createImage.Input.Headers = .init(),
                body: Operations.createImage.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/generations/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/generations/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ImagesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ImagesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createImage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createImage.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//images/generations/post(createImage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createImage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createImage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates a variation of a given image. This endpoint only supports `dall-e-2`.
    ///
    /// - Remark: HTTP `POST /images/variations`.
    /// - Remark: Generated from `#/paths//images/variations/post(createImageVariation)`.
    public enum createImageVariation {
        public static let id: Swift.String = "createImageVariation"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/variations/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createImageVariation.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createImageVariation.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createImageVariation.Input.Headers
            /// - Remark: Generated from `#/paths/images/variations/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/variations/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Components.Schemas.CreateImageVariationRequest>)
            }
            public var body: Operations.createImageVariation.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createImageVariation.Input.Headers = .init(),
                body: Operations.createImageVariation.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/variations/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/variations/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ImagesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ImagesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createImageVariation.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createImageVariation.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//images/variations/post(createImageVariation)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createImageVariation.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createImageVariation.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Lists the currently available models, and provides basic information about each one such as the owner and availability.
    ///
    /// - Remark: HTTP `GET /models`.
    /// - Remark: Generated from `#/paths//models/get(listModels)`.
    public enum listModels {
        public static let id: Swift.String = "listModels"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/models/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listModels.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listModels.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.listModels.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.listModels.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/models/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/models/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListModelsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListModelsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.listModels.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.listModels.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//models/get(listModels)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.listModels.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.listModels.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
    ///
    /// - Remark: HTTP `GET /models/{model}`.
    /// - Remark: Generated from `#/paths//models/{model}/get(retrieveModel)`.
    public enum retrieveModel {
        public static let id: Swift.String = "retrieveModel"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/models/{model}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the model to use for this request
                ///
                /// - Remark: Generated from `#/paths/models/{model}/GET/path/model`.
                public var model: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - model: The ID of the model to use for this request
                public init(model: Swift.String) {
                    self.model = model
                }
            }
            public var path: Operations.retrieveModel.Input.Path
            /// - Remark: Generated from `#/paths/models/{model}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.retrieveModel.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.retrieveModel.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.retrieveModel.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.retrieveModel.Input.Path,
                headers: Operations.retrieveModel.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/models/{model}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/models/{model}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Model)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Model {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.retrieveModel.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.retrieveModel.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//models/{model}/get(retrieveModel)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.retrieveModel.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.retrieveModel.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
    ///
    /// - Remark: HTTP `DELETE /models/{model}`.
    /// - Remark: Generated from `#/paths//models/{model}/delete(deleteModel)`.
    public enum deleteModel {
        public static let id: Swift.String = "deleteModel"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/models/{model}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The model to delete
                ///
                /// - Remark: Generated from `#/paths/models/{model}/DELETE/path/model`.
                public var model: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - model: The model to delete
                public init(model: Swift.String) {
                    self.model = model
                }
            }
            public var path: Operations.deleteModel.Input.Path
            /// - Remark: Generated from `#/paths/models/{model}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteModel.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteModel.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.deleteModel.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.deleteModel.Input.Path,
                headers: Operations.deleteModel.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/models/{model}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/models/{model}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.DeleteModelResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DeleteModelResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.deleteModel.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.deleteModel.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//models/{model}/delete(deleteModel)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.deleteModel.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.deleteModel.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Classifies if text and/or image inputs are potentially harmful. Learn
    /// more in the [moderation guide](/docs/guides/moderation).
    ///
    ///
    /// - Remark: HTTP `POST /moderations`.
    /// - Remark: Generated from `#/paths//moderations/post(createModeration)`.
    public enum createModeration {
        public static let id: Swift.String = "createModeration"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/moderations/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createModeration.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createModeration.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createModeration.Input.Headers
            /// - Remark: Generated from `#/paths/moderations/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/moderations/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateModerationRequest)
            }
            public var body: Operations.createModeration.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createModeration.Input.Headers = .init(),
                body: Operations.createModeration.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/moderations/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/moderations/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CreateModerationResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CreateModerationResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createModeration.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createModeration.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//moderations/post(createModeration)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createModeration.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createModeration.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List user actions and configuration changes within this organization.
    ///
    /// - Remark: HTTP `GET /organization/audit_logs`.
    /// - Remark: Generated from `#/paths//organization/audit_logs/get(list-audit-logs)`.
    public enum list_hyphen_audit_hyphen_logs {
        public static let id: Swift.String = "list-audit-logs"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/audit_logs/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/audit_logs/GET/query/effective_at`.
                public struct effective_atPayload: Codable, Hashable, Sendable {
                    /// Return only events whose `effective_at` (Unix seconds) is greater than this value.
                    ///
                    /// - Remark: Generated from `#/paths/organization/audit_logs/GET/query/effective_at/gt`.
                    public var gt: Swift.Int?
                    /// Return only events whose `effective_at` (Unix seconds) is greater than or equal to this value.
                    ///
                    /// - Remark: Generated from `#/paths/organization/audit_logs/GET/query/effective_at/gte`.
                    public var gte: Swift.Int?
                    /// Return only events whose `effective_at` (Unix seconds) is less than this value.
                    ///
                    /// - Remark: Generated from `#/paths/organization/audit_logs/GET/query/effective_at/lt`.
                    public var lt: Swift.Int?
                    /// Return only events whose `effective_at` (Unix seconds) is less than or equal to this value.
                    ///
                    /// - Remark: Generated from `#/paths/organization/audit_logs/GET/query/effective_at/lte`.
                    public var lte: Swift.Int?
                    /// Creates a new `effective_atPayload`.
                    ///
                    /// - Parameters:
                    ///   - gt: Return only events whose `effective_at` (Unix seconds) is greater than this value.
                    ///   - gte: Return only events whose `effective_at` (Unix seconds) is greater than or equal to this value.
                    ///   - lt: Return only events whose `effective_at` (Unix seconds) is less than this value.
                    ///   - lte: Return only events whose `effective_at` (Unix seconds) is less than or equal to this value.
                    public init(
                        gt: Swift.Int? = nil,
                        gte: Swift.Int? = nil,
                        lt: Swift.Int? = nil,
                        lte: Swift.Int? = nil
                    ) {
                        self.gt = gt
                        self.gte = gte
                        self.lt = lt
                        self.lte = lte
                    }
                    public enum CodingKeys: String, CodingKey {
                        case gt
                        case gte
                        case lt
                        case lte
                    }
                }
                /// Return only events whose `effective_at` (Unix seconds) is in this range.
                ///
                /// - Remark: Generated from `#/paths/organization/audit_logs/GET/query/effective_at`.
                public var effective_at: Operations.list_hyphen_audit_hyphen_logs.Input.Query.effective_atPayload?
                /// Return only events for these projects.
                ///
                /// - Remark: Generated from `#/paths/organization/audit_logs/GET/query/project_ids[]`.
                public var project_ids_lbrack__rbrack_: [Swift.String]?
                /// Return only events with a `type` in one of these values. For example, `project.created`. For all options, see the documentation for the [audit log object](/docs/api-reference/audit-logs/object).
                ///
                /// - Remark: Generated from `#/paths/organization/audit_logs/GET/query/event_types[]`.
                public var event_types_lbrack__rbrack_: [Components.Schemas.AuditLogEventType]?
                /// Return only events performed by these actors. Can be a user ID, a service account ID, or an api key tracking ID.
                ///
                /// - Remark: Generated from `#/paths/organization/audit_logs/GET/query/actor_ids[]`.
                public var actor_ids_lbrack__rbrack_: [Swift.String]?
                /// Return only events performed by users with these emails.
                ///
                /// - Remark: Generated from `#/paths/organization/audit_logs/GET/query/actor_emails[]`.
                public var actor_emails_lbrack__rbrack_: [Swift.String]?
                /// Return only events performed on these targets. For example, a project ID updated.
                ///
                /// - Remark: Generated from `#/paths/organization/audit_logs/GET/query/resource_ids[]`.
                public var resource_ids_lbrack__rbrack_: [Swift.String]?
                /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/audit_logs/GET/query/limit`.
                public var limit: Swift.Int?
                /// A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/audit_logs/GET/query/after`.
                public var after: Swift.String?
                /// A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/organization/audit_logs/GET/query/before`.
                public var before: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - effective_at: Return only events whose `effective_at` (Unix seconds) is in this range.
                ///   - project_ids_lbrack__rbrack_: Return only events for these projects.
                ///   - event_types_lbrack__rbrack_: Return only events with a `type` in one of these values. For example, `project.created`. For all options, see the documentation for the [audit log object](/docs/api-reference/audit-logs/object).
                ///   - actor_ids_lbrack__rbrack_: Return only events performed by these actors. Can be a user ID, a service account ID, or an api key tracking ID.
                ///   - actor_emails_lbrack__rbrack_: Return only events performed by users with these emails.
                ///   - resource_ids_lbrack__rbrack_: Return only events performed on these targets. For example, a project ID updated.
                ///   - limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///   - after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///   - before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                public init(
                    effective_at: Operations.list_hyphen_audit_hyphen_logs.Input.Query.effective_atPayload? = nil,
                    project_ids_lbrack__rbrack_: [Swift.String]? = nil,
                    event_types_lbrack__rbrack_: [Components.Schemas.AuditLogEventType]? = nil,
                    actor_ids_lbrack__rbrack_: [Swift.String]? = nil,
                    actor_emails_lbrack__rbrack_: [Swift.String]? = nil,
                    resource_ids_lbrack__rbrack_: [Swift.String]? = nil,
                    limit: Swift.Int? = nil,
                    after: Swift.String? = nil,
                    before: Swift.String? = nil
                ) {
                    self.effective_at = effective_at
                    self.project_ids_lbrack__rbrack_ = project_ids_lbrack__rbrack_
                    self.event_types_lbrack__rbrack_ = event_types_lbrack__rbrack_
                    self.actor_ids_lbrack__rbrack_ = actor_ids_lbrack__rbrack_
                    self.actor_emails_lbrack__rbrack_ = actor_emails_lbrack__rbrack_
                    self.resource_ids_lbrack__rbrack_ = resource_ids_lbrack__rbrack_
                    self.limit = limit
                    self.after = after
                    self.before = before
                }
            }
            public var query: Operations.list_hyphen_audit_hyphen_logs.Input.Query
            /// - Remark: Generated from `#/paths/organization/audit_logs/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.list_hyphen_audit_hyphen_logs.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.list_hyphen_audit_hyphen_logs.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.list_hyphen_audit_hyphen_logs.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.list_hyphen_audit_hyphen_logs.Input.Query = .init(),
                headers: Operations.list_hyphen_audit_hyphen_logs.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/audit_logs/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/audit_logs/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListAuditLogsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListAuditLogsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.list_hyphen_audit_hyphen_logs.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.list_hyphen_audit_hyphen_logs.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Audit logs listed successfully.
            ///
            /// - Remark: Generated from `#/paths//organization/audit_logs/get(list-audit-logs)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.list_hyphen_audit_hyphen_logs.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.list_hyphen_audit_hyphen_logs.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a thread.
    ///
    /// - Remark: HTTP `POST /threads`.
    /// - Remark: Generated from `#/paths//threads/post(createThread)`.
    public enum createThread {
        public static let id: Swift.String = "createThread"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createThread.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createThread.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createThread.Input.Headers
            /// - Remark: Generated from `#/paths/threads/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateThreadRequest)
            }
            public var body: Operations.createThread.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createThread.Input.Headers = .init(),
                body: Operations.createThread.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ThreadObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ThreadObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createThread.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createThread.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/post(createThread)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createThread.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createThread.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a thread and run it in one request.
    ///
    /// - Remark: HTTP `POST /threads/runs`.
    /// - Remark: Generated from `#/paths//threads/runs/post(createThreadAndRun)`.
    public enum createThreadAndRun {
        public static let id: Swift.String = "createThreadAndRun"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/runs/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createThreadAndRun.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createThreadAndRun.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createThreadAndRun.Input.Headers
            /// - Remark: Generated from `#/paths/threads/runs/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/runs/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateThreadAndRunRequest)
            }
            public var body: Operations.createThreadAndRun.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createThreadAndRun.Input.Headers = .init(),
                body: Operations.createThreadAndRun.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/runs/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/runs/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.RunObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RunObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createThreadAndRun.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createThreadAndRun.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/runs/post(createThreadAndRun)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createThreadAndRun.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createThreadAndRun.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a thread.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/get(getThread)`.
    public enum getThread {
        public static let id: Swift.String = "getThread"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the thread to retrieve.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/GET/path/thread_id`.
                public var thread_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - thread_id: The ID of the thread to retrieve.
                public init(thread_id: Swift.String) {
                    self.thread_id = thread_id
                }
            }
            public var path: Operations.getThread.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getThread.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getThread.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getThread.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getThread.Input.Path,
                headers: Operations.getThread.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ThreadObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ThreadObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getThread.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getThread.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/get(getThread)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getThread.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getThread.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Modifies a thread.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/post(modifyThread)`.
    public enum modifyThread {
        public static let id: Swift.String = "modifyThread"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the thread to modify. Only the `metadata` can be modified.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/POST/path/thread_id`.
                public var thread_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - thread_id: The ID of the thread to modify. Only the `metadata` can be modified.
                public init(thread_id: Swift.String) {
                    self.thread_id = thread_id
                }
            }
            public var path: Operations.modifyThread.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.modifyThread.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.modifyThread.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.modifyThread.Input.Headers
            /// - Remark: Generated from `#/paths/threads/{thread_id}/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ModifyThreadRequest)
            }
            public var body: Operations.modifyThread.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.modifyThread.Input.Path,
                headers: Operations.modifyThread.Input.Headers = .init(),
                body: Operations.modifyThread.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ThreadObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ThreadObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.modifyThread.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.modifyThread.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/post(modifyThread)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.modifyThread.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.modifyThread.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a thread.
    ///
    /// - Remark: HTTP `DELETE /threads/{thread_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/delete(deleteThread)`.
    public enum deleteThread {
        public static let id: Swift.String = "deleteThread"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the thread to delete.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/DELETE/path/thread_id`.
                public var thread_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - thread_id: The ID of the thread to delete.
                public init(thread_id: Swift.String) {
                    self.thread_id = thread_id
                }
            }
            public var path: Operations.deleteThread.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteThread.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteThread.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.deleteThread.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.deleteThread.Input.Path,
                headers: Operations.deleteThread.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.DeleteThreadResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DeleteThreadResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.deleteThread.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.deleteThread.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/delete(deleteThread)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.deleteThread.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.deleteThread.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns a list of messages for a given thread.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/messages`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/get(listMessages)`.
    public enum listMessages {
        public static let id: Swift.String = "listMessages"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the [thread](/docs/api-reference/threads) the messages belong to.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/GET/path/thread_id`.
                public var thread_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - thread_id: The ID of the [thread](/docs/api-reference/threads) the messages belong to.
                public init(thread_id: Swift.String) {
                    self.thread_id = thread_id
                }
            }
            public var path: Operations.listMessages.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/GET/query`.
            public struct Query: Sendable, Hashable {
                /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/GET/query/limit`.
                public var limit: Swift.Int?
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/GET/query/order`.
                @frozen public enum orderPayload: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/GET/query/order`.
                public var order: Operations.listMessages.Input.Query.orderPayload?
                /// A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/GET/query/after`.
                public var after: Swift.String?
                /// A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/GET/query/before`.
                public var before: Swift.String?
                /// Filter messages by the run ID that generated them.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/GET/query/run_id`.
                public var run_id: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///   - order: Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                ///   - after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///   - before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                ///   - run_id: Filter messages by the run ID that generated them.
                public init(
                    limit: Swift.Int? = nil,
                    order: Operations.listMessages.Input.Query.orderPayload? = nil,
                    after: Swift.String? = nil,
                    before: Swift.String? = nil,
                    run_id: Swift.String? = nil
                ) {
                    self.limit = limit
                    self.order = order
                    self.after = after
                    self.before = before
                    self.run_id = run_id
                }
            }
            public var query: Operations.listMessages.Input.Query
            /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listMessages.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listMessages.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.listMessages.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.listMessages.Input.Path,
                query: Operations.listMessages.Input.Query = .init(),
                headers: Operations.listMessages.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListMessagesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListMessagesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.listMessages.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.listMessages.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/get(listMessages)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.listMessages.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.listMessages.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a message.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/messages`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/post(createMessage)`.
    public enum createMessage {
        public static let id: Swift.String = "createMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the [thread](/docs/api-reference/threads) to create a message for.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/POST/path/thread_id`.
                public var thread_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - thread_id: The ID of the [thread](/docs/api-reference/threads) to create a message for.
                public init(thread_id: Swift.String) {
                    self.thread_id = thread_id
                }
            }
            public var path: Operations.createMessage.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createMessage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createMessage.Input.Headers
            /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateMessageRequest)
            }
            public var body: Operations.createMessage.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.createMessage.Input.Path,
                headers: Operations.createMessage.Input.Headers = .init(),
                body: Operations.createMessage.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.MessageObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.MessageObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createMessage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createMessage.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/post(createMessage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve a message.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/messages/{message_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/{message_id}/get(getMessage)`.
    public enum getMessage {
        public static let id: Swift.String = "getMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the [thread](/docs/api-reference/threads) to which this message belongs.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/GET/path/thread_id`.
                public var thread_id: Swift.String
                /// The ID of the message to retrieve.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/GET/path/message_id`.
                public var message_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - thread_id: The ID of the [thread](/docs/api-reference/threads) to which this message belongs.
                ///   - message_id: The ID of the message to retrieve.
                public init(
                    thread_id: Swift.String,
                    message_id: Swift.String
                ) {
                    self.thread_id = thread_id
                    self.message_id = message_id
                }
            }
            public var path: Operations.getMessage.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getMessage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getMessage.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getMessage.Input.Path,
                headers: Operations.getMessage.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.MessageObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.MessageObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getMessage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getMessage.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/{message_id}/get(getMessage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Modifies a message.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/messages/{message_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/{message_id}/post(modifyMessage)`.
    public enum modifyMessage {
        public static let id: Swift.String = "modifyMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the thread to which this message belongs.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/POST/path/thread_id`.
                public var thread_id: Swift.String
                /// The ID of the message to modify.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/POST/path/message_id`.
                public var message_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - thread_id: The ID of the thread to which this message belongs.
                ///   - message_id: The ID of the message to modify.
                public init(
                    thread_id: Swift.String,
                    message_id: Swift.String
                ) {
                    self.thread_id = thread_id
                    self.message_id = message_id
                }
            }
            public var path: Operations.modifyMessage.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.modifyMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.modifyMessage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.modifyMessage.Input.Headers
            /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ModifyMessageRequest)
            }
            public var body: Operations.modifyMessage.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.modifyMessage.Input.Path,
                headers: Operations.modifyMessage.Input.Headers = .init(),
                body: Operations.modifyMessage.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.MessageObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.MessageObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.modifyMessage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.modifyMessage.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/{message_id}/post(modifyMessage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.modifyMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.modifyMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes a message.
    ///
    /// - Remark: HTTP `DELETE /threads/{thread_id}/messages/{message_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/{message_id}/delete(deleteMessage)`.
    public enum deleteMessage {
        public static let id: Swift.String = "deleteMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the thread to which this message belongs.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/DELETE/path/thread_id`.
                public var thread_id: Swift.String
                /// The ID of the message to delete.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/DELETE/path/message_id`.
                public var message_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - thread_id: The ID of the thread to which this message belongs.
                ///   - message_id: The ID of the message to delete.
                public init(
                    thread_id: Swift.String,
                    message_id: Swift.String
                ) {
                    self.thread_id = thread_id
                    self.message_id = message_id
                }
            }
            public var path: Operations.deleteMessage.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteMessage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.deleteMessage.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.deleteMessage.Input.Path,
                headers: Operations.deleteMessage.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/messages/{message_id}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.DeleteMessageResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DeleteMessageResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.deleteMessage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.deleteMessage.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/messages/{message_id}/delete(deleteMessage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.deleteMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.deleteMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns a list of runs belonging to a thread.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/runs`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/get(listRuns)`.
    public enum listRuns {
        public static let id: Swift.String = "listRuns"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the thread the run belongs to.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/GET/path/thread_id`.
                public var thread_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - thread_id: The ID of the thread the run belongs to.
                public init(thread_id: Swift.String) {
                    self.thread_id = thread_id
                }
            }
            public var path: Operations.listRuns.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/GET/query`.
            public struct Query: Sendable, Hashable {
                /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/GET/query/limit`.
                public var limit: Swift.Int?
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/GET/query/order`.
                @frozen public enum orderPayload: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/GET/query/order`.
                public var order: Operations.listRuns.Input.Query.orderPayload?
                /// A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/GET/query/after`.
                public var after: Swift.String?
                /// A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/GET/query/before`.
                public var before: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///   - order: Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                ///   - after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///   - before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                public init(
                    limit: Swift.Int? = nil,
                    order: Operations.listRuns.Input.Query.orderPayload? = nil,
                    after: Swift.String? = nil,
                    before: Swift.String? = nil
                ) {
                    self.limit = limit
                    self.order = order
                    self.after = after
                    self.before = before
                }
            }
            public var query: Operations.listRuns.Input.Query
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listRuns.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listRuns.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.listRuns.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.listRuns.Input.Path,
                query: Operations.listRuns.Input.Query = .init(),
                headers: Operations.listRuns.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListRunsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListRunsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.listRuns.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.listRuns.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/get(listRuns)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.listRuns.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.listRuns.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a run.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/runs`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/post(createRun)`.
    public enum createRun {
        public static let id: Swift.String = "createRun"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the thread to run.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/POST/path/thread_id`.
                public var thread_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - thread_id: The ID of the thread to run.
                public init(thread_id: Swift.String) {
                    self.thread_id = thread_id
                }
            }
            public var path: Operations.createRun.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/POST/query/include_lbrack__rbrack_Payload`.
                @frozen public enum include_lbrack__rbrack_PayloadPayload: String, Codable, Hashable, Sendable {
                    case step_details_period_tool_calls_lbrack__ast__rbrack__period_file_search_period_results_lbrack__ast__rbrack__period_content = "step_details.tool_calls[*].file_search.results[*].content"
                }
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/POST/query/include[]`.
                public typealias include_lbrack__rbrack_Payload = [Operations.createRun.Input.Query.include_lbrack__rbrack_PayloadPayload]
                /// A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
                ///
                /// See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/POST/query/include[]`.
                public var include_lbrack__rbrack_: Operations.createRun.Input.Query.include_lbrack__rbrack_Payload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - include_lbrack__rbrack_: A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
                public init(include_lbrack__rbrack_: Operations.createRun.Input.Query.include_lbrack__rbrack_Payload? = nil) {
                    self.include_lbrack__rbrack_ = include_lbrack__rbrack_
                }
            }
            public var query: Operations.createRun.Input.Query
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createRun.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createRun.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createRun.Input.Headers
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateRunRequest)
            }
            public var body: Operations.createRun.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.createRun.Input.Path,
                query: Operations.createRun.Input.Query = .init(),
                headers: Operations.createRun.Input.Headers = .init(),
                body: Operations.createRun.Input.Body
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.RunObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RunObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createRun.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createRun.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/post(createRun)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createRun.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createRun.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a run.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/runs/{run_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/get(getRun)`.
    public enum getRun {
        public static let id: Swift.String = "getRun"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the [thread](/docs/api-reference/threads) that was run.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/GET/path/thread_id`.
                public var thread_id: Swift.String
                /// The ID of the run to retrieve.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/GET/path/run_id`.
                public var run_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - thread_id: The ID of the [thread](/docs/api-reference/threads) that was run.
                ///   - run_id: The ID of the run to retrieve.
                public init(
                    thread_id: Swift.String,
                    run_id: Swift.String
                ) {
                    self.thread_id = thread_id
                    self.run_id = run_id
                }
            }
            public var path: Operations.getRun.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRun.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRun.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getRun.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getRun.Input.Path,
                headers: Operations.getRun.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.RunObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RunObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getRun.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getRun.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/get(getRun)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getRun.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getRun.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Modifies a run.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/runs/{run_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/post(modifyRun)`.
    public enum modifyRun {
        public static let id: Swift.String = "modifyRun"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the [thread](/docs/api-reference/threads) that was run.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/POST/path/thread_id`.
                public var thread_id: Swift.String
                /// The ID of the run to modify.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/POST/path/run_id`.
                public var run_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - thread_id: The ID of the [thread](/docs/api-reference/threads) that was run.
                ///   - run_id: The ID of the run to modify.
                public init(
                    thread_id: Swift.String,
                    run_id: Swift.String
                ) {
                    self.thread_id = thread_id
                    self.run_id = run_id
                }
            }
            public var path: Operations.modifyRun.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.modifyRun.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.modifyRun.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.modifyRun.Input.Headers
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ModifyRunRequest)
            }
            public var body: Operations.modifyRun.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.modifyRun.Input.Path,
                headers: Operations.modifyRun.Input.Headers = .init(),
                body: Operations.modifyRun.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.RunObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RunObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.modifyRun.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.modifyRun.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/post(modifyRun)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.modifyRun.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.modifyRun.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Cancels a run that is `in_progress`.
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/runs/{run_id}/cancel`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/cancel/post(cancelRun)`.
    public enum cancelRun {
        public static let id: Swift.String = "cancelRun"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/cancel/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the thread to which this run belongs.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/cancel/POST/path/thread_id`.
                public var thread_id: Swift.String
                /// The ID of the run to cancel.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/cancel/POST/path/run_id`.
                public var run_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - thread_id: The ID of the thread to which this run belongs.
                ///   - run_id: The ID of the run to cancel.
                public init(
                    thread_id: Swift.String,
                    run_id: Swift.String
                ) {
                    self.thread_id = thread_id
                    self.run_id = run_id
                }
            }
            public var path: Operations.cancelRun.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/cancel/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cancelRun.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cancelRun.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.cancelRun.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.cancelRun.Input.Path,
                headers: Operations.cancelRun.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/cancel/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/cancel/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.RunObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RunObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.cancelRun.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.cancelRun.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/cancel/post(cancelRun)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.cancelRun.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.cancelRun.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns a list of run steps belonging to a run.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/runs/{run_id}/steps`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/steps/get(listRunSteps)`.
    public enum listRunSteps {
        public static let id: Swift.String = "listRunSteps"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the thread the run and run steps belong to.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/GET/path/thread_id`.
                public var thread_id: Swift.String
                /// The ID of the run the run steps belong to.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/GET/path/run_id`.
                public var run_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - thread_id: The ID of the thread the run and run steps belong to.
                ///   - run_id: The ID of the run the run steps belong to.
                public init(
                    thread_id: Swift.String,
                    run_id: Swift.String
                ) {
                    self.thread_id = thread_id
                    self.run_id = run_id
                }
            }
            public var path: Operations.listRunSteps.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/GET/query/limit`.
                public var limit: Swift.Int?
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/GET/query/order`.
                @frozen public enum orderPayload: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/GET/query/order`.
                public var order: Operations.listRunSteps.Input.Query.orderPayload?
                /// A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/GET/query/after`.
                public var after: Swift.String?
                /// A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/GET/query/before`.
                public var before: Swift.String?
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/GET/query/include_lbrack__rbrack_Payload`.
                @frozen public enum include_lbrack__rbrack_PayloadPayload: String, Codable, Hashable, Sendable {
                    case step_details_period_tool_calls_lbrack__ast__rbrack__period_file_search_period_results_lbrack__ast__rbrack__period_content = "step_details.tool_calls[*].file_search.results[*].content"
                }
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/GET/query/include[]`.
                public typealias include_lbrack__rbrack_Payload = [Operations.listRunSteps.Input.Query.include_lbrack__rbrack_PayloadPayload]
                /// A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
                ///
                /// See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/GET/query/include[]`.
                public var include_lbrack__rbrack_: Operations.listRunSteps.Input.Query.include_lbrack__rbrack_Payload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                ///   - order: Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                ///   - after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                ///   - before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                ///   - include_lbrack__rbrack_: A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
                public init(
                    limit: Swift.Int? = nil,
                    order: Operations.listRunSteps.Input.Query.orderPayload? = nil,
                    after: Swift.String? = nil,
                    before: Swift.String? = nil,
                    include_lbrack__rbrack_: Operations.listRunSteps.Input.Query.include_lbrack__rbrack_Payload? = nil
                ) {
                    self.limit = limit
                    self.order = order
                    self.after = after
                    self.before = before
                    self.include_lbrack__rbrack_ = include_lbrack__rbrack_
                }
            }
            public var query: Operations.listRunSteps.Input.Query
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listRunSteps.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listRunSteps.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.listRunSteps.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.listRunSteps.Input.Path,
                query: Operations.listRunSteps.Input.Query = .init(),
                headers: Operations.listRunSteps.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListRunStepsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListRunStepsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.listRunSteps.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.listRunSteps.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/steps/get(listRunSteps)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.listRunSteps.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.listRunSteps.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a run step.
    ///
    /// - Remark: HTTP `GET /threads/{thread_id}/runs/{run_id}/steps/{step_id}`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/steps/{step_id}/get(getRunStep)`.
    public enum getRunStep {
        public static let id: Swift.String = "getRunStep"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/{step_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the thread to which the run and run step belongs.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/{step_id}/GET/path/thread_id`.
                public var thread_id: Swift.String
                /// The ID of the run to which the run step belongs.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/{step_id}/GET/path/run_id`.
                public var run_id: Swift.String
                /// The ID of the run step to retrieve.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/{step_id}/GET/path/step_id`.
                public var step_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - thread_id: The ID of the thread to which the run and run step belongs.
                ///   - run_id: The ID of the run to which the run step belongs.
                ///   - step_id: The ID of the run step to retrieve.
                public init(
                    thread_id: Swift.String,
                    run_id: Swift.String,
                    step_id: Swift.String
                ) {
                    self.thread_id = thread_id
                    self.run_id = run_id
                    self.step_id = step_id
                }
            }
            public var path: Operations.getRunStep.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/{step_id}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/{step_id}/GET/query/include_lbrack__rbrack_Payload`.
                @frozen public enum include_lbrack__rbrack_PayloadPayload: String, Codable, Hashable, Sendable {
                    case step_details_period_tool_calls_lbrack__ast__rbrack__period_file_search_period_results_lbrack__ast__rbrack__period_content = "step_details.tool_calls[*].file_search.results[*].content"
                }
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/{step_id}/GET/query/include[]`.
                public typealias include_lbrack__rbrack_Payload = [Operations.getRunStep.Input.Query.include_lbrack__rbrack_PayloadPayload]
                /// A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
                ///
                /// See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.
                ///
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/{step_id}/GET/query/include[]`.
                public var include_lbrack__rbrack_: Operations.getRunStep.Input.Query.include_lbrack__rbrack_Payload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - include_lbrack__rbrack_: A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
                public init(include_lbrack__rbrack_: Operations.getRunStep.Input.Query.include_lbrack__rbrack_Payload? = nil) {
                    self.include_lbrack__rbrack_ = include_lbrack__rbrack_
                }
            }
            public var query: Operations.getRunStep.Input.Query
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/{step_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRunStep.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRunStep.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getRunStep.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getRunStep.Input.Path,
                query: Operations.getRunStep.Input.Query = .init(),
                headers: Operations.getRunStep.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/{step_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/steps/{step_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.RunStepObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RunStepObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getRunStep.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getRunStep.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/steps/{step_id}/get(getRunStep)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getRunStep.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getRunStep.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// When a run has the `status: "requires_action"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.
    ///
    ///
    /// - Remark: HTTP `POST /threads/{thread_id}/runs/{run_id}/submit_tool_outputs`.
    /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/submit_tool_outputs/post(submitToolOuputsToRun)`.
    public enum submitToolOuputsToRun {
        public static let id: Swift.String = "submitToolOuputsToRun"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/submit_tool_outputs/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/submit_tool_outputs/POST/path/thread_id`.
                public var thread_id: Swift.String
                /// The ID of the run that requires the tool output submission.
                ///
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/submit_tool_outputs/POST/path/run_id`.
                public var run_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - thread_id: The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
                ///   - run_id: The ID of the run that requires the tool output submission.
                public init(
                    thread_id: Swift.String,
                    run_id: Swift.String
                ) {
                    self.thread_id = thread_id
                    self.run_id = run_id
                }
            }
            public var path: Operations.submitToolOuputsToRun.Input.Path
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/submit_tool_outputs/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.submitToolOuputsToRun.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.submitToolOuputsToRun.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.submitToolOuputsToRun.Input.Headers
            /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/submit_tool_outputs/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/submit_tool_outputs/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.SubmitToolOutputsRunRequest)
            }
            public var body: Operations.submitToolOuputsToRun.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.submitToolOuputsToRun.Input.Path,
                headers: Operations.submitToolOuputsToRun.Input.Headers = .init(),
                body: Operations.submitToolOuputsToRun.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/submit_tool_outputs/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/threads/{thread_id}/runs/{run_id}/submit_tool_outputs/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.RunObject)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RunObject {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.submitToolOuputsToRun.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.submitToolOuputsToRun.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//threads/{thread_id}/runs/{run_id}/submit_tool_outputs/post(submitToolOuputsToRun)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.submitToolOuputsToRun.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.submitToolOuputsToRun.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates an intermediate [Upload](/docs/api-reference/uploads/object) object
    /// that you can add [Parts](/docs/api-reference/uploads/part-object) to.
    /// Currently, an Upload can accept at most 8 GB in total and expires after an
    /// hour after you create it.
    ///
    /// Once you complete the Upload, we will create a
    /// [File](/docs/api-reference/files/object) object that contains all the parts
    /// you uploaded. This File is usable in the rest of our platform as a regular
    /// File object.
    ///
    /// For certain `purpose` values, the correct `mime_type` must be specified. 
    /// Please refer to documentation for the 
    /// [supported MIME types for your use case](/docs/assistants/tools/file-search#supported-files).
    ///
    /// For guidance on the proper filename extensions for each purpose, please
    /// follow the documentation on [creating a
    /// File](/docs/api-reference/files/create).
    ///
    ///
    /// - Remark: HTTP `POST /uploads`.
    /// - Remark: Generated from `#/paths//uploads/post(createUpload)`.
    public enum createUpload {
        public static let id: Swift.String = "createUpload"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/uploads/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createUpload.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createUpload.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createUpload.Input.Headers
            /// - Remark: Generated from `#/paths/uploads/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/uploads/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateUploadRequest)
            }
            public var body: Operations.createUpload.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createUpload.Input.Headers = .init(),
                body: Operations.createUpload.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/uploads/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/uploads/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Upload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Upload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createUpload.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createUpload.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//uploads/post(createUpload)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createUpload.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createUpload.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Cancels the Upload. No Parts may be added after an Upload is cancelled.
    ///
    ///
    /// - Remark: HTTP `POST /uploads/{upload_id}/cancel`.
    /// - Remark: Generated from `#/paths//uploads/{upload_id}/cancel/post(cancelUpload)`.
    public enum cancelUpload {
        public static let id: Swift.String = "cancelUpload"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/uploads/{upload_id}/cancel/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the Upload.
                ///
                ///
                /// - Remark: Generated from `#/paths/uploads/{upload_id}/cancel/POST/path/upload_id`.
                public var upload_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - upload_id: The ID of the Upload.
                public init(upload_id: Swift.String) {
                    self.upload_id = upload_id
                }
            }
            public var path: Operations.cancelUpload.Input.Path
            /// - Remark: Generated from `#/paths/uploads/{upload_id}/cancel/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cancelUpload.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cancelUpload.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.cancelUpload.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.cancelUpload.Input.Path,
                headers: Operations.cancelUpload.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/uploads/{upload_id}/cancel/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/uploads/{upload_id}/cancel/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Upload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Upload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.cancelUpload.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.cancelUpload.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//uploads/{upload_id}/cancel/post(cancelUpload)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.cancelUpload.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.cancelUpload.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Completes the [Upload](/docs/api-reference/uploads/object). 
    ///
    /// Within the returned Upload object, there is a nested [File](/docs/api-reference/files/object) object that is ready to use in the rest of the platform.
    ///
    /// You can specify the order of the Parts by passing in an ordered list of the Part IDs.
    ///
    /// The number of bytes uploaded upon completion must match the number of bytes initially specified when creating the Upload object. No Parts may be added after an Upload is completed.
    ///
    ///
    /// - Remark: HTTP `POST /uploads/{upload_id}/complete`.
    /// - Remark: Generated from `#/paths//uploads/{upload_id}/complete/post(completeUpload)`.
    public enum completeUpload {
        public static let id: Swift.String = "completeUpload"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/uploads/{upload_id}/complete/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the Upload.
                ///
                ///
                /// - Remark: Generated from `#/paths/uploads/{upload_id}/complete/POST/path/upload_id`.
                public var upload_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - upload_id: The ID of the Upload.
                public init(upload_id: Swift.String) {
                    self.upload_id = upload_id
                }
            }
            public var path: Operations.completeUpload.Input.Path
            /// - Remark: Generated from `#/paths/uploads/{upload_id}/complete/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.completeUpload.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.completeUpload.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.completeUpload.Input.Headers
            /// - Remark: Generated from `#/paths/uploads/{upload_id}/complete/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/uploads/{upload_id}/complete/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CompleteUploadRequest)
            }
            public var body: Operations.completeUpload.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.completeUpload.Input.Path,
                headers: Operations.completeUpload.Input.Headers = .init(),
                body: Operations.completeUpload.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/uploads/{upload_id}/complete/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/uploads/{upload_id}/complete/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Upload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Upload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.completeUpload.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.completeUpload.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//uploads/{upload_id}/complete/post(completeUpload)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.completeUpload.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.completeUpload.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Adds a [Part](/docs/api-reference/uploads/part-object) to an [Upload](/docs/api-reference/uploads/object) object. A Part represents a chunk of bytes from the file you are trying to upload. 
    ///
    /// Each Part can be at most 64 MB, and you can add Parts until you hit the Upload maximum of 8 GB.
    ///
    /// It is possible to add multiple Parts in parallel. You can decide the intended order of the Parts when you [complete the Upload](/docs/api-reference/uploads/complete).
    ///
    ///
    /// - Remark: HTTP `POST /uploads/{upload_id}/parts`.
    /// - Remark: Generated from `#/paths//uploads/{upload_id}/parts/post(addUploadPart)`.
    public enum addUploadPart {
        public static let id: Swift.String = "addUploadPart"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/uploads/{upload_id}/parts/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the Upload.
                ///
                ///
                /// - Remark: Generated from `#/paths/uploads/{upload_id}/parts/POST/path/upload_id`.
                public var upload_id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - upload_id: The ID of the Upload.
                public init(upload_id: Swift.String) {
                    self.upload_id = upload_id
                }
            }
            public var path: Operations.addUploadPart.Input.Path
            /// - Remark: Generated from `#/paths/uploads/{upload_id}/parts/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.addUploadPart.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.addUploadPart.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.addUploadPart.Input.Headers
            /// - Remark: Generated from `#/paths/uploads/{upload_id}/parts/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/uploads/{upload_id}/parts/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Components.Schemas.AddUploadPartRequest>)
            }
            public var body: Operations.addUploadPart.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.addUploadPart.Input.Path,
                headers: Operations.addUploadPart.Input.Headers = .init(),
                body: Operations.addUploadPart.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/uploads/{upload_id}/parts/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/uploads/{upload_id}/parts/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UploadPart)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UploadPart {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.addUploadPart.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.addUploadPart.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//uploads/{upload_id}/parts/post(addUploadPart)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.addUploadPart.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.addUploadPart.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
